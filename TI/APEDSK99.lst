Asm994a TMS99000 Assembler - v3.010

                * Asm994a Generated Register Equates
                *
      0000 0000 R0      EQU     0 
      0000 0001 R1      EQU     1 
      0000 0002 R2      EQU     2 
      0000 0003 R3      EQU     3 
      0000 0004 R4      EQU     4 
      0000 0005 R5      EQU     5 
      0000 0006 R6      EQU     6 
      0000 0007 R7      EQU     7 
      0000 0008 R8      EQU     8 
      0000 0009 R9      EQU     9 
      0000 000A R10     EQU     10
      0000 000B R11     EQU     11
      0000 000C R12     EQU     12
      0000 000D R13     EQU     13
      0000 000E R14     EQU     14
      0000 000F R15     EQU     15
                *
   1            *===============================================================================================================
   2            * TI DISK CONTROLLER ROM   >4000-5FFF
   3            * 
   4            * initial commented disassembly by Thierry Nouspikel
   5            * (see http://www.unige.ch/medecine/nouspikel/ti99/titechpages.htm)
   6            *
   7            * and
   8            * 
   9            * Monty Schmidt's book: TI Technical Drive
  10            *
  11            * adapted for APEDSK99 by Jochen Buur
  12            * github.com/jambuur/APEDSK99
  13            *
  14            * v12r: support for Double Density / 80 tracks (max 1440 AU's)
  15            *================================================================================================================
  16  0000 5FB4 DSKPRM  EQU     >5FB4                   per DSKx: Mbyte #sectors, Lbyte #sectors, #sectors/track, #tracks, #sides
  17  0000 5FC6 CALLST  EQU     >5FC6                   CALL() execution status: finished, still active, error
  18  0000 5FC7 LSTDRV  EQU     >5FC7                   remember last drive accessed for LDSK without argument
  19  0000 5FC8 CALLBF  EQU     >5FC8                   2-way buffer for TI BASIC CALL's (1 screen line, 32 characters)
  20  0000 5FE8 ACOMND  EQU     >5FE8                   APEDSK99-specific Command register
  21  0000 5FE9 ASUBCM  EQU     >5FE9                   APEDSK99-specific SubCommand register
  22  0000 5FEA RDINT   EQU     >5FEA                   issue read interrupt
  23  0000 5FEE CRUWRI  EQU     >5FEE                   emulated 8 CRU output bits
  24  0000 5FF0 RSTAT   EQU     >5FF0                   read FD1771 Status register
  25  0000 5FF6 RDATA   EQU     >5FF6                   read FD1771 Data register
  26  0000 5FF8 WCOMND  EQU     >5FF8                   write FD1771 Command register
  27  0000 5FFC WSECTR  EQU     >5FFC                   write FD1771 Sector register
  28  0000 5FFE WDATA   EQU     >5FFE                   write FD1771 Data register
  29            *
  30  0000 164E XML14   EQU     >164E                   ROM address for XML >14
  31  0000 15D6 XML16   EQU     >15D6                   ROM address for XML >16
  32            *
  33            *!!! CHECK GROM ADDRESS CONTENTS, NEEDS TO BE >0F5C; UNCOMMENT RELEVANT LINE (different GROM 0 versions)
  34            *
  35            *XML5C  EQU     >1039                   GROM address for XML >5C; GROM v2.2 consoles
  36            *XML5C  EQU     >1058                   GROM address for XML >5C; GROM - Heiner Martin version
  37  0000 105C XML5C   EQU     >105C                   GROM address for XML >5C; GROM - different pointers to character blocks
  38            *
  39  0000 006A GPLINT  EQU     >006A                   jump to GROM interpreter for SCROLL / HONK
  40  0000 2244 XMLRTN  EQU     >2244                   jump to GROM interpreter for RTN (after executing XML >14 / >16 routine)
  41  0000 56CD SCROLL  EQU     >56CD                   GROM address for scroll routine
  42            *
  43            *!!! CHECK GROM ADDRESS CONTENTS, NEEDS TO BE >BF58; UNCOMMENT RELEVANT LINE (different GROM 0 versions)
  44            *
  45            *HONK   EQU     >03AF                   GROM address for "bad tone"; GROM v2.2 consoles
  46            *HONK   EQU     >03D3                   GROM address for "bad tone"; GROM - Heiner Martin version
  47  0000 03D6 HONK    EQU     >03D6                   GROM address for "bad tone"; GROM - different pointers to character blocks
  48            *
  49                    AORG    >4000
  50            *
  51  4000 AA           BYTE    >AA                     standard header mark
  52  4001 02           BYTE    >02                     version 2
  53  4002 0000         DATA    >0000                   no programs
  54  4004 40EC         DATA    PWRUP                   power-up chain ptr
  55  4006 0000         DATA    >0000                   programs chain ptr (none)
  56  4008 40F2         DATA    DSR01                   DSR chain ptr
  57  400A 4010         DATA    SUB01                   subprograms chain ptr
  58  400C 0000         DATA    >0000                   ISR chain ptr (none)
  59  400E 0000         DATA    >0000                   
  60            *
  61  4010 4016 SUB01   DATA    SUB02                   link to next subprogram
  62  4012 5810         DATA    ESUB01                  address of that one
  63  4014 0110         DATA    >0110                   subprogram name: >10 (sector R/W)
  64  4016 401C SUB02   DATA    SUB03                   
  65  4018 5820         DATA    ESUB02                  
  66  401A 0111         DATA    >0111                   subprogram >11 (format disk)
  67  401C 4022 SUB03   DATA    SUB04                   
  68  401E 582A         DATA    ESUB03                  
  69  4020 0112         DATA    >0112                   subprogram >12 (file un/protect)
  70  4022 402A SUB04   DATA    SUB05                   
  71  4024 5884         DATA    ESUB04                  
  72  4026 0113 NTPFAT  DATA    >0113                   subprogram >13 (file rename); doubles as FAT update flag
  73            *
  74  4028 0000 RTN5C   DATA    >0000                   save GPL return address (needs to be @>4028 for XML >5C!)
  75            *
  76  402A 4030 SUB05   DATA    SUB06                   
  77  402C 5950         DATA    ESUB05                  
  78  402E 0114         DATA    >0114                   subprogram >14 (file direct input)              
  79  4030 4036 SUB06   DATA    SUB07                   
  80  4032 59C0         DATA    ESUB06                  
  81  4034 0115         DATA    >0115                   subprogram >15 (file direct output)
  82  4036 403C SUB07   DATA    SUB08                   
  83  4038 5A86         DATA    ESUB07                  
  84  403A 0116         DATA    >0116                   subprogram >16 (number of files)
  85  403C 404C SUB08   DATA    SUB09                   
  86  403E 5A32         DATA    ESUB08                  
  87  4040 05           BYTE    >05                     
  88  4041 4649         TEXT    'FILES'                 same as >16, called from Basic
  88  4043 4C45  
  88  4045 53    
  89            *
  90  4046 0400 PATTBL  DATA    >0400                   TI BASIC VDP RAM address for Pattern Table; change before calling ALOW from assembly
  91  4048 7631 AVERSN  TEXT    'v12r'                  APEDSK99 version string (ARST)
  91  404A 3272  
  92            *
  93  404C 4056 SUB09   DATA    SUB10
  94  404E 5C04         DATA    PDSK
  95  4050 04           BYTE    >04
  96  4051 5044         TEXT    'PDSK'                  Protect DSKx (apply adhesive tab)
  96  4053 534B  
  97  4055 0000         EVEN
  98  4056 4060 SUB10   DATA    SUB11                   
  99  4058 5C0A         DATA    UDSK
 100  405A 04           BYTE    >04
 101  405B 5544         TEXT    'UDSK'                  Un-protect DSKx (remove adhesive tab)
 101  405D 534B  
 102  405F 0000         EVEN
 103  4060 406A SUB11   DATA    SUB12
 104  4062 5C10         DATA    LDSK
 105  4064 04           BYTE    >04
 106  4065 4C44         TEXT    'LDSK'                  List files on DSKx
 106  4067 534B  
 107  4069 0000         EVEN
 108  406A 4074 SUB12   DATA    SUB13
 109  406C 5C16         DATA    MDSK
 110  406E 04           BYTE    >04
 111  406F 4D44         TEXT    'MDSK'                  Map DOAD to DSKx
 111  4071 534B  
 112  4073 0000         EVEN
 113  4074 407E SUB13   DATA    SUB14
 114  4076 5C1C         DATA    NDSK
 115  4078 04           BYTE    >04
 116  4079 4E44         TEXT    'NDSK'                  reName mapped DSKx
 116  407B 534B  
 117  407D 0000         EVEN
 118  407E 4088 SUB14   DATA    SUB15
 119  4080 5C22         DATA    RDSK
 120  4082 04           BYTE    >04
 121  4083 5244         TEXT    'RDSK'                  Remove DOAD from SD card
 121  4085 534B  
 122  4087 0000         EVEN
 123  4088 4092 SUB15   DATA    SUB16
 124  408A 5C28         DATA    FGET
 125  408C 04           BYTE    >04
 126  408D 4647         TEXT    'FGET'                  Load DOAD from FTP server
 126  408F 4554  
 127  4091 0000         EVEN
 128  4092 409C SUB16   DATA    SUB17
 129  4094 5C2E         DATA    FPUT
 130  4096 04           BYTE    >04
 131  4097 4650         TEXT    'FPUT'                  Save DOAD to FTP server
 131  4099 5554  
 132  409B 0000         EVEN
 133  409C 40A6 SUB17   DATA    SUB18
 134  409E 5C34         DATA    ADSR
 135  40A0 04           BYTE    >04
 136  40A1 4144         TEXT    'ADSR'                  APEDSK99 DSR load / initialise / set default
 136  40A3 5352  
 137  40A5 0000         EVEN
 138  40A6 40B0 SUB18   DATA    SUB19
 139  40A8 5C3A         DATA    CDIR
 140  40AA 04           BYTE    >04
 141  40AB 4344         TEXT    'CDIR'                  Change working /Folder
 141  40AD 4952  
 142  40AF 0000         EVEN
 143  40B0 40BA SUB19   DATA    SUB20
 144  40B2 5C40         DATA    SMAP
 145  40B4 04           BYTE    >04
 146  40B5 534D         TEXT    'SMAP'                  Show DOAD mappings for DSK[1-3] + available working /Folders
 146  40B7 4150  
 147  40B9 0000         EVEN
 148  40BA 40C4 SUB20   DATA    SUB21
 149  40BC 5C46         DATA    LDIR
 150  40BE 04           BYTE    >04
 151  40BF 4C44         TEXT    'LDIR'                  List DOAD files on SD card
 151  40C1 4952  
 152  40C3 0000         EVEN
 153  40C4 40CE SUB21   DATA    SUB22
 154  40C6 5C4C         DATA    AHLP
 155  40C8 04           BYTE    >04
 156  40C9 4148         TEXT    'AHLP'                  APEDSK99 CALL help screen
 156  40CB 4C50  
 157  40CD 0000         EVEN
 158  40CE 40D8 SUB22   DATA    SUB23
 159  40D0 5C52         DATA    ACHR
 160  40D2 04           BYTE    >04
 161  40D3 4143         TEXT    'ACHR'                  Load real lower case characters
 161  40D5 4852  
 162  40D7 0000         EVEN
 163  40D8 40E2 SUB23   DATA    SUB24
 164  40DA 5C58         DATA    ARST
 165  40DC 04           BYTE    >04
 166  40DD 4152         TEXT    'ARST'                  APEDSK99 Reset
 166  40DF 5354  
 167  40E1 0000         EVEN
 168  40E2 0000 SUB24   DATA    >0000
 169  40E4 5C5E         DATA    TIME
 170  40E6 04           BYTE    >04
 171  40E7 5449         TEXT    'TIME'                  NTP date/time display / assign to NTP$
 171  40E9 4D45  
 172  40EB 0000         EVEN
 173            *
 174  40EC 0000 PWRUP   DATA    >0000                   power-up chain (no more)
 175  40EE 4118         DATA    EPWRUP                  address of power-up routine
 176  40F0 0000         DATA    >0000                   no name
 177            *                                       
 178  40F2 40FA DSR01   DATA    DSR02                   DSR chain
 179  40F4 4D26         DATA    EDSR01                  address of DSR
 180  40F6 03           BYTE    >03                     name size
 181  40F7 4453         TEXT    'DSK'                   DSR name
 181  40F9 4B    
 182  40FA 4104 DSR02   DATA    DSR03                   
 183  40FC 4D34         DATA    EDSR02                  
 184  40FE 04           BYTE    >04                     
 185  40FF 4453         TEXT    'DSK1'                  
 185  4101 4B31  
 186  4103 0000         EVEN                            
 187  4104 410E DSR03   DATA    DSR04                   
 188  4106 4D3A         DATA    EDSR03                  
 189  4108 04           BYTE    >04                     
 190  4109 4453         TEXT    'DSK2'                  
 190  410B 4B32  
 191  410D 0000         EVEN                            
 192  410E 0000 DSR04   DATA    >0000                   no more
 193  4110 4D40         DATA    EDSR04                  
 194  4112 04           BYTE    >04                     
 195  4113 4453         TEXT    'DSK3'                  
 195  4115 4B33  
 196  4117 0000         EVEN            
 197            *
 198            *=====================================
 199            * Power-up routine
 200            *=====================================                                          
 201            *
 202  4118 028C EPWRUP  CI      R12,>1000               Dhr. F.G. Kaal check: are we powering up 1st CRU (>1000) peripheral?
 202  411A 1000  
 203  411C 1633         JNE     NOCRU                   nope; return
 204            *
 205  411E C1CB         MOV     R11,R7                  yes; save return address
 206  4120 02A9         STWP    R9                      get workspace (should be >83E0)
 207  4122 0229         AI      R9,-224                 point to top of scratch-pad mem (>8300)
 207  4124 FF20  
 208  4126 C0A9         MOV     @>0070(R9),R2           highest free address in vdp mem (>8370)
 208  4128 0070  
 209  412A C002         MOV     R2,R0                   save it
 210  412C 0222         AI      R2,-2088                we'll need >828 bytes
 210  412E F7D8  
 211  4130 CA42         MOV     R2,@>0070(R9)           update address
 211  4132 0070  
 212  4134 0582         INC     R2
 213  4136 06A0         BL      @VDPWRI                 set VDP address
 213  4138 4310  
 214  413A 0201         LI      R1,2088                 
 214  413C 0828  
 215  413E 04EF H001    CLR     @-2(R15)                clear these >828 bytes
 215  4140 FFFE  
 216  4142 0601         DEC     R1                      
 217  4144 16FC         JNE     H001                    
 218  4146 06A0         BL      @VDPWRI                 set VDP address (same)
 218  4148 4310  
 219  414A 0203         LI      R3,>AA03                        
 219  414C AA03  
 220  414E DBC3         MOVB    R3,@-2(R15)             write buffer ID mark
 220  4150 FFFE  
 221  4152 1000         NOP                             
 222  4154 DBC0         MOVB    R0,@-2(R15)             write old highest free address
 222  4156 FFFE  
 223  4158 06C0         SWPB    R0
 224  415A DBC0         MOVB    R0,@-2(R15)
 224  415C FFFE  
 225  415E 1000         NOP                             
 226  4160 DBCC         MOVB    R12,@-2(R15)            write CRU address (>1000 for APEDSK99)
 226  4162 FFFE  
 227  4164 06C3         SWPB    R3                      
 228  4166 DBC3         MOVB    R3,@-2(R15)             write number of files (3)
 228  4168 FFFE  
 229  416A 06A0         BL      @PRPRTN                 preparation routine
 229  416C 4400  
 230  416E 06A0         BL      @CALSUB                 call subroutine
 230  4170 4332  
 231  4172 42A0         DATA    RSTDRV                  reset all drives
 232  4174 04E9         CLR     @>0054(R9)              name length = 0 for power-up
 232  4176 0054  
 233  4178 0429         BLWP    @>005A(R9)              retrieve R7 (saved by PRPRTN)
 233  417A 005A  
 234  417C 0011         DATA    >0011                   put it into R11
 235  417E CA60         MOV     @K001,@>006C(R9)        ???
 235  4180 4186  
 235  4182 006C  
 236  4184 045B NOCRU   B       *R11                    return
 237            *                               
 238  4186 0404 K001    DATA    >0404                   
 239            *
 240            *---------------------------------------
 241            * Sector read/write
 242            *---------------------------------------                                        
 243            *
 244  4188 DA60 SECRW1  MOVB    @K002,@>0050(R9)        APEDSK99: no error
 244  418A 432C  
 244  418C 0050  
 245  418E 06A0         BL      @SELDRV                 select drive
 245  4190 4272  
 246            *
 247  4192 C069         MOV     @>004A(R9),R1           sector #
 247  4194 004A  
 248  4196 0281         CI      R1,>05A0                APEDSK99: max 1440 (DS/DD/40T or DS/SD/80T)?
 248  4198 05A0  
 249  419A 1A03         JL      H002                    APEDSK99: yes; sector# within range
 250  419C 06A0         BL      @ERROR1                 APEDSK99: no -> "device error"
 250  419E 42CE  
 251  41A0 0600         DATA    >0600   
 252            
 253  41A2 C801 H002    MOV     R1,@WSECTR              APEDSK99: sector# to FD1771 write sector register (16bits)
 253  41A4 5FFC  
 254            *
 255  41A6 C0A9         MOV     @>004E(R9),R2           data buffer address
 255  41A8 004E  
 256  41AA D029         MOVB    @>004D(R9),R0           read or write ?
 256  41AC 004D  
 257  41AE 1312         JEQ     H005                    write
 258  41B0 06A0         BL      @VDPWRI                 read FD = write to VDP buffer
 258  41B2 4310  
 259  41B4 0206         LI      R6,256                  
 259  41B6 0100  
 260  41B8 C806         MOV     R6,@RDINT               APEDSK99: interrupt Arduino for read operation 
 260  41BA 5FEA  
 261  41BC 06A0         BL      @SNDCMD                 send command
 261  41BE 42E4  
 262  41C0 8800         DATA    >8800                   APEDSK99: read sector
 263            *
 264  41C2 D020 H003    MOVB    @RDATA,R0               get 1 byte from FDC
 264  41C4 5FF6  
 265  41C6 DBC0         MOVB    R0,@-2(R15)             save it to VDP
 265  41C8 FFFE  
 266  41CA 0620         DEC     @RDINT                  APEDSK99: interrupt Arduino for read operation
 266  41CC 5FEA  
 267  41CE 16F9         JNE     H003                    next byte
 268            *
 269  41D0 0460 H004    B       @RTURN1                 return
 269  41D2 4350  
 270            
 271            *       
 272  41D4 06A0 H005    BL      @VDPRD                  write to FD = read from VDP buffer
 272  41D6 431A  
 273  41D8 0206         LI      R6,256                  256 bytes to write
 273  41DA 0100  
 274            *
 275            * APEDSK99: the first byte to be written needs to be in the data register before the write command is given
 276            *
 277  41DC D02F         MOVB    @-1026(R15),R0          APEDSK99: get a byte from data buffer
 277  41DE FBFE  
 278  41E0 D800         MOVB    R0,@WDATA               APEDSK99: write first byte to data register
 278  41E2 5FFE  
 279  41E4 06A0         BL      @SNDCMD                 send command
 279  41E6 42E4  
 280  41E8 A800         DATA    >A800                   APEDSK99: write sector
 281            *
 282  41EA D02F H006    MOVB    @-1026(R15),R0          get a byte from data buffer
 282  41EC FBFE  
 283  41EE D800         MOVB    R0,@WDATA               pass it to data register
 283  41F0 5FFE  
 284  41F2 0606         DEC     R6                      
 285  41F4 16FA         JNE     H006                    next byte
 286            *
 287  41F6 06A0         BL      @WTCPT1                 APEDSK99: check for Write Protect
 287  41F8 4264  
 288  41FA 0A20         SLA     R0,2                    APEDSK99: WP bit in Carry
 289  41FC 1801         JOC     ERROR3                  write protect: error 34
 290  41FE 10E8         JMP     H004                    APEDSK99: no need to verify             
 291            *                                       
 292  4200 06A0 ERROR3  BL      @ERROR1                 error 34 (Write Protect)
 292  4202 42CE  
 293  4204 3400         DATA    >3400                   
 294            *
 295            *--------------------------------------------------------------------
 296            * Format disk - APEDSK99: we don't do any physical formatting anymore
 297            *--------------------------------------------------------------------
 298            *
 299  4206 04E9 FMTDSK  CLR     @>004A(R9)              called by subprogram >11
 299  4208 004A  
 300            *                                       
 301  420A 5A60         SZCB    @K004,@>004C(R9)        clear DSR version flags
 301  420C 432E  
 301  420E 004C  
 302            *
 303  4210 06A0         BL      @SELDRV                 select drive
 303  4212 4272  
 304            *
 305  4214 D029         MOVB    @>004D(R9),R0           APEDSK99: get # of tracks
 305  4216 004D  
 306  4218 9829         CB      @>0051(R9),@K005        APEDSK99: double sided?
 306  421A 0051  
 306  421C 432F  
 307  421E 1601         JNE     H007                    APEDSK99: single-side
 308            *
 309  4220 0A10         SLA     R0,1                    times two (since 2 sides)
 310            *
 311  4222 0980 H007    SRL     R0,8                    APEDSK99: make it a byte
 312  4224 0206         LI      R6,9                    APEDSK99: start with single density
 312  4226 0009  
 313  4228 9829         CB      @>0050(R9),@K005        APEDSK99: double density required?
 313  422A 0050  
 313  422C 432F  
 314  422E 1601         JNE     H008                    APEDSK99: no, leave R6 alone
 315  4230 0A16         SLA     R6,1                    APEDSK99: yes, R6*2
 316            *               
 317  4232 3806 H008    MPY     R6,R0                   APEDSK99: #sectors/track * #tracks
 318  4234 0281         CI      R1,>05A0                APEDSK99: >1440 sectors?
 318  4236 05A0  
 319  4238 1203         JLE     H009                    APEDSK99: nope; continue
 320  423A 06A0         BL      @ERROR1                 APEDSK99: yes; "device error"
 320  423C 42CE  
 321  423E 0600         DATA    >0600   
 322            *
 323  4240 CA41 H009    MOV     R1,@>004A(R9)           pass total # of sectors per disk
 323  4242 004A  
 324  4244 06C6         SWPB    R6
 325  4246 DA46         MOVB    R6,@>004D(R9)           APEDSK99: pass # of sectors per track
 325  4248 004D  
 326  424A DA60         MOVB    @K002,@>0050(R9)        no error
 326  424C 432C  
 326  424E 0050  
 327            *
 328  4250 06A0         BL      @NTPDT                  APEDSK99: update DOAD FAT time/date
 328  4252 5F2E  
 329            *
 330  4254 0460         B       @RTURN1                 return
 330  4256 4350  
 331            *                                       
 332                                                    
 333  4258 C1BB VDPRPW  MOV     *R11+,R6                VDP repeated write
 334  425A DBC0 H010    MOVB    R0,@-2(R15)
 334  425C FFFE  
 335  425E 0606         DEC     R6                      byte in R0
 336  4260 16FC         JNE     H010                    number of repeats in data word
 337  4262 045B         B       *R11                    
 338            *
 339  4264 D020 WTCPT1  MOVB    @RSTAT,R0               get status. APEDSK99: Not Ready >80 / Write Protect >40
 339  4266 5FF0  
 340  4268 1101         JLT     ERROR4                  drive not ready. APEDSK99: Not Ready set when DOAD file is unavailable
 341  426A 045B         B       *R11                    
 342            *
 343  426C 06A0 ERROR4  BL      @ERROR1                 exit with error code 6, reseting all drives
 343  426E 42CE  
 344  4270 0600         DATA    >0600                   
 345            *                                       
 346  4272 C1CB SELDRV  MOV     R11,R7                  select a drive
 347  4274 C0A9         MOV     @>0058(R9),R2
 347  4276 0058  
 348  4278 0222         AI      R2,-10                  point to drive info
 348  427A FFF6  
 349  427C 04C0         CLR     R0                      
 350  427E D029         MOVB    @>004C(R9),R0           get drive #
 350  4280 004C  
 351  4282 130B         JEQ     H011                    can't be >00: error #7
 352  4284 0280         CI      R0,>0300                        
 352  4286 0300  
 353  4288 1B08         JH      H011                    drive number can't be higher than 3: error #7
 354  428A 06A0         BL      @VDPWRI                 set VDP to write, address in R2
 354  428C 4310  
 355  428E DBC0         MOVB    R0,@-2(R15)             modify last drive accessed              
 355  4290 FFFE  
 356            *
 357  4292 0A10         SLA     R0,1                    APEDSK99: bit 0 is side select, 1-3 is drive #
 358  4294 D800         MOVB    R0,@CRUWRI              APEDSK99: select drive
 358  4296 5FEE  
 359  4298 0457         B       *R7                     
 360            *                                       
 361  429A 06A0 H011    BL      @ERROR1                 exit with error #7
 361  429C 42CE  
 362  429E 0700         DATA    >0700                   
 363            *                                       
 364  42A0 5820 RSTDRV  SZCB    @DSDRVS,@CRUWRI         APEDSK99: reset all drives including side
 364  42A2 4330  
 364  42A4 5FEE  
 365  42A6 D820         MOVB    @K013,@WCOMND           send Force Interrupt with no interrupt flag set
 365  42A8 42DE  
 365  42AA 5FF8  
 366  42AC C0A9         MOV     @>0058(R9),R2           ptr to VIB buffer
 366  42AE 0058  
 367  42B0 0222         AI      R2,-10                  now points to drive info buffer
 367  42B2 FFF6  
 368  42B4 06A0         BL      @VDPWRI                 set VDP to write to address in R2
 368  42B6 4310  
 369  42B8 0200         LI      R0,4                    
 369  42BA 0004  
 370  42BC DBC0 H012    MOVB    R0,@-2(R15)             write four >00 (i.e. clear drive info)
 370  42BE FFFE  
 371  42C0 0600         DEC     R0                      
 372  42C2 16FC         JNE     H012                    
 373  42C4 DA60         MOVB    @K002,@>0050(R9)        no error
 373  42C6 432C  
 373  42C8 0050  
 374  42CA 0460         B       @RTURN1                 get return address from stack
 374  42CC 4350  
 375            *                                       
 376  42CE C01B ERROR1  MOV     *R11,R0                 exit with error
 377  42D0 DA40         MOVB    R0,@>0050(R9)           place err code in >8350
 377  42D2 0050  
 378  42D4 0280         CI      R0,>0600                check if device error
 378  42D6 0600  
 379  42D8 1603         JNE     H013                    no: exit
 380  42DA 06A0         BL      @SNDCMD                 yes: reset drives
 380  42DC 42E4  
 381            *
 382  42DE 0000 K013    DATA    >0000                   APEDSK99: send Restore command
 383            *
 384  42E0 0460 H013    B       @RTURN1                 return to caller (address from stack)
 384  42E2 4350  
 385            *                               
 386  42E4 C03B SNDCMD  MOV     *R11+,R0                send command to FDC from data word
 387  42E6 D800         MOVB    R0,@WCOMND              send command
 387  42E8 5FF8  
 388  42EA 045B         B       *R11                    
 389            *                                       
 390  42EC 04C0 LASTRK  CLR     R0                      get last track # for this drive
 391  42EE D029         MOVB    @>004C(R9),R0           get drive #
 391  42F0 004C  
 392  42F2 130B         JEQ     H014                    can't be 0
 393  42F4 06C0         SWPB    R0                      
 394  42F6 0280         CI      R0,3                    
 394  42F8 0003  
 395  42FA 1B07         JH      H014                    can't be higher than 3
 396  42FC C0A9         MOV     @>0058(R9),R2                   
 396  42FE 0058  
 397  4300 0222         AI      R2,-10                  point to last drive accessed
 397  4302 FFF6  
 398  4304 A080         A       R0,R2                   point to last track for this drive
 399  4306 0460         B       @VDPRD                  prepare VDP to read from address in R2
 399  4308 431A  
 400            *                                       
 401  430A 06A0 H014    BL      @ERROR1                 exit with error code 7
 401  430C 42CE  
 402  430E 0700         DATA    >0700                   
 403            *                                       
 404  4310 0262 VDPWRI  ORI     R2,>4000                set VDP address to write
 404  4312 4000  
 405  4314 0242         ANDI    R2,>7FFF                not to a register
 405  4316 7FFF  
 406  4318 1002         JMP     H015                    
 407  431A 0242 VDPRD   ANDI    R2,>3FFF                set VDP address to read
 407  431C 3FFF  
 408  431E 06C2 H015    SWPB    R2                      
 409  4320 D7C2         MOVB    R2,*R15                 write address
 410  4322 06C2         SWPB    R2                      
 411  4324 D7C2         MOVB    R2,*R15                 
 412  4326 0242         ANDI    R2,>3FFF                        
 412  4328 3FFF  
 413  432A 045B         B       *R11                    
 414            *                                       
 415  432C 00   K002    BYTE    >00                     
 416  432D 09   K007    BYTE    >09                                             
 417  432E F0   K004    BYTE    >F0                     
 418  432F 02   K005    BYTE    2
 419  4330 0F   DSDRVS  BYTE    >0F                     APEDSK99: deselect all drives + side (reset CRUWRI bits 7,6,5 and 4)                    
 420            *
 421  4331 0000         EVEN
 422            *                               
 423  4332 0669 CALSUB  DECT    @>0066(R9)              call subroutine, return address in stack
 423  4334 0066  
 424  4336 C2A9         MOV     @>0066(R9),R10
 424  4338 0066  
 425  433A 0429         BLWP    @>005A(R9)              set VDP to write to address in R10
 425  433C 005A  
 426  433E 0143         DATA    >0143                   
 427  4340 C2BB         MOV     *R11+,R10               get next data word
 428  4342 06CB         SWPB    R11                     write return address to VDP
 429  4344 DBCB         MOVB    R11,@-2(R15)                    
 429  4346 FFFE  
 430  4348 06CB         SWPB    R11                     
 431  434A DBCB         MOVB    R11,@-2(R15)                    
 431  434C FFFE  
 432  434E 045A         B       *R10                    branch to address in data word
 433            *                               
 434  4350 C2E9 RTURN1  MOV     @>0066(R9),R11          get return address from VDP stack
 434  4352 0066  
 435  4354 0429         BLWP    @>005A(R9)              
 435  4356 005A  
 436  4358 0162         DATA    >0162                   set VDP to read from address in R11
 437  435A D2EF         MOVB    @-1026(R15),R11                 
 437  435C FBFE  
 438  435E 06CB         SWPB    R11                     
 439  4360 D2EF         MOVB    @-1026(R15),R11                 
 439  4362 FBFE  
 440  4364 05E9         INCT    @>0066(R9)                      
 440  4366 0066  
 441  4368 045B         B       *R11                    
 442            *
 443            *---------------------------------------
 444            * Custom routines, dealing with VDP memory
 445            * Format is >pppr where r is routine number (0-3)
 446            * and ppp contains parameters
 447            * The workspace it >8300. Called by BLWP @>005A(9).
 448            *---------------------------------------                                        
 449            *
 450  436A C28D ECUSTM  MOV     R13,R10                 save wregs ptr
 451  436C C23E         MOV     *R14+,R8                get next data word
 452  436E C248         MOV     R8,R9                   save it
 453  4370 0949         SRL     R9,4                    keep parameter
 454  4372 0248         ANDI    R8,3                    four possible operations
 454  4374 0003  
 455  4376 A208         A       R8,R8                   make it a word ptr
 456  4378 C2ED         MOV     @>001E(R13),R11         get old R15, i.e. VDP port (>8C02)
 456  437A 001E  
 457  437C C228         MOV     @VECRTN(R8),R8          get vector for operation
 457  437E 4382  
 458  4380 0458         B       *R8                     branch to it
 459            *                                       
 460  4382 438A VECRTN  DATA    SVRVDP                  save registers to VDP stack
 461  4384 43B6         DATA    RVRVDP                  retrieve registers
 462  4386 43EC         DATA    SVDPRD                  set VDP address to read
 463  4388 43E2         DATA    SVDPWR                  set VDP address to write
 464            *                                       
 465  438A 022A SVRVDP  AI      R10,22                  0: save registers in VDP mem
 465  438C 0016  
 466  438E 0919 H016    SRL     R9,1                    start with R12
 467  4390 1710         JNC     H017                    bits in >ppp tell which register to save (R0-R11)
 468  4392 064C         DECT    R12                     previous address in VDP stack (grows down)
 469  4394 C21A         MOV     *R10,R8                 get register contents
 470  4396 06CC         SWPB    R12                     set VDP address to write
 471  4398 D6CC         MOVB    R12,*R11                R12 is >8366: VDP stack ptr
 472  439A 06CC         SWPB    R12                     
 473  439C 026C         ORI     R12,>4000                       
 473  439E 4000  
 474  43A0 D6CC         MOVB    R12,*R11                        
 475  43A2 06C8         SWPB    R8                      save register to VDP mem
 476  43A4 DAC8         MOVB    R8,@-2(R11)                     
 476  43A6 FFFE  
 477  43A8 06C8         SWPB    R8                      
 478  43AA DAC8         MOVB    R8,@-2(R11)                     
 478  43AC FFFE  
 479  43AE C249         MOV     R9,R9                   more to come?
 480  43B0 1317         JEQ     H020                    no:return
 481  43B2 064A H017    DECT    R10                     point to previous register
 482  43B4 10EC         JMP     H016                    
 483            *                               
 484  43B6 0A49 RVRVDP  SLA     R9,4                    1: retrieve registers from VDP mem
 485  43B8 0A19 H018    SLA     R9,1                    each bit tells whether to load
 486  43BA 1710         JNC     H019                    don't retrieve that one
 487  43BC 06CC         SWPB    R12                     set VDP address to read
 488  43BE D6CC         MOVB    R12,*R11                R12 is >8366: VDP stack ptr
 489  43C0 06CC         SWPB    R12                     
 490  43C2 024C         ANDI    R12,>3FFF                       
 490  43C4 3FFF  
 491  43C6 D6CC         MOVB    R12,*R11                        
 492  43C8 1000         NOP                             
 493  43CA D22B         MOVB    @-1026(R11),R8          get a 2-byte value from VDP
 493  43CC FBFE  
 494  43CE 06C8         SWPB    R8                      
 495  43D0 D22B         MOVB    @-1026(R11),R8                  
 495  43D2 FBFE  
 496  43D4 C688         MOV     R8,*R10                 save it to register
 497  43D6 05CC         INCT    R12                     increment ptr (stack grows downwards)
 498  43D8 C249         MOV     R9,R9                   more to come?
 499  43DA 1302         JEQ     H020                    no: return
 500  43DC 05CA H019    INCT    R10                     next register
 501  43DE 10EC         JMP     H018                    
 502  43E0 0380 H020    RTWP                            
 503            *                                       
 504  43E2 A24D SVDPWR  A       R13,R9                  2: set VDP for a write
 505  43E4 C219         MOV     *R9,R8                  
 506  43E6 0268         ORI     R8,>4000                get address from reg in >..p2 (*2)
 506  43E8 4000  
 507  43EA 1004         JMP     H021                    
 508            *                                       
 509  43EC A24D SVDPRD  A       R13,R9                  3: set VDP for a read
 510  43EE C219         MOV     *R9,R8
 511  43F0 0248         ANDI    R8,>3FFF                get register from reg in >..p3 (*2)
 511  43F2 3FFF  
 512  43F4 06C8 H021    SWPB    R8                      set VDP address
 513  43F6 D6C8         MOVB    R8,*R11                 
 514  43F8 06C8         SWPB    R8                      
 515  43FA D6C8         MOVB    R8,*R11                 
 516  43FC 0380         RTWP                            
 517            *
 518            *---------------------------------------
 519            * Preparation subroutine
 520            * Sets up the 4 custom subroutines
 521            * Gets a few pointers to VDP buffers
 522            *  >8358: copy of VIB  >8366: VDP stack ptr (grows down from drive info)
 523            *  >8354: PAB          >8356: ptr to end-of-buffer
 524            *---------------------------------------                                        
 525            *
 526  43FE 05C7 PRPFDO  INCT    R7                      stop scanning upon return
 527  4400 C28B PRPRTN  MOV     R11,R10                 save return address
 528  4402 02A9         STWP    R9                      get workspace (should be >83E0)
 529  4404 0229         AI      R9,-224                 top of scratch/pad mem (>8300)
 529  4406 FF20  
 530  4408 0200         LI      R0,ECUSTM               entry to 4 custom routines
 530  440A 436A  
 531  440C CA40         MOV     R0,@>005C(R9)           put it in >835C
 531  440E 005C  
 532  4410 C009         MOV     R9,R0                   
 533  4412 0220         AI      R0,>004E                workspace for these four (>834E)
 533  4414 004E  
 534  4416 CA40         MOV     R0,@>005A(R9)           put it in >835A
 534  4418 005A  
 535            *                                       
 536  441A C229         MOV     @>0070(R9),R8           highest free address in VDP mem
 536  441C 0070  
 537  441E 05C8         INCT    R8                      point to end-of-buffer word
 538  4420 06A0         BL      @VDPR2B                 read 2 bytes from VDP address R8, into R0
 538  4422 4850  
 539  4424 C088         MOV     R8,R2                   save current R8
 540  4426 C200         MOV     R0,R8                   get end-of-buffer word
 541  4428 0228         AI      R8,-266                 yes: point to volume information block
 541  442A FEF6  
 542  442C CA48         MOV     R8,@>0058(R9)           save it in >8358
 542  442E 0058  
 543  4430 0228         AI      R8,-10                  point to disk drive info (drive #, last tracks)
 543  4432 FFF6  
 544  4434 CA48         MOV     R8,@>0066(R9)           save in >8366: VDP stack ptr (DECT before writing)
 544  4436 0066  
 545  4438 0429         BLWP    @>005A(R9)              save R7 (return address)
 545  443A 005A  
 546  443C 0100         DATA    >0100                   
 547  443E C1E9         MOV     @>0056(R9),R7           ptr to PAB: end of DSR name
 547  4440 0056  
 548  4442 C0C7         MOV     R7,R3                   save it
 549  4444 61E9         S       @>0054(R9),R7           start of DSR name
 549  4446 0054  
 550  4448 CA42         MOV     R2,@>0056(R9)           >8356: ptr to end-of-buffer word in VDP mem
 550  444A 0056  
 551  444C 0607         DEC     R7                      point to name length byte
 552  444E 04C2         CLR     R2                      
 553  4450 0429         BLWP    @>005A(R9)              set VDP to read from address in R2
 553  4452 005A  
 554  4454 00E2         DATA    >00E2                   
 555  4456 D0AF         MOVB    @-1026(R15),R2          get name length byte
 555  4458 FBFE  
 556  445A 06C2         SWPB    R2                      make it a word
 557  445C 60A9         S       @>0054(R9),R2           minus DSR name size: lenght of .parameters
 557  445E 0054  
 558  4460 0227         AI      R7,-9                   point to top of PAB
 558  4462 FFF7  
 559  4464 CA47         MOV     R7,@>0054(R9)           save it in >8354
 559  4466 0054  
 560  4468 045A         B       *R10                    
 561            *                               
 562  446A 06A0 CRFIL1  BL      @CALSUB                 create file
 562  446C 4332  
 563  446E 4ADC         DATA    FNDFDR                  find a FDR in disk
 564  4470 C104 CRFIL2  MOV     R4,R4                   found?
 565  4472 1604         JNE     CRFIL3                  no
 566  4474 06A0         BL      @CALSUB                 yes: delete old file
 566  4476 4332  
 567  4478 45B4         DATA    FFSVIB                  free file sector in VIB bitmap
 568  447A 1045         JMP     H024                    clear its FDR
 569            *                               
 570  447C 06A0 CRFIL3  BL      @INSFDR                 new file: insert a FDR in sector 1
 570  447E 47E4  
 571  4480 0701         SETO    R1                      
 572  4482 06A0         BL      @CALSUB                 call subroutine
 572  4484 4332  
 573  4486 4BD0         DATA    FFSBMP                  find a free sector in VIB bitmap
 574  4488 C000         MOV     R0,R0                   found?
 575  448A 1603         JNE     H022                    yes: # in R0
 576  448C 06A0         BL      @ERROR5                 no: update data, then return with error
 576  448E 494C  
 577  4490 8000         DATA    >8000                   memory full (APEDSK99: doubles as subcommand flag)
 578            *                               
 579  4492 0429 H022    BLWP    @>005A(R9)              set VDP to write
 579  4494 005A  
 580  4496 0103         DATA    >0103                   address in R8
 581  4498 DBC0         MOVB    R0,@-2(R15)             write sector # for FDR in sector 1
 581  449A FFFE  
 582  449C 06C0         SWPB    R0                      
 583  449E DBC0         MOVB    R0,@-2(R15)                     
 583  44A0 FFFE  
 584  44A2 06C0         SWPB    R0                      
 585  44A4 C069         MOV     @>0056(R9),R1           ptr to FDR in VDP buffers
 585  44A6 0056  
 586  44A8 0221         AI      R1,-4                   ptr to sector # for FDR
 586  44AA FFFC  
 587  44AC 0429         BLWP    @>005A(R9)              set VDP to write
 587  44AE 005A  
 588  44B0 0023         DATA    >0023                   address in R1
 589  44B2 DBC0         MOVB    R0,@-2(R15)             write sector # for FDR in VDP buffer
 589  44B4 FFFE  
 590  44B6 06C0         SWPB    R0                      
 591  44B8 DBC0         MOVB    R0,@-2(R15)                     
 591  44BA FFFE  
 592  44BC 0221         AI      R1,3                    ptr to drive #
 592  44BE 0003  
 593  44C0 0429         BLWP    @>005A(R9)              set VDP to write
 593  44C2 005A  
 594  44C4 0023         DATA    >0023                   address in R1
 595  44C6 DBC6         MOVB    R6,@-2(R15)             write drive # before FDR in VDP buffer
 595  44C8 FFFE  
 596  44CA 04C2         CLR     R2                      code for write
 597  44CC 0581         INC     R1                      
 598  44CE 06A0         BL      @CALSUB                 call subroutine
 598  44D0 4332  
 599  44D2 4A10         DATA    WRSEC1                  write sector 1
 600  44D4 C169         MOV     @>0058(R9),R5           ptr to VIB in VDP buffers
 600  44D6 0058  
 601  44D8 04C4         CLR     R4                      sector 0
 602  44DA 06A0         BL      @CALSUB                 call subroutine
 602  44DC 4332  
 603  44DE 4A28         DATA    RWSEC                   write VIB to sector 0
 604  44E0 C0C5         MOV     R5,R3                   copy filename from compare buffer to FDR
 605  44E2 0223         AI      R3,257                  ptr to file compare buffer
 605  44E4 0101  
 606  44E6 0202         LI      R2,10                   10 chars per filename
 606  44E8 000A  
 607  44EA 0429 H023    BLWP    @>005A(R9)              set VDP to read
 607  44EC 005A  
 608  44EE 0062         DATA    >0062                   address in R3
 609  44F0 D02F         MOVB    @-1026(R15),R0          get 1 char
 609  44F2 FBFE  
 610  44F4 0583         INC     R3                      increment source ptr
 611  44F6 0429         BLWP    @>005A(R9)              set VDP to write
 611  44F8 005A  
 612  44FA 0023         DATA    >0023                   address in R1
 613  44FC DBC0         MOVB    R0,@-2(R15)             copy 1 char
 613  44FE FFFE  
 614  4500 0581         INC     R1                      increment destination ptr
 615  4502 0602         DEC     R2                      # of chars in R2
 616  4504 16F2         JNE     H023                    next
 617            *
 618  4506 06A0 H024    BL      @NTPDT                  APEDSK99: update DOAD FAT time/date
 618  4508 5F2E  
 619            *
 620  450A C069         MOV     @>0056(R9),R1           FDR ptr
 620  450C 0056  
 621  450E 0221         AI      R1,10                   skip filename
 621  4510 000A  
 622  4512 0202         LI      R2,246                  remaining bytes in FDR
 622  4514 00F6  
 623  4516 0429         BLWP    @>005A(R9)              set VDP to write
 623  4518 005A  
 624  451A 0023         DATA    >0023                   address in R1
 625  451C DBC2 H025    MOVB    R2,@-2(R15)             write >00
 625  451E FFFE  
 626  4520 0602         DEC     R2                      clear remainder of new FDR
 627  4522 16FC         JNE     H025                    next byte
 628  4524 1010         JMP     H028                    write FDR to disk return to caller
 629            *                                       
 630  4526 C169 H026    MOV     @>0056(R9),R5           check if FDR must be updated
 630  4528 0056  
 631  452A 0429         BLWP    @>005A(R9)              set VDP to read
 631  452C 005A  
 632  452E 00A2         DATA    >00A2                   address in R5
 633  4530 D12F         MOVB    @-1026(R15),R4          get filename in file ctrl block
 633  4532 FBFE  
 634  4534 1101         JLT     H027                    flag: FDR was modified, update it
 635  4536 100A         JMP     H029                    
 636  4538 0244 H027    ANDI    R4,>7F00                clear flag bit
 636  453A 7F00  
 637  453C 0429         BLWP    @>005A(R9)              st VDP to write
 637  453E 005A  
 638  4540 00A3         DATA    >00A3                   address in R5
 639  4542 DBC4         MOVB    R4,@-2(R15)             write back filename without flag bit
 639  4544 FFFE  
 640  4546 04C2 H028    CLR     R2                      code for write
 641  4548 0460         B       @WRFDR                  write FDR to disk
 641  454A 4A1A  
 642  454C 0460 H029    B       @RTURN1                 return to caller
 642  454E 4350  
 643            *                               
 644  4550 06A0 UPDFDR  BL      @CALSUB                 update FDR + data
 644  4552 4332  
 645  4554 4570         DATA    UPDBF                   update data buffer if necessary
 646  4556 06A0         BL      @CALSUB                 call subroutine
 646  4558 4332  
 647  455A 4526         DATA    H026                    update FDR if necessary
 648  455C C169 CLRFBT  MOV     @>0056(R9),R5                   
 648  455E 0056  
 649  4560 04C6         CLR     R6                      
 650  4562 0429         BLWP    @>005A(R9)              set VDP to write
 650  4564 005A  
 651  4566 00A3         DATA    >00A3                   address in R5
 652  4568 DBC6         MOVB    R6,@-2(R15)             clr first byte of filename in FDR
 652  456A FFFE  
 653  456C 0460         B       @RWVIB                  
 653  456E 49AC  
 654            *                                       
 655  4570 C129 UPDBF   MOV     @>0056(R9),R4           check if data buffer must be updated
 655  4572 0056  
 656  4574 0604         DEC     R4                      
 657  4576 0429         BLWP    @>005A(R9)              set VDP to read
 657  4578 005A  
 658  457A 0082         DATA    >0082                   address in R4
 659  457C D06F         MOVB    @-1026(R15),R1          get drive #
 659  457E FBFE  
 660  4580 1101         JLT     H030                    flag: must be updated
 661  4582 1016         JMP     H031                    no need to update: return
 662  4584 0241 H030    ANDI    R1,>7F00                erase flag
 662  4586 7F00  
 663  4588 0429         BLWP    @>005A(R9)              set VDP to write
 663  458A 005A  
 664  458C 0083         DATA    >0083                   address in R4
 665  458E DBC1         MOVB    R1,@-2(R15)             write back drive # without flag
 665  4590 FFFE  
 666  4592 0224         AI      R4,-5                   point to current logical record offset
 666  4594 FFFB  
 667  4596 0429         BLWP    @>005A(R9)              set VDP to read
 667  4598 005A  
 668  459A 0082         DATA    >0082                   address in R4
 669  459C D0EF         MOVB    @-1026(R15),R3          get current logical record offset
 669  459E FBFE  
 670  45A0 06C3         SWPB    R3                      
 671  45A2 D0EF         MOVB    @-1026(R15),R3                  
 671  45A4 FBFE  
 672  45A6 06C3         SWPB    R3                      
 673  45A8 C1C4         MOV     R4,R7                   
 674  45AA 0227         AI      R7,262                  point to data buffer area
 674  45AC 0106  
 675  45AE 103A         JMP     WROFSC                  
 676  45B0 0460 H031    B       @RTURN1                 return to caller
 676  45B2 4350  
 677            *                               
 678  45B4 C0A9 FFSVIB  MOV     @>0056(R9),R2           free file sectors in VIB bitmap
 678  45B6 0056  
 679  45B8 0222         AI      R2,12                   
 679  45BA 000C  
 680  45BC 0429         BLWP    @>005A(R9)              set VDP to read
 680  45BE 005A  
 681  45C0 0042         DATA    >0042                   address in R2
 682  45C2 D02F         MOVB    @-1026(R15),R0          get file status byte from FDR
 682  45C4 FBFE  
 683  45C6 0240         ANDI    R0,>0800                write protected?
 683  45C8 0800  
 684  45CA 1303         JEQ     H032                    no
 685  45CC 06A0         BL      @ERROR5                 update data if needed, the return with error
 685  45CE 494C  
 686  45D0 2000         DATA    >2000                   write protected
 687            *                                       
 688  45D2 C229 H032    MOV     @>0056(R9),R8           get ptr to FDR
 688  45D4 0056  
 689  45D6 0228         AI      R8,28                   point to clusters list
 689  45D8 001C  
 690  45DA 0704         SETO    R4                      previous offset
 691  45DC 06A0 H033    BL      @DECDCI                 decode cluster info: sector in R1, offset in R2
 691  45DE 4B90  
 692  45E0 0228         AI      R8,3                    next cluster ptr
 692  45E2 0003  
 693  45E4 C041         MOV     R1,R1                   
 694  45E6 130C         JEQ     H034                    sector 0 = no more clusters
 695  45E8 C002         MOV     R2,R0                   total offset
 696  45EA 6084         S       R4,R2                   minus previous cluster offset = cluster size
 697  45EC C100         MOV     R0,R4                   new previous cluster offset
 698  45EE 06A0         BL      @CALSUB                 call subroutine
 698  45F0 4332  
 699  45F2 4C9C         DATA    FRSCB1                  free sectors in bitmap (from R1, # in R2)
 700  45F4 C048         MOV     R8,R1                   
 701  45F6 6069         S       @>0056(R9),R1                   
 701  45F8 0056  
 702  45FA 0281         CI      R1,>0100                end of FDR reached?
 702  45FC 0100  
 703  45FE 16EE         JNE     H033                    not yet
 704  4600 0460 H034    B       @RTURN1                 return to caller
 704  4602 4350  
 705            *                                       
 706  4604 06A0 RDOFSC  BL      @FDR2B1                 read a sector from offset in file
 706  4606 484A  
 707  4608 000E         DATA    14                      get # of sectors
 708  460A 80C0         C       R0,R3                   is desired sector in file?
 709  460C 1B03         JH      H035                    yes
 710  460E 06A0         BL      @ERROR5                 no: update data, then return with error
 710  4610 494C  
 711  4612 A000         DATA    >A000                   past end-of-file
 712  4614 06A0 H035    BL      @CALSUB                 call subroutine
 712  4616 4332  
 713  4618 4724         DATA    FSCTOF                  find sector from cluster list
 714  461A A101         A       R1,R4                   put sector in R4
 715  461C 0702         SETO    R2                      code for read
 716  461E C147 H036    MOV     R7,R5                   buffer ptr
 717  4620 0460         B       @RWSEC                  read/write sector
 717  4622 4A28  
 718            *                                       
 719  4624 0429 WROFSC  BLWP    @>005A(R9)              write sector to offset in file offset in R3
 719  4626 005A  
 720  4628 8100         DATA    >8100                   save R0 and R7
 721  462A 06A0         BL      @CALSUB                 call subroutine
 721  462C 4332  
 722  462E 463A         DATA    APSCTS                  append enough sectors to reach that offset
 723  4630 0429         BLWP    @>005A(R9)              retrieve R0 and R7
 723  4632 005A  
 724  4634 8101         DATA    >8101                   
 725  4636 04C2         CLR     R2                      code for write
 726  4638 10F2         JMP     H036                    write sector
 727            *                               
 728  463A 06A0 APSCTS  BL      @FDR2B1                 append sector(s) to a file to get offset in R3
 728  463C 484A  
 729  463E 000E         DATA    14                      get # of sect from FDR
 730            *                                       
 731  4640 80C0         C       R0,R3                   is desired sector in file?
 732  4642 1B47         JH      H045                    yes: find it and return
 733  4644 C000         MOV     R0,R0                   
 734  4646 1301         JEQ     H037                    empty file
 735  4648 0600         DEC     R0                      last sector #
 736  464A C143 H037    MOV     R3,R5                   save desired sector offset
 737  464C C0C0         MOV     R0,R3                   last sector in file
 738  464E 06A0         BL      @CALSUB                 call subroutine
 738  4650 4332  
 739  4652 4724         DATA    FSCTOF                  find sector # from offset in file
 740  4654 0429         BLWP    @>005A(R9)              save R1 (sector #)
 740  4656 005A  
 741  4658 4000         DATA    >4000                   
 742  465A A044         A       R4,R1                   # of last sector in cluster
 743  465C C105         MOV     R5,R4                   offset of desired sector
 744  465E 06A0 H038    BL      @CALSUB                 call subroutine
 744  4660 4332  
 745  4662 4BD0         DATA    FFSBMP                  find free sector in bitmap, starting from R1
 746  4664 C000         MOV     R0,R0                   found?
 747  4666 1604         JNE     H039                    yes: # in R0
 748  4668 C142         MOV     R2,R5                   no: save # of sectors
 749  466A 06A0         BL      @ADDSEC                 update FDR
 749  466C 46DE  
 750  466E 101B         JMP     H040                    return with memory full
 751            *                                       
 752  4670 C041 H039    MOV     R1,R1                   
 753  4672 1320         JEQ     H043                    empty cluster
 754  4674 0581         INC     R1                      one more sector in cluster
 755  4676 8040         C       R0,R1                   same as the one found in bitmap?
 756  4678 131C         JEQ     H042                    yes: just increase cluster size
 757  467A 0429         BLWP    @>005A(R9)              no: retrieve R1 (sector #)
 757  467C 005A  
 758  467E 4001         DATA    >4001                   
 759  4680 0429         BLWP    @>005A(R9)              save R0 + R2
 759  4682 005A  
 760  4684 A000         DATA    >A000                   
 761  4686 06A0         BL      @UPDCLI                 update current cluster info
 761  4688 4BAC  
 762  468A 0429         BLWP    @>005A(R9)              retrieve R0 + R2
 762  468C 005A  
 763  468E A001         DATA    >A001                   
 764  4690 0228         AI      R8,3                    ptr to next cluster info
 764  4692 0003  
 765  4694 C048         MOV     R8,R1                   
 766  4696 6069         S       @>0056(R9),R1           current FDR size
 766  4698 0056  
 767  469A 0281         CI      R1,>0100                room enough?
 767  469C 0100  
 768  469E 1605         JNE     H041                    yes
 769  46A0 06A0         BL      @CALSUB                 no: call subroutine
 769  46A2 4332  
 770  46A4 4C96         DATA    FFSBM                   free sector in bitmap
 771  46A6 0460 H040    B       @ERROR6                 return with memory full
 771  46A8 4B02  
 772            *                                       
 773  46AA C040 H041    MOV     R0,R1                   new sector #
 774  46AC 0429         BLWP    @>005A(R9)              save R1
 774  46AE 005A  
 775  46B0 4000         DATA    >4000                   
 776  46B2 1007 H042    JMP     H044                    make a new cluster
 777            *                                       
 778  46B4 0429 H043    BLWP    @>005A(R9)              retrieve R1
 778  46B6 005A  
 779  46B8 4001         DATA    >4001                   
 780  46BA 0429         BLWP    @>005A(R9)              save R0
 780  46BC 005A  
 781  46BE 8000         DATA    >8000                   
 782  46C0 0702         SETO    R2                      empty file: start from offset 0
 783  46C2 C040 H044    MOV     R0,R1                   sector #
 784  46C4 0582         INC     R2                      increment cluster size
 785  46C6 8102         C       R2,R4                   enough?
 786  46C8 16CA         JNE     H038                    no: get one more sector
 787  46CA C144         MOV     R4,R5                   
 788  46CC 06A0         BL      @ADDSEC                 add sector to FDR
 788  46CE 46DE  
 789  46D0 1004         JMP     H046                    done
 790            *                               
 791  46D2 06A0 H045    BL      @CALSUB                 call subroutine
 791  46D4 4332  
 792  46D6 4724         DATA    FSCTOF                  find a sector from offset in file
 793  46D8 A101         A       R1,R4                   last sector in cluster
 794  46DA 0460 H046    B       @RTURN1                 return to caller
 794  46DC 4350  
 795            *                                       
 796  46DE C28B ADDSEC  MOV     R11,R10                 add sector to FDR
 797  46E0 C101         MOV     R1,R4                   
 798  46E2 0429         BLWP    @>005A(R9)              retrieve R1
 798  46E4 005A  
 799  46E6 4001         DATA    >4001                   
 800  46E8 C041         MOV     R1,R1                   sector #
 801  46EA 131B         JEQ     H047                    none: return
 802  46EC 06A0         BL      @UPDCLI                 write info for R1 cluster
 802  46EE 4BAC  
 803  46F0 C0A9         MOV     @>0056(R9),R2           pointer to FDR
 803  46F2 0056  
 804  46F4 0429         BLWP    @>005A(R9)              set VDP to read
 804  46F6 005A  
 805  46F8 0042         DATA    >0042                   address in R2
 806  46FA D06F         MOVB    @-1026(R15),R1          first char of filename
 806  46FC FBFE  
 807  46FE 0261         ORI     R1,>8000                flag
 807  4700 8000  
 808  4702 0429         BLWP    @>005A(R9)              set VDP to write
 808  4704 005A  
 809  4706 0043         DATA    >0043                   address in R2
 810  4708 DBC1         MOVB    R1,@-2(R15)                     
 810  470A FFFE  
 811  470C 0222         AI      R2,14                   ptr to # of sectors
 811  470E 000E  
 812  4710 0585         INC     R5                      new # of sectors
 813  4712 0429         BLWP    @>005A(R9)              set VDP to write
 813  4714 005A  
 814  4716 0043         DATA    >0043                   address in R2
 815  4718 DBC5         MOVB    R5,@-2(R15)             update # of sectors
 815  471A FFFE  
 816  471C 06C5         SWPB    R5                      
 817  471E DBC5         MOVB    R5,@-2(R15)                     
 817  4720 FFFE  
 818  4722 045A H047    B       *R10                    
 819            *                                       
 820  4724 C229 FSCTOF  MOV     @>0056(R9),R8           find sector from offset in file
 820  4726 0056  
 821  4728 0228         AI      R8,28                   cluster list
 821  472A 001C  
 822  472C C103         MOV     R3,R4                   desired sector offset is in R3
 823  472E 06A0 H048    BL      @DECDCI                 decode info: sector in R1, offset in R2
 823  4730 4B90  
 824  4732 80C2         C       R2,R3                   reached yet?
 825  4734 1101         JLT     H049                    no
 826  4736 1006         JMP     H050                    yes: return
 827  4738 0228 H049    AI      R8,3                    point to next cluster info
 827  473A 0003  
 828  473C C103         MOV     R3,R4                   
 829  473E 6102         S       R2,R4                   
 830  4740 0604         DEC     R4                      size of the desired cluster (if it's the next)
 831  4742 10F5         JMP     H048                    keep trying
 832  4744 0460 H050    B       @RTURN1                 return to caller
 832  4746 4350  
 833            *
 834            *---------------------------------
 835            * Opcode 7: Delete
 836            * ----------------
 837            * PAB 0: >07
 838            *     1:            <--- error code
 839            *   2-3:
 840            *     4:
 841            *     5:
 842            *   6-7:
 843            *     8:
 844            *---------------------------------                                      
 845            *
 846  4748 06A0 DELETE  BL      @CALSUB                 delete file
 846  474A 4332  
 847  474C 4A7E         DATA    FFFDRV                  find file FDR in VDP buffers
 848  474E C104         MOV     R4,R4                   found?
 849  4750 1307         JEQ     H051                    yes
 850  4752 06A0         BL      @CALSUB                 no: call subroutine
 850  4754 4332  
 851  4756 4AE6         DATA    FFDRDK                  find FDR on disk
 852  4758 C104         MOV     R4,R4                   found?
 853  475A 1313         JEQ     H053                    yes
 854  475C 0460         B       @RTURN1                 no: return to caller
 854  475E 4350  
 855            *                                       
 856  4760 0581 H051    INC     R1                      FDR found, point to it
 857  4762 CA41         MOV     R1,@>0056(R9)           save it for other routines
 857  4764 0056  
 858  4766 06A0         BL      @CALSUB                 call subroutine
 858  4768 4332  
 859  476A 4A0E         DATA    RDSEC1                  read sector 1
 860  476C 06A0         BL      @FDR2B1                 read 2 bytes from VDP at >8356+offset
 860  476E 484A  
 861  4770 FFFC         DATA    -4                      i.e. get sector # of FRD in R0
 862  4772 C0C0         MOV     R0,R3                   save it for later
 863  4774 C205         MOV     R5,R8                   ptr to top of sector 1
 864  4776 06A0 H052    BL      @VDPR2B                 read 2 bytes from VDP at R8 into R0
 864  4778 4850  
 865  477A 05C8         INCT    R8                      next FDR ptr in sector 1
 866  477C 80C0         C       R0,R3                   is this the one we want?
 867  477E 16FB         JNE     H052                    not yet
 868  4780 0648         DECT    R8                      yes: point back to it
 869            *
 870  4782 06A0 H053    BL      @NTPDT                  APEDSK99: update DOAD FAT time/date
 870  4784 5F2E  
 871            *
 872  4786 0429         BLWP    @>005A(R9)              save R8
 872  4788 005A  
 873  478A 0080         DATA    >0080                   
 874  478C 06A0         BL      @CALSUB                 call subroutine
 874  478E 4332  
 875  4790 45B4         DATA    FFSVIB                  free file sectors in VIB bitmap
 876  4792 0429         BLWP    @>005A(R9)              retrieve R8
 876  4794 005A  
 877  4796 0081         DATA    >0081                   
 878  4798 06A0         BL      @RMFPTR                 remove FDR ptr from sector 1
 878  479A 47B4  
 879  479C 04C2         CLR     R2                      code for write
 880  479E 06A0         BL      @CALSUB                 call subroutine
 880  47A0 4332  
 881  47A2 4A10         DATA    WRSEC1                  write sector 1
 882  47A4 06A0         BL      @FDR2B1                 get 2 bytes from VDP at >8356+offset in R0
 882  47A6 484A  
 883  47A8 FFFC         DATA    -4                      i.e. sector # of FDR
 884  47AA 06A0         BL      @CALSUB                 call subroutine
 884  47AC 4332  
 885  47AE 4C96         DATA    FFSBM                   free sector in R0 in VIB bitmap
 886  47B0 0460         B       @CLRFBT                 clear 1rst byte of filename in VDP
 886  47B2 455C  
 887            *
 888            * Sector 1 contains an alphabetically sorted list of FDR pointers
 889            * Each pointer is 2 bytes long and contains the sector # of this FDR
 890            * The list must end with a >0000 mark. Thus there can be 127 files at most
 891            *
 892  47B4 C169 RMFPTR  MOV     @>0056(R9),R5           remove FDR ptr from sector 1
 892  47B6 0056  
 893  47B8 0225         AI      R5,256                  
 893  47BA 0100  
 894  47BC C0C5         MOV     R5,R3                   pointer to data buffer
 895  47BE 0223         AI      R3,256                  point to next ctrl block
 895  47C0 0100  
 896  47C2 C088         MOV     R8,R2                   shift up FDR list, erasing FDR pointed by R8
 897  47C4 05C2         INCT    R2                      point to next FDR ptr in sector 1
 898  47C6 0429 H054    BLWP    @>005A(R9)              set VDP to read
 898  47C8 005A  
 899  47CA 0042         DATA    >0042                   address in R2
 900  47CC D02F         MOVB    @-1026(R15),R0          get 1 byte
 900  47CE FBFE  
 901  47D0 0582         INC     R2                      inc source ptr
 902  47D2 0429         BLWP    @>005A(R9)              set VDP to write
 902  47D4 005A  
 903  47D6 0103         DATA    >0103                   address in R8
 904  47D8 DBC0         MOVB    R0,@-2(R15)             copy 1 byte
 904  47DA FFFE  
 905  47DC 0588         INC     R8                      inc dest pointer
 906  47DE 80C2         C       R2,R3                   done?
 907  47E0 16F2         JNE     H054                    not yet
 908  47E2 045B         B       *R11                    
 909            *                                       
 910  47E4 C28B INSFDR  MOV     R11,R10                 insert a FDR in sector 1
 911  47E6 C048         MOV     R8,R1                   
 912  47E8 06A0         BL      @FDR2B1                 get 2 bytes from VDP at >8356+offset
 912  47EA 484A  
 913  47EC 01FC         DATA    508                     i.e. last FDR slot in sector 1 (list ends with 0)
 914  47EE C000         MOV     R0,R0                   
 915  47F0 1302         JEQ     H055                    
 916  47F2 0460         B       @ERROR6                 memory full error
 916  47F4 4B02  
 917  47F6 0608 H055    DEC     R8                      previous byte
 918  47F8 0429         BLWP    @>005A(R9)              set VDP to read
 918  47FA 005A  
 919  47FC 0102         DATA    >0102                   address in R8
 920  47FE D02F         MOVB    @-1026(R15),R0          get 1 byte
 920  4800 FBFE  
 921  4802 05C8         INCT    R8                      
 922  4804 0429         BLWP    @>005A(R9)              set VDP to write
 922  4806 005A  
 923  4808 0103         DATA    >0103                   address in R8
 924  480A DBC0         MOVB    R0,@-2(R15)             copy byte two bytes further down
 924  480C FFFE  
 925  480E 0648         DECT    R8                      
 926  4810 8048         C       R8,R1                   done ?
 927  4812 16F1         JNE     H055                    not yet
 928  4814 045A         B       *R10                    
 929            *                               
 930  4816 C0A9 CMPFN   MOV     @>0058(R9),R2           compare filenames
 930  4818 0058  
 931  481A 0222         AI      R2,256                  
 931  481C 0100  
 932  481E 0429 H056    BLWP    @>005A(R9)              set VDP to read
 932  4820 005A  
 933  4822 0022         DATA    >0022                   address in R1 (ptr to filename)
 934  4824 D02F         MOVB    @-1026(R15),R0          get 1 char
 934  4826 FBFE  
 935  4828 0240         ANDI    R0,>7FFF                clear flag (on drive #)
 935  482A 7FFF  
 936  482C 0429         BLWP    @>005A(R9)              set VDP to read
 936  482E 005A  
 937  4830 0042         DATA    >0042                   address in R2 (filename compare buffer)
 938  4832 D0EF         MOVB    @-1026(R15),R3          get 1 char
 938  4834 FBFE  
 939  4836 90C0         CB      R0,R3                   compare chars
 940  4838 1604         JNE     H057                    mismatch
 941  483A 0581         INC     R1                      match: increment pointers
 942  483C 0582         INC     R2                      
 943  483E 0604         DEC     R4                      
 944  4840 16EE         JNE     H056                    next char
 945  4842 045B H057    B       *R11                    if complete match: ret with EQ set
 946            *                                       
 947  4844 C229 PABR2B  MOV     @>0054(R9),R8           get two bytes from PAB
 947  4846 0054  
 948  4848 1002         JMP     FDR2B2                  
 949            *                                       
 950  484A C229 FDR2B1  MOV     @>0056(R9),R8           get two bytes from FDR
 950  484C 0056  
 951  484E A23B FDR2B2  A       *R11+,R8                offset in data word
 952            *                                       
 953  4850 0429 VDPR2B  BLWP    @>005A(R9)              get two byte from VDP at R8
 953  4852 005A  
 954  4854 0102         DATA    >0102                   set VDP to read at R8
 955  4856 D02F         MOVB    @-1026(R15),R0          get two bytes of data
 955  4858 FBFE  
 956  485A 06C0         SWPB    R0                      
 957  485C D02F         MOVB    @-1026(R15),R0                  
 957  485E FBFE  
 958  4860 0B80         SRC     R0,8                    why not swpb ?
 959  4862 045B         B       *R11                    
 960            *                       
 961  4864 C069 FDSKDR  MOV     @>0058(R9),R1           find disk from name (ptr in R3)
 961  4866 0058  
 962  4868 0221         AI      R1,256                  
 962  486A 0100  
 963  486C 06A0         BL      @CPCKFN                 copy filename from VDP at R3 to compare buffer
 963  486E 48EE  
 964  4870 0429         BLWP    @>005A(R9)              save R2 + R3
 964  4872 005A  
 965  4874 3000         DATA    >3000                   
 966  4876 C000         MOV     R0,R0                   last char copied
 967  4878 1101         JLT     H058                    flagged
 968  487A 1005         JMP     H059                    
 969  487C C180 H058    MOV     R0,R6                   
 970  487E 0246         ANDI    R6,>0300                        
 970  4880 0300  
 971  4882 1337         JEQ     ERROR7                  return with file error
 972  4884 102F         JMP     H062                    return to caller
 973  4886 04C6 H059    CLR     R6                      don't read any drive
 974  4888 06A0         BL      @CALSUB                 call subroutine
 974  488A 4332  
 975  488C 49AC         DATA    RWVIB                   save current VIB
 976  488E 0226 H060    AI      R6,>0100                next drive
 976  4890 0100  
 977  4892 0707         SETO    R7                      error flags
 978  4894 0702         SETO    R2                      code for read
 979  4896 04C4         CLR     R4                      sector 0
 980  4898 06A0         BL      @CALSUB                 call subroutine
 980  489A 4332  
 981  489C 4A2A         DATA    RWSECA                  read sector 0
 982  489E C1C7         MOV     R7,R7                   ok?
 983  48A0 161D         JNE     H061                    no: try next drive
 984  48A2 0204         LI      R4,10                   yes: diskname size
 984  48A4 000A  
 985  48A6 C069         MOV     @>0058(R9),R1           VIB ptr
 985  48A8 0058  
 986  48AA 0429         BLWP    @>005A(R9)              save R1-R3
 986  48AC 005A  
 987  48AE 7000         DATA    >7000                   
 988  48B0 06A0         BL      @CMPFN                  compare names (ptr in R1 + compare buffer)
 988  48B2 4816  
 989  48B4 0429         BLWP    @>005A(R9)                      
 989  48B6 005A  
 990  48B8 7001         DATA    >7001                   retrieve R1-R3
 991  48BA C104         MOV     R4,R4                   name matched?
 992  48BC 160F         JNE     H061                    no: try next drive
 993  48BE C006         MOV     R6,R0                   drive #
 994  48C0 0260         ORI     R0,>8000                add update flag
 994  48C2 8000  
 995  48C4 0429         BLWP    @>005A(R9)              set VDP to write
 995  48C6 005A  
 996  48C8 0063         DATA    >0063                   address in R3
 997  48CA DBC0         MOVB    R0,@-2(R15)             copy drive+flag before diskname in source
 997  48CC FFFE  
 998  48CE 0605         DEC     R5                      before sector 0 copy
 999  48D0 0429         BLWP    @>005A(R9)              set VDP to write
 999  48D2 005A  
1000  48D4 00A3         DATA    >00A3                   address in R5
1001  48D6 DBC6         MOVB    R6,@-2(R15)             copy drive # before VIB
1001  48D8 FFFE  
1002  48DA 1004         JMP     H062                    done
1003            *                               
1004  48DC 0286 H061    CI      R6,>0300                did we do all drives?
1004  48DE 0300  
1005  48E0 16D6         JNE     H060                    no: try next on
1006  48E2 1007         JMP     ERROR7                  return with file error
1007            *                                       
1008  48E4 0429 H062    BLWP    @>005A(R9)              retrieve R2 + R3
1008  48E6 005A  
1009  48E8 3001         DATA    >3001                   
1010  48EA 0460         B       @RTURN1                 return to caller
1010  48EC 4350  
1011            *                               
1012  48EE 0602 CPCKFN  DEC     R2                      
1013  48F0 1B03         JH      H063                    
1014  48F2 06A0 ERROR7  BL      @RETERR                 return with error
1014  48F4 4978  
1015  48F6 E000         DATA    >E000                   file error
1016            *                                       
1017  48F8 0200 H063    LI      R0,>2000                copy (+check) filename in VDP from R3 to R1 (space)
1017  48FA 2000  
1018  48FC 0429         BLWP    @>005A(R9)              set VDP to write
1018  48FE 005A  
1019  4900 0023         DATA    >0023                   address in R1
1020  4902 0208         LI      R8,10                   10 chars per filename
1020  4904 000A  
1021  4906 DBC0 H064    MOVB    R0,@-2(R15)             fill filename with spaces
1021  4908 FFFE  
1022  490A 0608         DEC     R8                      
1023  490C 16FC         JNE     H064                    
1024  490E 0208         LI      R8,11                   11 chars countring drive #
1024  4910 000B  
1025  4912 0583 H065    INC     R3                      increment source ptr
1026  4914 0429         BLWP    @>005A(R9)              set VDP to read
1026  4916 005A  
1027  4918 0062         DATA    >0062                   address in R3
1028  491A D02F         MOVB    @-1026(R15),R0          get a char
1028  491C FBFE  
1029  491E 13E9         JEQ     ERROR7                  >00: return with file error
1030  4920 1110         JLT     H066                    flag bit set
1031  4922 0280         CI      R0,>2E00                        
1031  4924 2E00  
1032  4926 130D         JEQ     H066                    '.'
1033  4928 0608         DEC     R8                      
1034  492A 13E3         JEQ     ERROR7                  name to long: return with file error
1035  492C 0280         CI      R0,>2000                        
1035  492E 2000  
1036  4930 13E0         JEQ     ERROR7                  name can't contain spaces: file error again
1037  4932 0429         BLWP    @>005A(R9)              set VDP to write
1037  4934 005A  
1038  4936 0023         DATA    >0023                   address in R1
1039  4938 DBC0         MOVB    R0,@-2(R15)             copy 1 char
1039  493A FFFE  
1040  493C 0581         INC     R1                      increment destination pointer
1041  493E 0602         DEC     R2                      more?
1042  4940 16E8         JNE     H065                    yes
1043  4942 0288 H066    CI      R8,>000B                name can't be 0 chars long
1043  4944 000B  
1044  4946 13D5         JEQ     ERROR7                  else return with file error
1045  4948 045B         B       *R11                    
1046            *                                       
1047  494A AA00 K014    DATA    >AA00                   
1048            *                               
1049  494C C00B ERROR5  MOV     R11,R0                  update data, then error
1050  494E C0E9         MOV     @>0056(R9),R3           
1050  4950 0056  
1051  4952 0603         DEC     R3                      see what >8356 is pointing at
1052  4954 0429         BLWP    @>005A(R9)              set VDP to read
1052  4956 005A  
1053  4958 0062         DATA    >0062                   address in R3
1054  495A D0AF         MOVB    @-1026(R15),R2          get 1 byte
1054  495C FBFE  
1055  495E 9802         CB      R2,@K014                is it >AA (disk buffer area mark)
1055  4960 494A  
1056  4962 1309         JEQ     H067                    yes: announce error (code in data word)
1057  4964 0429         BLWP    @>005A(R9)              no: >8356 points to a FDR. Save R0
1057  4966 005A  
1058  4968 8000         DATA    >8000                   
1059  496A 06A0         BL      @CALSUB                 call subroutine
1059  496C 4332  
1060  496E 4550         DATA    UPDFDR                  update FRD and data buffer if needed
1061  4970 0429         BLWP    @>005A(R9)              retrieve R0
1061  4972 005A  
1062  4974 8001         DATA    >8001                   
1063  4976 C2C0 H067    MOV     R0,R11                  
1064            *                               
1065  4978 C069 RETERR  MOV     @>0054(R9),R1           annouce error
1065  497A 0054  
1066  497C 130D         JEQ     H068                    no PAB
1067  497E 0581         INC     R1                      for DSRs: ptr to status byte
1068  4980 0429         BLWP    @>005A(R9)              set VDP to read
1068  4982 005A  
1069  4984 0022         DATA    >0022                   address in R2
1070  4986 D0AF         MOVB    @-1026(R15),R2          get file status byte
1070  4988 FBFE  
1071  498A E0BB         SOC     *R11+,R2                add error code
1072  498C 0429         BLWP    @>005A(R9)              set VDP to write
1072  498E 005A  
1073  4990 0023         DATA    >0023                   address in R2
1074  4992 DBC2         MOVB    R2,@-2(R15)             write back status byte
1074  4994 FFFE  
1075  4996 1002         JMP     H069                    
1076  4998 CA7B H068    MOV     *R11+,@>0050(R9)        for subs: error code in >8350
1076  499A 0050  
1077  499C C229 H069    MOV     @>0058(R9),R8           get stack ptr
1077  499E 0058  
1078  49A0 0228         AI      R8,-12                  point back to initial caller
1078  49A2 FFF4  
1079  49A4 CA48         MOV     R8,@>0066(R9)           update pointer
1079  49A6 0066  
1080  49A8 0460         B       @RTURN1                 return to caller
1080  49AA 4350  
1081            *                               
1082  49AC 0429 RWVIB   BLWP    @>005A(R9)              read VIB (drive # in R6)
1082  49AE 005A  
1083  49B0 3000         DATA    >3000                   save R2 + R3
1084  49B2 C169         MOV     @>0058(R9),R5           pointer to VIB in ctrl block
1084  49B4 0058  
1085  49B6 0605         DEC     R5                      ptr to drive #
1086  49B8 0429         BLWP    @>005A(R9)              set VDP for read
1086  49BA 005A  
1087  49BC 00A2         DATA    >00A2                   address in R5
1088  49BE D0AF         MOVB    @-1026(R15),R2          get drive #
1088  49C0 FBFE  
1089  49C2 C0C2         MOV     R2,R3                   
1090  49C4 04C4         CLR     R4                      sector 0 for VIB
1091  49C6 0242         ANDI    R2,>0300                clear flag (>80 = update data)
1091  49C8 0300  
1092  49CA 9182         CB      R2,R6                   wanted drive?
1093  49CC 131A         JEQ     H073                    yes: return
1094  49CE C0C3         MOV     R3,R3                   no: shall we update VIB?
1095  49D0 1101         JLT     H070                    yes
1096  49D2 100A         JMP     H071                    no
1097  49D4 0429 H070    BLWP    @>005A(R9)              set VDP to write
1097  49D6 005A  
1098  49D8 00A3         DATA    >00A3                   address in R5
1099  49DA DBC4         MOVB    R4,@-2(R15)             clr drive #
1099  49DC FFFE  
1100  49DE 0585         INC     R5                      point back to VIB buffer
1101  49E0 06A0         BL      @CALSUB                 call subroutine
1101  49E2 4332  
1102  49E4 4A2C         DATA    RWSECB                  write sector 0 to old drive (in R2)
1103  49E6 0605         DEC     R5                      point to drive #
1104  49E8 0702 H071    SETO    R2                      flag for read
1105  49EA D086         MOVB    R6,R2                   APEDSK99: error in original disassembly (was R5)
1106  49EC 1305         JEQ     H072                    none
1107  49EE 0585         INC     R5                      point at VIB buffer
1108  49F0 06A0         BL      @CALSUB                 call subroutine
1108  49F2 4332  
1109  49F4 4A2A         DATA    RWSECA                  read sector (in R4) to buffer (in R5)
1110  49F6 0605         DEC     R5                      point at drive #
1111  49F8 0429 H072    BLWP    @>005A(R9)              set VDP to write
1111  49FA 005A  
1112  49FC 00A3         DATA    >00A3                   address in R5
1113  49FE DBC6         MOVB    R6,@-2(R15)             write drive # in control block, before FDR
1113  4A00 FFFE  
1114  4A02 0585 H073    INC     R5                      point back to FDR
1115  4A04 0429         BLWP    @>005A(R9)                      
1115  4A06 005A  
1116  4A08 3001         DATA    >3001                   retrieve R2 + R3 from stack
1117  4A0A 0460         B       @RTURN1                 branch to address on stack
1117  4A0C 4350  
1118            *                               
1119  4A0E 0702 RDSEC1  SETO    R2                      read sector 1
1120  4A10 0204 WRSEC1  LI      R4,1
1120  4A12 0001  
1121  4A14 0205         LI      R5,>0100                into data buffer area of current ctrl block
1121  4A16 0100  
1122  4A18 1005         JMP     RDFDR1                  
1123            *                               
1124  4A1A 06A0 WRFDR   BL      @FDR2B1                 read FDR
1124  4A1C 484A  
1125  4A1E FFFC         DATA    -4                      get sector # of FDR from control block
1126            *                               
1127  4A20 C100 RDFDR2  MOV     R0,R4                   sector read/write
1128  4A22 04C5         CLR     R5
1129  4A24 A169 RDFDR1  A       @>0056(R9),R5           point to FDR or data buffer
1129  4A26 0056  
1130  4A28 04C7 RWSEC   CLR     R7                      
1131  4A2A D086 RWSECA  MOVB    R6,R2                   add drive # for r/w flag
1132  4A2C 0429 RWSECB  BLWP    @>005A(R9)              save R0-R8
1132  4A2E 005A  
1133  4A30 FF80         DATA    >FF80                   
1134  4A32 CA44         MOV     R4,@>004A(R9)           sector #
1134  4A34 004A  
1135  4A36 CA42         MOV     R2,@>004C(R9)           drive | r/w flag
1135  4A38 004C  
1136  4A3A CA45         MOV     R5,@>004E(R9)           buffer ptr
1136  4A3C 004E  
1137  4A3E 06A0         BL      @CALSUB                 call subroutine
1137  4A40 4332  
1138  4A42 4188         DATA    SECRW1                  sector read/write
1139  4A44 0429         BLWP    @>005A(R9)              retrieve R0-R8
1139  4A46 005A  
1140  4A48 FF81         DATA    >FF81                   
1141  4A4A D1E9         MOVB    @>0050(R9),R7           get error code | flags
1141  4A4C 0050  
1142  4A4E 06C7         SWPB    R7                      
1143  4A50 1312         JEQ     H077                    
1144  4A52 C1C7         MOV     R7,R7                   
1145  4A54 1501         JGT     H074                    
1146  4A56 100B         JMP     H076                    
1147  4A58 0247 H074    ANDI    R7,>00FF                        
1147  4A5A 00FF  
1148  4A5C 0287         CI      R7,>0034                        
1148  4A5E 0034  
1149  4A60 1603         JNE     H075                    
1150  4A62 06A0         BL      @ERROR5                 
1150  4A64 494C  
1151  4A66 2000         DATA    >2000                   write protected
1152  4A68 06A0 H075    BL      @ERROR5                 
1152  4A6A 494C  
1153  4A6C C000         DATA    >C000                   device error
1154  4A6E DA69 H076    MOVB    @>004D(R9),@>004D(R9)   read or write?
1154  4A70 004D  
1154  4A72 004D  
1155  4A74 13F1         JEQ     H074                    write
1156  4A76 0247 H077    ANDI    R7,>00FF                        
1156  4A78 00FF  
1157  4A7A 0460         B       @RTURN1                 return to caller
1157  4A7C 4350  
1158            *                               
1159  4A7E C069 FFFDRV  MOV     @>0058(R9),R1           save filename in compare buffer and find its FDR
1159  4A80 0058  
1160  4A82 0221         AI      R1,256                  
1160  4A84 0100  
1161  4A86 0429         BLWP    @>005A(R9)              set VDP to write
1161  4A88 005A  
1162  4A8A 0023         DATA    >0023                   address in R1: filename compare buffer
1163  4A8C DBC6         MOVB    R6,@-2(R15)             write drive #
1163  4A8E FFFE  
1164  4A90 0581         INC     R1                      
1165  4A92 06A0         BL      @CPCKFN                 copy (+ check) filename from R3 to R1
1165  4A94 48EE  
1166  4A96 C082         MOV     R2,R2                   all chars copied (or was there a . or a >00
1167  4A98 1302         JEQ     FFDRVB                  
1168  4A9A 0460 H078    B       @ERROR7                 return with file error
1168  4A9C 48F2  
1169            *                                       
1170  4A9E C069 FFDRVB  MOV     @>0056(R9),R1           find filename in buffered FDRs
1170  4AA0 0056  
1171  4AA2 0221         AI      R1,3                    
1171  4AA4 0003  
1172  4AA6 0429         BLWP    @>005A(R9)              set VDP to read
1172  4AA8 005A  
1173  4AAA 0022         DATA    >0022                   address in R1
1174  4AAC D0AF         MOVB    @-1026(R15),R2          get # of files
1174  4AAE FBFE  
1175  4AB0 0982         SRL     R2,8                    make it a word
1176  4AB2 C0C2         MOV     R2,R3                   save it
1177  4AB4 0221         AI      R1,6                    ptr to drive #
1177  4AB6 0006  
1178  4AB8 0204 H079    LI      R4,11                   compare 11 bytes (drive + filename)
1178  4ABA 000B  
1179  4ABC 0429         BLWP    @>005A(R9)              save R1-R3
1179  4ABE 005A  
1180  4AC0 7000         DATA    >7000                   
1181  4AC2 06A0         BL      @CMPFN                  compare with name in compare buffer
1181  4AC4 4816  
1182  4AC6 0429         BLWP    @>005A(R9)              retrieve R1-R3
1182  4AC8 005A  
1183  4ACA 7001         DATA    >7001                   
1184  4ACC C104         MOV     R4,R4                   fully compared?
1185  4ACE 1304         JEQ     H080                    yes: done
1186  4AD0 0221         AI      R1,518                  move to next FDR in VDP mem
1186  4AD2 0206  
1187  4AD4 0602         DEC     R2                      
1188  4AD6 16F0         JNE     H079                    next file
1189  4AD8 0460 H080    B       @RTURN1                 return to caller (R4=0 if successfull)
1189  4ADA 4350  
1190            *                               
1191  4ADC 06A0 FNDFDR  BL      @CALSUB                 
1191  4ADE 4332  
1192  4AE0 4A7E         DATA    FFFDRV                  save name in comp buffer, find FDR in VDP buffers
1193            *                                       
1194  4AE2 C104 FFDROD  MOV     R4,R4                   find FDR on disk (from filename)
1195  4AE4 13DA         JEQ     H078                    file error
1196  4AE6 C169 FFDRDK  MOV     @>0056(R9),R5           ptr to top of disk buffer in VDP mem
1196  4AE8 0056  
1197  4AEA 0225         AI      R5,10                   ptr to drive # in first file control block
1197  4AEC 000A  
1198  4AEE 0429 H081    BLWP    @>005A(R9)              set VDP to read
1198  4AF0 005A  
1199  4AF2 00A2         DATA    >00A2                   address in R5
1200  4AF4 D0AF         MOVB    @-1026(R15),R2          get drive #
1200  4AF6 FBFE  
1201  4AF8 1307         JEQ     H082                    free control block found
1202  4AFA 0225         AI      R5,518                  ptr to file control block
1202  4AFC 0206  
1203  4AFE 0603         DEC     R3                      
1204  4B00 16F6         JNE     H081                    more files ?
1205  4B02 06A0 ERROR6  BL      @ERROR5                 no:
1205  4B04 494C  
1206  4B06 8000         DATA    >8000                   memory full
1207            *                               
1208  4B08 CA45 H082    MOV     R5,@>0056(R9)           save ptr to free ctrl block (drive #)
1208  4B0A 0056  
1209  4B0C 06A0         BL      @CALSUB                 call subroutine
1209  4B0E 4332  
1210  4B10 4A0E         DATA    RDSEC1                  read sector 1
1211  4B12 C229 FFDRFN  MOV     @>0056(R9),R8           entry point if sector 1 already read
1211  4B14 0056  
1212  4B16 0228         AI      R8,382                  point to middle of sector 1
1212  4B18 017E  
1213  4B1A 0202         LI      R2,64                   distance: start with 1/4 sector
1213  4B1C 0040  
1214  4B1E 0704 H083    SETO    R4                      
1215  4B20 06A0         BL      @VDPR2B                 read 2 bytes in R0 from VDP address in R8
1215  4B22 4850  
1216  4B24 C000         MOV     R0,R0                   
1217  4B26 132E         JEQ     H085                    no file here: move up
1218  4B28 0429         BLWP    @>005A(R9)              save R2
1218  4B2A 005A  
1219  4B2C 2000         DATA    >2000                   
1220  4B2E 0702         SETO    R2                      code for read
1221  4B30 06A0         BL      @CALSUB                 call subroutine
1221  4B32 4332  
1222  4B34 4A20         DATA    RDFDR2                  read FDR, sector # in R0
1223  4B36 C045         MOV     R5,R1                   RDFDR2 sets R5 as FDR ptr
1224  4B38 0225         AI      R5,-4                   point to sector # of FDR in ctrl block
1224  4B3A FFFC  
1225  4B3C 0429         BLWP    @>005A(R9)              set VDP to write
1225  4B3E 005A  
1226  4B40 00A3         DATA    >00A3                   address in R5
1227  4B42 DBC4         MOVB    R4,@-2(R15)             RDFDR2 puts sector # in R4
1227  4B44 FFFE  
1228  4B46 06C4         SWPB    R4                      copy it to ctrl block
1229  4B48 DBC4         MOVB    R4,@-2(R15)                     
1229  4B4A FFFE  
1230  4B4C C141         MOV     R1,R5                   FDR ptr
1231  4B4E 0601         DEC     R1                      now point to drive #
1232  4B50 0429         BLWP    @>005A(R9)              set VDP to write
1232  4B52 005A  
1233  4B54 0023         DATA    >0023                   address in R1
1234  4B56 DBC6         MOVB    R6,@-2(R15)             save drive #
1234  4B58 FFFE  
1235  4B5A 0204         LI      R4,11                   size to compare (drive # + filename)
1235  4B5C 000B  
1236  4B5E 06A0         BL      @CMPFN                  compare filenames
1236  4B60 4816  
1237  4B62 0429         BLWP    @>005A(R9)              retrieve R2
1237  4B64 005A  
1238  4B66 2001         DATA    >2001                   
1239  4B68 130B         JEQ     H084                    compared ok: return
1240  4B6A 0429         BLWP    @>005A(R9)              set VDP to write
1240  4B6C 005A  
1241  4B6E 00A3         DATA    >00A3                   address in R5
1242  4B70 DBC4         MOVB    R4,@-2(R15)             remaining chars to compare
1242  4B72 FFFE  
1243  4B74 80C0         C       R0,R3                   what kind of mismatch occured?
1244  4B76 1B06         JH      H085                    too far down the alphabet
1245  4B78 A202         A       R2,R8                   too far up: move half-way down
1246  4B7A C082         MOV     R2,R2                   
1247  4B7C 1606         JNE     H086                    then divide distance by 2
1248  4B7E 05C8         INCT    R8                      already checked: reset EQ
1249  4B80 0460 H084    B       @RTURN1                 return (from stack)
1249  4B82 4350  
1250            *                               
1251  4B84 6202 H085    S       R2,R8                   move half-way up
1252  4B86 C082         MOV     R2,R2                   
1253  4B88 13FB         JEQ     H084                    can't: already checked
1254  4B8A 0922 H086    SRL     R2,2                    divide distance by 2
1255  4B8C A082         A       R2,R2                   but keep it even
1256  4B8E 10C7         JMP     H083                    
1257            *
1258            * The cluster info list is located in the FDR, bytes >1C to >FF
1259            * A cluster info consists in 3 bytes, i.e 6 nibbles
1260            * 3 nibbles specify the beginning sector for that cluster, and
1261            * 3 nibbles specify the total file offset in sectors, including this cluster.
1262            * The nibbles are arranged as EG SB OF, to be combined as BEG OFS
1263            *
1264  4B90 C28B DECDCI  MOV     R11,R10                 decode cluster info
1265  4B92 06A0         BL      @VDPR2B                 read 2 bytes VDP at R8 in R0
1265  4B94 4850  
1266  4B96 06C0         SWPB    R0                      
1267  4B98 D0AF         MOVB    @-1026(R15),R2          get third byte from cluster list
1267  4B9A FBFE  
1268  4B9C C040         MOV     R0,R1                   
1269  4B9E 0241         ANDI    R1,>0FFF                start sector in R1
1269  4BA0 0FFF  
1270  4BA2 4001         SZC     R1,R0                   remove it from R0
1271  4BA4 0982         SRL     R2,8                    
1272  4BA6 E080         SOC     R0,R2                   combine offset nibbles
1273  4BA8 0BC2         SRC     R2,12                   offset in R2
1274  4BAA 045A         B       *R10                    
1275            *                               
1276  4BAC 0B42 UPDCLI  SRC     R2,4                    write info for 1 cluster
1277  4BAE C002         MOV     R2,R0                   
1278  4BB0 0240         ANDI    R0,>F000                sector in R1, offset in R2
1278  4BB2 F000  
1279  4BB4 E040         SOC     R0,R1                   copy nibble 3 of offset before nibble 1 of sector
1280  4BB6 0429         BLWP    @>005A(R9)              set VDP to write
1280  4BB8 005A  
1281  4BBA 0103         DATA    >0103                   address in R8
1282  4BBC 06C1         SWPB    R1                      write cluster info
1283  4BBE DBC1         MOVB    R1,@-2(R15)             as 3 bytes
1283  4BC0 FFFE  
1284  4BC2 06C1         SWPB    R1                      
1285  4BC4 DBC1         MOVB    R1,@-2(R15)                     
1285  4BC6 FFFE  
1286  4BC8 06C2         SWPB    R2                      
1287  4BCA DBC2         MOVB    R2,@-2(R15)                     
1287  4BCC FFFE  
1288  4BCE 045B         B       *R11                    
1289            *
1290            * The sector bitmap is located in the VIB (i.e. sector 0) at bytes >38 to >FF
1291            * In each byte a bit defines a sector, from right to left: "0"=free, "1"=used                                   
1292            *
1293  4BD0 0429 FFSBMP  BLWP    @>005A(R9)              find a free sector in bitmap
1293  4BD2 005A  
1294  4BD4 7800         DATA    >7800                   
1295  4BD6 06A0         BL      @CALSUB                 call subroutine
1295  4BD8 4332  
1296  4BDA 49AC         DATA    RWVIB                   load VIB for drive in R6
1297  4BDC C041         MOV     R1,R1                   first sector specified in R1 ?
1298  4BDE 1602         JNE     H087                    yes
1299  4BE0 0201         LI      R1,33                   no: start with sector 34
1299  4BE2 0021  
1300  4BE4 0581 H087    INC     R1                      
1301  4BE6 C001         MOV     R1,R0                   
1302  4BE8 0931         SRL     R1,3                    div by 8 since 8 sect/byte in bitmap
1303  4BEA 0202         LI      R2,>00FF                        
1303  4BEC 00FF  
1304  4BEE 0240         ANDI    R0,>0007                bit number in bitmap byte
1304  4BF0 0007  
1305  4BF2 1301         JEQ     H088                    
1306  4BF4 0A02         SLA     R2,0                    get that bit
1307  4BF6 C0C1 H088    MOV     R1,R3                   byte #
1308  4BF8 A0C5         A       R5,R3                   add VIB ptr
1309  4BFA 0223         AI      R3,56                   ptr to sector in bitmap
1309  4BFC 0038  
1310  4BFE 0281         CI      R1,>00C8                end of VIB?
1310  4C00 00C8  
1311  4C02 1101         JLT     H089                    no
1312  4C04 04C1         CLR     R1                      yes: top of bitmap
1313  4C06 A045 H089    A       R5,R1                   
1314  4C08 0221         AI      R1,56                   make another bitmap ptr
1314  4C0A 0038  
1315  4C0C 0429         BLWP    @>005A(R9)              set VDP to read
1315  4C0E 005A  
1316  4C10 0022         DATA    >0022                   address in R1
1317  4C12 0700 H090    SETO    R0                      
1318  4C14 D02F         MOVB    @-1026(R15),R0          get bitmap byte
1318  4C16 FBFE  
1319  4C18 C100         MOV     R0,R4                   save it
1320  4C1A E002         SOC     R2,R0                   mask previous sectors
1321  4C1C 04C2         CLR     R2                      
1322  4C1E 0580         INC     R0                      get 1 more sector
1323  4C20 1610         JNE     H092                    ok
1324  4C22 0581         INC     R1                      byte full: try next
1325  4C24 C001         MOV     R1,R0                   
1326  4C26 0220         AI      R0,-256                 won't change if byte # became >100
1326  4C28 FF00  
1327  4C2A 8140         C       R0,R5                   still in VIB?
1328  4C2C 1605         JNE     H091                    yes
1329  4C2E 0221         AI      R1,-200                 no: to top of bitmap
1329  4C30 FF38  
1330  4C32 0429         BLWP    @>005A(R9)              set VDP to read
1330  4C34 005A  
1331  4C36 0022         DATA    >0022                   address in R1
1332  4C38 80C1 H091    C       R1,R3                   are we back to where we started?
1333  4C3A 16EB         JNE     H090                    no: seach that byte for a free sector
1334  4C3C C004         MOV     R4,R0                   get original byte
1335  4C3E 0580         INC     R0                      try sectors just before ours (no mask this time)
1336  4C40 1325         JEQ     H095                    full: return with EQ
1337  4C42 0600 H092    DEC     R0                      restore original byte
1338  4C44 C080         MOV     R0,R2                   
1339  4C46 04C0         CLR     R0                      bit counter
1340  4C48 06C2         SWPB    R2                      
1341  4C4A 0580 H093    INC     R0                      increment bit count
1342  4C4C 0B12         SRC     R2,1                    find first 0 bit from the right
1343  4C4E 18FD         JOC     H093                    not yet
1344  4C50 0202         LI      R2,>0080                        
1344  4C52 0080  
1345  4C54 0A02         SLA     R2,0                    make a mask for that bit
1346  4C56 0600         DEC     R0                      bit # (0-7)
1347  4C58 E102         SOC     R2,R4                   mark sector as used in bitmap byte
1348  4C5A 0429         BLWP    @>005A(R9)              set VDP to write
1348  4C5C 005A  
1349  4C5E 0023         DATA    >0023                   address in R1
1350  4C60 DBC4         MOVB    R4,@-2(R15)             update bitmap
1350  4C62 FFFE  
1351  4C64 0221         AI      R1,-56                  
1351  4C66 FFC8  
1352  4C68 6045         S       R5,R1                   byte # in bitmap
1353  4C6A 0A31         SLA     R1,3                    times 8 (8 sect per byte)
1354  4C6C E040         SOC     R0,R1                   add bit #: = sector #
1355  4C6E C001         MOV     R1,R0                   save it
1356            *                               
1357  4C70 0605 H094    DEC     R5                      point to drive #
1358  4C72 0429         BLWP    @>005A(R9)              set VDP to read
1358  4C74 005A  
1359  4C76 00A2         DATA    >00A2                   address in R5
1360  4C78 D06F         MOVB    @-1026(R15),R1          get drive #
1360  4C7A FBFE  
1361  4C7C 0261         ORI     R1,>8000                add flag: update VIB
1361  4C7E 8000  
1362  4C80 0429         BLWP    @>005A(R9)              set VDP to write
1362  4C82 005A  
1363  4C84 00A3         DATA    >00A3                   address in R5
1364  4C86 DBC1         MOVB    R1,@-2(R15)             write back flagged drive #
1364  4C88 FFFE  
1365  4C8A 0585         INC     R5                      point to VIB (& return with NEQ)
1366  4C8C 0429 H095    BLWP    @>005A(R9)              retrieve R1-R4
1366  4C8E 005A  
1367  4C90 7801         DATA    >7801                   
1368  4C92 0460         B       @RTURN1                 return to caller
1368  4C94 4350  
1369            *                               
1370  4C96 C040 FFSBM   MOV     R0,R1                   free sector(s) in bitmap
1371  4C98 0202         LI      R2,1                    1 sector only
1371  4C9A 0001  
1372  4C9C 0429 FRSCB1  BLWP    @>005A(R9)              entry point if more than 1 sector
1372  4C9E 005A  
1373  4CA0 7800         DATA    >7800                   save R1-R4
1374  4CA2 06A0         BL      @CALSUB                 call subroutine
1374  4CA4 4332  
1375  4CA6 49AC         DATA    RWVIB                   load VIB for drive in R6
1376  4CA8 C001         MOV     R1,R0                   sector #
1377  4CAA 0240         ANDI    R0,>0007                bit in bitmap byte (8 per byte)
1377  4CAC 0007  
1378  4CAE 0931         SRL     R1,3                    byte in bitmap
1379  4CB0 A045         A       R5,R1                   add VIB buffer
1380  4CB2 0221         AI      R1,56                   add bitmap offset in VIB
1380  4CB4 0038  
1381  4CB6 C0C0         MOV     R0,R3                   
1382  4CB8 0500         NEG     R0                      
1383  4CBA 0220         AI      R0,8                    change 0-7 into 8-1
1383  4CBC 0008  
1384  4CBE 0204         LI      R4,>00FF                mask to erase
1384  4CC0 00FF  
1385  4CC2 8002         C       R2,R0                   how many to erase?
1386  4CC4 1101         JLT     H096                    less than in that byte
1387  4CC6 100A         JMP     H099                    
1388            *                               
1389  4CC8 0200 H096    LI      R0,8                    free sectors in first byte
1389  4CCA 0008  
1390  4CCC 6002         S       R2,R0                   
1391  4CCE 0B04         SRC     R4,0                    adjust mask
1392  4CD0 C003         MOV     R3,R0                   original bit # of starting sector
1393  4CD2 1301         JEQ     H097                    
1394  4CD4 0A04         SLA     R4,0                    don't erase before starting sector
1395  4CD6 1000 H097    JMP     H098                    
1396            *                               
1397  4CD8 06C4 H098    SWPB    R4                      
1398  4CDA 1019         JMP     H102                    goto erase last byte
1399            *                                       
1400  4CDC 0B04 H099    SRC     R4,0                    adjust mask
1401  4CDE 6080 H100    S       R0,R2                   that many will be freed
1402  4CE0 0429         BLWP    @>005A(R9)              set VDP to read
1402  4CE2 005A  
1403  4CE4 0022         DATA    >0022                   address in R1
1404  4CE6 D02F         MOVB    @-1026(R15),R0          get bitmap byte
1404  4CE8 FBFE  
1405  4CEA 4004         SZC     R4,R0                   mark sectors as free
1406  4CEC 0429         BLWP    @>005A(R9)              set VDP to write
1406  4CEE 005A  
1407  4CF0 0023         DATA    >0023                   address in R1
1408  4CF2 DBC0         MOVB    R0,@-2(R15)             write it back
1408  4CF4 FFFE  
1409  4CF6 0204         LI      R4,>FF00                clear full byte
1409  4CF8 FF00  
1410  4CFA 0581         INC     R1                      next byte
1411  4CFC 0200         LI      R0,8                    i.e. 8 sectors
1411  4CFE 0008  
1412  4D00 8002         C       R2,R0                   how many more sectors?
1413  4D02 1101         JLT     H101                    less than 8
1414  4D04 10EC         JMP     H100                    8 or more: next byte
1415            *                                       
1416  4D06 C002 H101    MOV     R2,R0                   remaining sectors
1417  4D08 0204         LI      R4,>00FF                        
1417  4D0A 00FF  
1418  4D0C 0A04         SLA     R4,0                    coin mask
1419  4D0E 0429 H102    BLWP    @>005A(R9)              set VDP to read
1419  4D10 005A  
1420  4D12 0022         DATA    >0022                   address in R1
1421  4D14 D02F         MOVB    @-1026(R15),R0          get bitmap byte
1421  4D16 FBFE  
1422  4D18 4004         SZC     R4,R0                   mark sectors as free
1423  4D1A 0429         BLWP    @>005A(R9)              set VDP to write
1423  4D1C 005A  
1424  4D1E 0023         DATA    >0023                   address in R1
1425  4D20 DBC0         MOVB    R0,@-2(R15)             write it back
1425  4D22 FFFE  
1426  4D24 10A5         JMP     H094                    done: flag drive # and return
1427            *
1428            *===================================
1429            * DSR entry points
1430            *===================================                                    
1431            *
1432  4D26 C1CB EDSR01  MOV     R11,R7                  DSK
1433  4D28 06A0         BL      @PRPFDO                 --- prepare file operations
1433  4D2A 43FE  
1434  4D2C 06A0         BL      @CALSUB                 call subroutine
1434  4D2E 4332  
1435  4D30 4864         DATA    FDSKDR                  find disk in drive (name ptr in R3)
1436  4D32 100B         JMP     H104                    
1437            *                                       
1438  4D34 0206 EDSR02  LI      R6,>0100                DSK1
1438  4D36 0100  
1439  4D38 1005         JMP     H103                    ----
1440            *                                       
1441  4D3A 0206 EDSR03  LI      R6,>0200                DSK2
1441  4D3C 0200  
1442  4D3E 1002         JMP     H103                    ----
1443            *                                       
1444  4D40 0206 EDSR04  LI      R6,>0300                DSK3
1444  4D42 0300  
1445            *                                       
1446  4D44 C1CB H103    MOV     R11,R7                  save return address
1447  4D46 06A0         BL      @PRPFDO                 prepare file operations
1447  4D48 43FE  
1448  4D4A C029 H104    MOV     @>0054(R9),R0           PAB ptr
1448  4D4C 0054  
1449  4D4E 0429         BLWP    @>005A(R9)              set VDP to read
1449  4D50 005A  
1450  4D52 0002         DATA    >0002                   address in R0
1451  4D54 D06F         MOVB    @-1026(R15),R1          get opcode
1451  4D56 FBFE  
1452  4D58 0981         SRL     R1,8                    
1453  4D5A 0281         CI      R1,>0009                check range
1453  4D5C 0009  
1454  4D5E 1B19         JH      ERROR8                  illegal opcode
1455  4D60 0282         CI      R2,>0001                filename lenght (including . )
1455  4D62 0001  
1456  4D64 1605         JNE     H105                    no filename: dir
1457  4D66 0221         AI      R1,10                   only allow open, close and read
1457  4D68 000A  
1458  4D6A 0281         CI      R1,>000C                        
1458  4D6C 000C  
1459  4D6E 1B11         JH      ERROR8                  others are illegal
1460  4D70 A041 H105    A       R1,R1                   make it a word ptr
1461  4D72 C061         MOV     @OPCVEC(R1),R1          get vector
1461  4D74 4D78  
1462  4D76 0451         B       *R1                     branch to it
1463            *                                       
1464  4D78 4D98 OPCVEC  DATA    OPEN                    open
1465  4D7A 4FAA         DATA    CLOSE                   close
1466  4D7C 4FB4         DATA    READ                    read
1467  4D7E 509E         DATA    WRITE                   write
1468  4D80 5352         DATA    RWIND1                  rewind
1469  4D82 53A6         DATA    LOAD                    load
1470  4D84 5448         DATA    SAVE                    save
1471  4D86 4748         DATA    DELETE                  delete
1472  4D88 4978         DATA    RETERR                  scratch record: return with bad attribute error
1473  4D8A 54CC         DATA    STATUS                  status
1474            *                                       
1475  4D8C 558C         DATA    OPNDIR                  open directory
1476  4D8E 55EA         DATA    CLSDIR                  close directory
1477  4D90 5600         DATA    RDDIR                   read directory
1478            *                                       
1479  4D92 06A0 ERROR8  BL      @ERROR5                 return with error
1479  4D94 494C  
1480  4D96 6000         DATA    >6000                   illegal opcode
1481            *
1482            *---------------------------------
1483            * Opcode 0: Open
1484            * --------------
1485            * PAB 0: >00
1486            *     1: file type  <--- error code
1487            *   2-3:
1488            *     4: record length
1489            *     5:
1490            *   6-7: # of records (if output)
1491            *     8:
1492            *---------------------------------                                      
1493            *
1494  4D98 04C0 OPEN    CLR     R0                      
1495  4D9A D02F         MOVB    @-1026(R15),R0          get file attributes
1495  4D9C FBFE  
1496  4D9E 0429         BLWP    @>005A(R9)                      
1496  4DA0 005A  
1497  4DA2 8000         DATA    >8000                   save R0
1498  4DA4 0240         ANDI    R0,>1600                keep fix/var and access mode
1498  4DA6 1600  
1499  4DA8 0280         CI      R0,>0600                        
1499  4DAA 0600  
1500  4DAC 1603         JNE     H106                    
1501  4DAE 06A0 ERROR9  BL      @ERROR5                 dis/fix, open as append: return with error
1501  4DB0 494C  
1502  4DB2 4000         DATA    >4000                   bad attribute
1503            *                                       
1504  4DB4 120A H106    JLE     H107                    
1505  4DB6 C040         MOV     R0,R1                   var
1506  4DB8 06A0         BL      @PABR2B                 get 2 bytes from PAB into R0
1506  4DBA 4844  
1507  4DBC 0004         DATA    4                       rec len and char count
1508  4DBE 0280         CI      R0,>FF00                is rec len 255?
1508  4DC0 FF00  
1509  4DC2 14F5         JHE     ERROR9                  yes: bad attribute
1510  4DC4 C001         MOV     R1,R0                   retrieve attributes
1511  4DC6 0240         ANDI    R0,>0600                keep only access mode
1511  4DC8 0600  
1512            *                                       
1513  4DCA 0280 H107    CI      R0,>0200                is it output?
1513  4DCC 0200  
1514  4DCE 1657         JNE     H113                    no
1515  4DD0 06A0         BL      @CALSUB                 call subroutine
1515  4DD2 4332  
1516  4DD4 446A         DATA    CRFIL1                  create file
1517  4DD6 06A0 H108    BL      @PRFDRS                 coin status byte in FDR style
1517  4DD8 4F58  
1518  4DDA 0429         BLWP    @>005A(R9)              set VDP to write
1518  4DDC 005A  
1519  4DDE 0083         DATA    >0083                   address in R4: status byte in FDR buffer
1520  4DE0 DBC2         MOVB    R2,@-2(R15)             write file status in FDR
1520  4DE2 FFFE  
1521  4DE4 C0E9         MOV     @>0054(R9),R3           PAB ptr
1521  4DE6 0054  
1522  4DE8 0223         AI      R3,4                    ptr to rec len
1522  4DEA 0004  
1523  4DEC 04C5         CLR     R5                      
1524  4DEE 0429         BLWP    @>005A(R9)              set VDP to read
1524  4DF0 005A  
1525  4DF2 0062         DATA    >0062                   address in R3
1526  4DF4 D16F         MOVB    @-1026(R15),R5          get record length
1526  4DF6 FBFE  
1527  4DF8 1607         JNE     H109                    
1528  4DFA 0205         LI      R5,>5000                >00: default it 80
1528  4DFC 5000  
1529  4DFE 0429         BLWP    @>005A(R9)              set VDP to write
1529  4E00 005A  
1530  4E02 0063         DATA    >0063                   address in R3
1531  4E04 DBC5         MOVB    R5,@-2(R15)             write default rec len
1531  4E06 FFFE  
1532  4E08 0224 H109    AI      R4,5                    point to rec len byte in FDR
1532  4E0A 0005  
1533  4E0C 0429         BLWP    @>005A(R9)              set VDP to write
1533  4E0E 005A  
1534  4E10 0083         DATA    >0083                   address in R4
1535  4E12 DBC5         MOVB    R5,@-2(R15)             write rec len in FDR buffer
1535  4E14 FFFE  
1536  4E16 0201         LI      R1,256                  256 bytes/sector
1536  4E18 0100  
1537  4E1A C082         MOV     R2,R2                   var or dis?
1538  4E1C 1101         JLT     H110                    var
1539  4E1E 1002         JMP     H111                    dis
1540  4E20 A141 H110    A       R1,R5                   var: rec len +1
1541  4E22 0601         DEC     R1                      254 bytes only (needs size byte)
1542  4E24 06C5 H111    SWPB    R5                      make it a word
1543  4E26 04C0         CLR     R0                      
1544  4E28 3C05         DIV     R5,R0                   how many times in 254/255 bytes?
1545  4E2A 0224         AI      R4,-4                   point to # of rec/sect in FDR
1545  4E2C FFFC  
1546  4E2E C040         MOV     R0,R1                   save result for later
1547  4E30 06C0         SWPB    R0                      
1548  4E32 0429         BLWP    @>005A(R9)              set VDP to write
1548  4E34 005A  
1549  4E36 0083         DATA    >0083                   address in R4
1550  4E38 DBC0         MOVB    R0,@-2(R15)             write # of rec/sect in FDR
1550  4E3A FFFE  
1551  4E3C C229         MOV     @>0056(R9),R8           point to filename in FDR
1551  4E3E 0056  
1552  4E40 0429         BLWP    @>005A(R9)              set VDP to read
1552  4E42 005A  
1553  4E44 0102         DATA    >0102                   address in R8
1554  4E46 D02F         MOVB    @-1026(R15),R0          get first char
1554  4E48 FBFE  
1555  4E4A 0260         ORI     R0,>8000                flag it: update FDR before leaving
1555  4E4C 8000  
1556  4E4E 0429         BLWP    @>005A(R9)              set VDP to write
1556  4E50 005A  
1557  4E52 0103         DATA    >0103                   address in R8
1558  4E54 DBC0         MOVB    R0,@-2(R15)             write it back
1558  4E56 FFFE  
1559  4E58 0429         BLWP    @>005A(R9)                      
1559  4E5A 005A  
1560  4E5C 8001         DATA    >8001                   retrieve R0 (access mode)
1561  4E5E 06A0         BL      @PABR2B                 get 2 bytes from PAB into R0
1561  4E60 4844  
1562  4E62 0006         DATA    6                       required size in records
1563  4E64 C100         MOV     R0,R4                   
1564  4E66 1309         JEQ     H112                    no size specified
1565  4E68 11A2         JLT     ERROR9                  return with bad attribute error
1566  4E6A A101         A       R1,R4                   round up to record size
1567  4E6C 0604         DEC     R4                      
1568  4E6E 04C3         CLR     R3                      
1569  4E70 3CC1         DIV     R1,R3                   how many sectors will this be?
1570  4E72 0603         DEC     R3                      offset start from 0
1571  4E74 06A0         BL      @CALSUB                 call subroutine
1571  4E76 4332  
1572  4E78 463A         DATA    APSCTS                  add sectors to FDR to match offset in R3
1573  4E7A 0460 H112    B       @RWIND2                 initialise file control block and return to caller
1573  4E7C 5380  
1574            *                                       
1575  4E7E 0429 H113    BLWP    @>005A(R9)              not output
1575  4E80 005A  
1576  4E82 8000         DATA    >8000                   save R0
1577  4E84 06A0         BL      @CALSUB                 call subroutine
1577  4E86 4332  
1578  4E88 4ADC         DATA    FNDFDR                  find FDR on disk
1579  4E8A 0429         BLWP    @>005A(R9)                      
1579  4E8C 005A  
1580  4E8E 8001         DATA    >8001                   retrieve R0 (access mode)
1581  4E90 C104         MOV     R4,R4                   found FDR?
1582  4E92 1309         JEQ     H115                    yes
1583  4E94 0280         CI      R0,>0400                no: is file open as input?
1583  4E96 0400  
1584  4E98 1304         JEQ     H114                    yes: must exist
1585  4E9A 06A0         BL      @CALSUB                 no: call subroutine
1585  4E9C 4332  
1586  4E9E 447C         DATA    CRFIL3                  create file
1587  4EA0 109A         JMP     H108                    
1588            *                                       
1589  4EA2 0460 H114    B       @ERROR9                 return with bad attribute error
1589  4EA4 4DAE  
1590            *                                       
1591  4EA6 C1C0 H115    MOV     R0,R7                   save access mode
1592  4EA8 06A0         BL      @PRFDRS                 prepare status byte for FDR
1592  4EAA 4F58  
1593  4EAC 0429         BLWP    @>005A(R9)              set VDP to read
1593  4EAE 005A  
1594  4EB0 0082         DATA    >0082                   address in R4 (status byte in FDR)
1595  4EB2 D02F         MOVB    @-1026(R15),R0          get current file status
1595  4EB4 FBFE  
1596  4EB6 C0C0         MOV     R0,R3                   save it
1597  4EB8 0243         ANDI    R3,>0800                is file write protected?
1597  4EBA 0800  
1598  4EBC 1306         JEQ     H116                    no
1599  4EBE 0287         CI      R7,>0400                yes: is it open as input?
1599  4EC0 0400  
1600  4EC2 1303         JEQ     H116                    no
1601  4EC4 06A0         BL      @ERROR5                 yes: return with error
1601  4EC6 494C  
1602  4EC8 2000         DATA    >2000                   write protected
1603            *                                       
1604  4ECA 0240 H116    ANDI    R0,>8300                keep only file type bits (V/F, D/I, Prg/Data)
1604  4ECC 8300  
1605  4ECE 2802         XOR     R2,R0                   compare with new (coined by PRFDRS)
1606  4ED0 16E8         JNE     H114                    different: bad attribute
1607  4ED2 C0E9         MOV     @>0054(R9),R3           PAB ptr
1607  4ED4 0054  
1608  4ED6 0223         AI      R3,4                    ptr to rec len in PAB
1608  4ED8 0004  
1609  4EDA 0224         AI      R4,5                    ptr to rec len in FDR
1609  4EDC 0005  
1610  4EDE 0429         BLWP    @>005A(R9)              set VDP to read
1610  4EE0 005A  
1611  4EE2 0082         DATA    >0082                   address in R4
1612  4EE4 D02F         MOVB    @-1026(R15),R0          get rec len from FDR
1612  4EE6 FBFE  
1613  4EE8 0429         BLWP    @>005A(R9)              set VDP to read
1613  4EEA 005A  
1614  4EEC 0062         DATA    >0062                   address in R3
1615  4EEE D0AF         MOVB    @-1026(R15),R2          get rec len from PAB
1615  4EF0 FBFE  
1616  4EF2 1302         JEQ     H117                    0 = keep current one
1617  4EF4 9080         CB      R0,R2                   are they identical?
1618  4EF6 16D5         JNE     H114                    no: bad attribute
1619  4EF8 0429 H117    BLWP    @>005A(R9)              set VDP to write
1619  4EFA 005A  
1620  4EFC 0063         DATA    >0063                   address in R3
1621  4EFE DBC0         MOVB    R0,@-2(R15)             update rec len in PAB (in case it was 0)
1621  4F00 FFFE  
1622  4F02 0429         BLWP    @>005A(R9)              retrieve R0 (open mode)
1622  4F04 005A  
1623  4F06 8001         DATA    >8001                   
1624  4F08 0240         ANDI    R0,>0600                keep only access mode
1624  4F0A 0600  
1625  4F0C 04C2         CLR     R2                      
1626  4F0E 0703         SETO    R3                      
1627  4F10 0280         CI      R0,>0600                is it append
1627  4F12 0600  
1628  4F14 161D         JNE     H118                    no
1629  4F16 C129         MOV     @>0056(R9),R4           yes: get FDR ptr
1629  4F18 0056  
1630  4F1A C1C4         MOV     R4,R7                   save it
1631  4F1C 0224         AI      R4,14                   ptr to # of sectors
1631  4F1E 000E  
1632  4F20 0429         BLWP    @>005A(R9)              set VDP to read
1632  4F22 005A  
1633  4F24 0082         DATA    >0082                   address in R4
1634  4F26 D0EF         MOVB    @-1026(R15),R3          get # of sectors in file
1634  4F28 FBFE  
1635  4F2A 06C3         SWPB    R3                      
1636  4F2C D0EF         MOVB    @-1026(R15),R3                  
1636  4F2E FBFE  
1637  4F30 06C3         SWPB    R3                      
1638  4F32 D0AF         MOVB    @-1026(R15),R2          get eof offset
1638  4F34 FBFE  
1639  4F36 0603         DEC     R3                      offset starts from 0
1640  4F38 110B         JLT     H118                    file is empty (0 sectors)
1641  4F3A 0429         BLWP    @>005A(R9)                      
1641  4F3C 005A  
1642  4F3E 3000         DATA    >3000                   save R2 + R3
1643  4F40 0227         AI      R7,256                  ptr to data buffer area for this file
1643  4F42 0100  
1644  4F44 06A0         BL      @CALSUB                 call subroutine
1644  4F46 4332  
1645  4F48 4604         DATA    RDOFSC                  read a sector, from offset in R3
1646  4F4A 0429         BLWP    @>005A(R9)                      
1646  4F4C 005A  
1647  4F4E 3001         DATA    >3001                   retrieve R2 + R3
1648  4F50 06A0 H118    BL      @UPDFCB                 update current record offset in file ctrl block
1648  4F52 4F82  
1649  4F54 0460         B       @RTURN1                 return to caller
1649  4F56 4350  
1650            *                                       
1651  4F58 0429 PRFDRS  BLWP    @>005A(R9)              prepare file status byte for FDR
1651  4F5A 005A  
1652  4F5C 8001         DATA    >8001                   access mode in R0
1653  4F5E 0429         BLWP    @>005A(R9)                      
1653  4F60 005A  
1654  4F62 8000         DATA    >8000                   save it back
1655  4F64 0202         LI      R2,2                    int in FDR status byte
1655  4F66 0002  
1656  4F68 C129         MOV     @>0056(R9),R4           FDR pointer
1656  4F6A 0056  
1657  4F6C 0A40         SLA     R0,4                    fix or var?
1658  4F6E 1703         JNC     H119                    fix
1659  4F70 0202         LI      R2,>0082                int var in FDR
1659  4F72 0082  
1660  4F74 C000         MOV     R0,R0                   dis or int?
1661  4F76 1101 H119    JLT     H120                    int
1662  4F78 0642         DECT    R2                      dis: remove the int from FDR status
1663  4F7A 0224 H120    AI      R4,12                   point at file status byte in FDR
1663  4F7C 000C  
1664  4F7E 06C2         SWPB    R2                      
1665  4F80 045B         B       *R11                    
1666            *                                       
1667  4F82 C129 UPDFCB  MOV     @>0056(R9),R4           update sect + rec offsets in file control block
1667  4F84 0056  
1668  4F86 0224         AI      R4,-6                   
1668  4F88 FFFA  
1669  4F8A 0429         BLWP    @>005A(R9)              set VDP to write
1669  4F8C 005A  
1670  4F8E 0083         DATA    >0083                   address in R4
1671  4F90 DBC3         MOVB    R3,@-2(R15)             write current sect offset
1671  4F92 FFFE  
1672  4F94 06C3         SWPB    R3                      
1673  4F96 DBC3         MOVB    R3,@-2(R15)                     
1673  4F98 FFFE  
1674  4F9A 0224         AI      R4,4                    point to logical rec offset (for var files)
1674  4F9C 0004  
1675  4F9E 0429         BLWP    @>005A(R9)              set VDP to write
1675  4FA0 005A  
1676  4FA2 0083         DATA    >0083                   address in R4
1677  4FA4 DBC2         MOVB    R2,@-2(R15)             write record offset
1677  4FA6 FFFE  
1678  4FA8 045B         B       *R11                    
1679            *
1680            *----------------------------------
1681            * Opcode 1: Close
1682            * --------------
1683            * PAB 0: >01
1684            *     1:           <--- error code
1685            *   2-3:
1686            *     4:
1687            *     5:
1688            *   6-7:
1689            *     8:
1690            *----------------------------------                                     
1691            *
1692  4FAA 06A0 CLOSE   BL      @CALSUB                 call subroutine
1692  4FAC 4332  
1693  4FAE 51A8         DATA    FFDRVP                  find file FDR
1694  4FB0 0460         B       @UPDFDR                 update FDR + data area, get VIB, return to caller
1694  4FB2 4550  
1695            *
1696            *----------------------------------
1697            * Opcode 2: Read
1698            * --------------
1699            * PAB 0: >02
1700            *     1: file type <--- error code
1701            *   2-3: data buffer address in VDP mem
1702            *     4:
1703            *     5: bytes read
1704            *   6-7: record #
1705            *     8:
1706            *
1707            * Logical records organisation whithin sectors
1708            *
1709            * Fixed records (e.g. rec length = 6)
1710            * 11 11 11 11 11 11 22 22 22 22 22 22 33 33 33 33 33 33 xx xx xx
1711            * Where 11=data for record 1, 22=record 2, 33=record 3, xx=junk bytes
1712            *
1713            * Variable records:
1714            * sz 11 11 11 11 11 11 11 sz 22 22 22 22 22 sz 33 33 FF xx xx xx
1715            * Where sz=record size, 11,22,33=record data, FF=end-of-sector mark, xx=junk
1716            *----------------------------------                                     
1717            *
1718  4FB4 06A0 READ    BL      @CALSUB                 call subroutine
1718  4FB6 4332  
1719  4FB8 51A8         DATA    FFDRVP                  find FDR in VDP buffers, get status from PAB
1720  4FBA 0240         ANDI    R0,>0200                what type of access?
1720  4FBC 0200  
1721  4FBE 1302         JEQ     H122                    update or input: ok
1722  4FC0 0460 H121    B       @ERROR8                 append or output: error illegal opcode
1722  4FC2 4D92  
1723  4FC4 06A0 H122    BL      @RFDRST                 get status byte in R0, from FDR
1723  4FC6 51D4  
1724  4FC8 110A         JLT     H125                    var
1725  4FCA 06A0         BL      @RRNPAB                 fix: get rec # compare to # of recs/file
1725  4FCC 51E8  
1726  4FCE 1A03         JL      H124                    ok: in file
1727  4FD0 06A0 H123    BL      @ERROR5                 update data and return with error
1727  4FD2 494C  
1728  4FD4 A000         DATA    >A000                   eof reached
1729  4FD6 06A0 H124    BL      @CALSUB                 call subroutine
1729  4FD8 4332  
1730  4FDA 524E         DATA    RRFDR                   load record from disk into FDR data buffer area
1731  4FDC 1011         JMP     H126                    
1732            *                                       
1733  4FDE 06A0 H125    BL      @CALSUB                 var: call subroutine
1733  4FE0 4332  
1734  4FE2 503A         DATA    RRSEC                   load proper sector, point to rec in it
1735  4FE4 10F5         JMP     H123                    skipped if ok: return with eof reached
1736            *                                       
1737  4FE6 0582         INC     R2                      next byte in data buffer
1738  4FE8 A004         A       R4,R0                   add rec size to offset
1739  4FEA 0580         INC     R0                      room for end-of-sector mark
1740  4FEC C169         MOV     @>0056(R9),R5           FDR ptr
1740  4FEE 0056  
1741  4FF0 0645         DECT    R5                      point to var record offset in sector
1742  4FF2 06C0         SWPB    R0                      
1743  4FF4 0429         BLWP    @>005A(R9)              set VDP to write
1743  4FF6 005A  
1744  4FF8 00A3         DATA    >00A3                   address in R5
1745  4FFA DBC0         MOVB    R0,@-2(R15)             update var record offset in sector
1745  4FFC FFFE  
1746  4FFE C004         MOV     R4,R0                   save # of bytes to be read
1747  5000 C129 H126    MOV     @>0054(R9),R4           PAB ptr
1747  5002 0054  
1748  5004 0224         AI      R4,5                    point to char count
1748  5006 0005  
1749  5008 06C0         SWPB    R0                      
1750  500A 0429         BLWP    @>005A(R9)              set VDP to write
1750  500C 005A  
1751  500E 0083         DATA    >0083                   address in R4
1752  5010 DBC0         MOVB    R0,@-2(R15)             write # of char to be read
1752  5012 FFFE  
1753  5014 06C0         SWPB    R0                      make it a word
1754            *                                       
1755  5016 C000 WFDRPB  MOV     R0,R0                   check it
1756  5018 130E         JEQ     H128                    none: return
1757  501A 0429 H127    BLWP    @>005A(R9)              set VDP to read
1757  501C 005A  
1758  501E 0042         DATA    >0042                   address in R2
1759  5020 D0EF         MOVB    @-1026(R15),R3          read 1 byte from FDR data buffer area
1759  5022 FBFE  
1760  5024 0582         INC     R2                      increment source ptr
1761  5026 0429         BLWP    @>005A(R9)              set VDP to write
1761  5028 005A  
1762  502A 0023         DATA    >0023                   address in R1
1763  502C DBC3         MOVB    R3,@-2(R15)             write the byte in PAB data buffer
1763  502E FFFE  
1764  5030 0581         INC     R1                      increment destination ptr
1765  5032 0600         DEC     R0                      more to read?
1766  5034 16F2         JNE     H127                    yes
1767  5036 0460 H128    B       @RTURN1                 return to caller
1767  5038 4350  
1768            *                                       
1769  503A 06A0 RRSEC   BL      @RCOFCB                 load sector, point to record in it
1769  503C 5328  
1770  503E C0C3         MOV     R3,R3                   sector offset
1771  5040 1101         JLT     H129                    -1: top of file
1772  5042 1012         JMP     H130                    in file
1773  5044 C003 H129    MOV     R3,R0                   
1774  5046 0580         INC     R0                      next sector
1775  5048 8080         C       R0,R2                   compare to # of sect/file
1776  504A 13F5         JEQ     H128                    end-of-file reached: return to caller (JMP to err)
1777  504C 06A0         BL      @CALSUB                 call subroutine
1777  504E 4332  
1778  5050 4570         DATA    UPDBF                   update data buffer, if needed
1779  5052 C0C0         MOV     R0,R3                   desired offset
1780  5054 04C5         CLR     R5                      
1781  5056 06A0         BL      @UCOFCB                 update sect + rec offsets in control block
1781  5058 52C6  
1782  505A 0227         AI      R7,256                  point to data buffer area (R7 set by UCOFCB)
1782  505C 0100  
1783  505E 06A0         BL      @CALSUB                 call subroutine
1783  5060 4332  
1784  5062 4604         DATA    RDOFSC                  read a sector, from offset in file (in R3)
1785  5064 04C0         CLR     R0                      
1786  5066 1004         JMP     H131                    
1787            *                                       
1788  5068 C000 H130    MOV     R0,R0                   in file: test var rec offset (from RCOFCB)
1789  506A 1602         JNE     H131                    inside sector
1790  506C 8080         C       R0,R2                   at beg of sector
1791  506E 13E3         JEQ     H128                    file is empty: return
1792  5070 C080 H131    MOV     R0,R2                   FDR data buffer will be added to R2 by AFDRPT
1793  5072 06A0         BL      @CALSUB                 call subroutine
1793  5074 4332  
1794  5076 52A2         DATA    AFDRPT                  R2=byte in FDR data buf, R1=top of PAB data buf
1795  5078 0429         BLWP    @>005A(R9)              set VDP to read
1795  507A 005A  
1796  507C 0042         DATA    >0042                   address in R2
1797  507E D12F         MOVB    @-1026(R15),R4          get first byte (rec length)
1797  5080 FBFE  
1798  5082 0984         SRL     R4,8                    make it a word
1799  5084 C000         MOV     R0,R0                   var rec offset
1800  5086 1306         JEQ     H132                    
1801  5088 0284         CI      R4,>00FF                is it >FF (end of sector mark) ?
1801  508A 00FF  
1802  508C 1603         JNE     H132                    no
1803  508E 06A0         BL      @RCOFCB                 yes: get sect + rec offsets from control block
1803  5090 5328  
1804  5092 10D8         JMP     H129                    try again with next sector
1805            *                                       
1806  5094 0429 H132    BLWP    @>005A(R9)                      
1806  5096 005A  
1807  5098 0011         DATA    >0011                   retrieve return address from stack in R11
1808  509A 05CB         INCT    R11                     skip the JMP to eof reached error
1809  509C 045B         B       *R11                    
1810            *
1811            *------------------------------------
1812            * Opcode 3: Write
1813            * --------------
1814            * PAB 0: >03
1815            *     1: file type <--- error code
1816            *   2-3: data buffer address in VDP mem
1817            *     4:
1818            *     5: bytes to write
1819            *   6-7: record #
1820            *     8:
1821            *------------------------------------                                   
1822            *
1823  509E 06A0 WRITE   BL      @CALSUB                 call subroutine
1823  50A0 4332  
1824  50A2 51A8         DATA    FFDRVP                  find FDR in VDP buffers
1825  50A4 0240         ANDI    R0,>0600                keep only access mode
1825  50A6 0600  
1826  50A8 0280         CI      R0,>0400                is it input
1826  50AA 0400  
1827  50AC 1389         JEQ     H121                    yes: return with error illegal opcode
1828  50AE 06A0         BL      @RFDRST                 get file status byte from FDR
1828  50B0 51D4  
1829  50B2 1113         JLT     H134                    var                     
1830  50B4 06A0         BL      @RRNPAB                 fix: get rec # from PAB, sect # in R0
1830  50B6 51E8  
1831  50B8 1A0C         JL      H133                    less that total rec/file
1832  50BA 0429         BLWP    @>005A(R9)              past eof: expand file
1832  50BC 005A  
1833  50BE D800         DATA    >D800                   save R0, R1, R3, R4
1834  50C0 C0C0         MOV     R0,R3                   desired sector offset
1835  50C2 06A0         BL      @CALSUB                 call subroutine
1835  50C4 4332  
1836  50C6 463A         DATA    APSCTS                  append enough sectors to reach offset in R3
1837  50C8 0429         BLWP    @>005A(R9)                      
1837  50CA 005A  
1838  50CC D801         DATA    >D801                   restore R0, R1, R3, R4
1839  50CE 06A0         BL      @URFFDR                 update # of rec/file in FDR
1839  50D0 52F2  
1840            *                                       
1841  50D2 06A0 H133    BL      @CALSUB                 in file: call subroutine
1841  50D4 4332  
1842  50D6 524E         DATA    RRFDR                   fetch rec from disk into FDR data buffer area
1843  50D8 1053         JMP     H138                    set update data flag, write data, return
1844            *                                       
1845  50DA 06A0 H134    BL      @RCOFCB                 var: R2=sect/file R3=sect offset R0=rec offset
1845  50DC 5328  
1846  50DE C0C3         MOV     R3,R3                   sector offset in file
1847  50E0 1101         JLT     H135                    -1: top of file
1848  50E2 100B         JMP     H136                    in file
1849  50E4 0429 H135    BLWP    @>005A(R9)              next sector loop
1849  50E6 005A  
1850  50E8 3000         DATA    >3000                   save R2 + R3
1851  50EA 06A0         BL      @CALSUB                 call subroutine
1851  50EC 4332  
1852  50EE 4570         DATA    UPDBF                   update data buffer if needed
1853  50F0 0429         BLWP    @>005A(R9)                      
1853  50F2 005A  
1854  50F4 3001         DATA    >3001                   retrieve R2 + R3
1855  50F6 0583         INC     R3                      next sector
1856  50F8 04C0         CLR     R0                      init char offset in sector
1857            *                                       
1858  50FA 8083 H136    C       R3,R2                   did we reach last sector?
1859  50FC 1609         JNE     H137                    no
1860  50FE 0429         BLWP    @>005A(R9)              yes: expand file
1860  5100 005A  
1861  5102 9000         DATA    >9000                   save R0 + R4
1862  5104 06A0         BL      @CALSUB                 call subroutine
1862  5106 4332  
1863  5108 463A         DATA    APSCTS                  get last sector then append sectors to reach R3
1864  510A 0429         BLWP    @>005A(R9)                      
1864  510C 005A  
1865  510E 9001         DATA    >9001                   retrieve R0 + R4
1866            *                                       
1867  5110 C169 H137    MOV     @>0054(R9),R5           PAB ptr
1867  5112 0054  
1868  5114 0225         AI      R5,5                    point to char count
1868  5116 0005  
1869  5118 0429         BLWP    @>005A(R9)              set VDP to read
1869  511A 005A  
1870  511C 00A2         DATA    >00A2                   address in R5
1871  511E D12F         MOVB    @-1026(R15),R4          get # of chars to write
1871  5120 FBFE  
1872  5122 0984         SRL     R4,8                    make it a word
1873  5124 C144         MOV     R4,R5                   
1874  5126 A140         A       R0,R5                   add current char offset in sector
1875  5128 0585         INC     R5                      make room for size byte
1876  512A 0285         CI      R5,>00FF                past end of sector?
1876  512C 00FF  
1877  512E 1BDA         JH      H135                    yes: not enough room, try next sector
1878  5130 0702         SETO    R2                      ok: rec will fit in sector
1879  5132 C069         MOV     @>0056(R9),R1           FDR ptr
1879  5134 0056  
1880  5136 A045         A       R5,R1                   past-last-byte offset
1881  5138 0221         AI      R1,256                  ptr to data buffer area
1881  513A 0100  
1882  513C 0429         BLWP    @>005A(R9)              set VDP to write
1882  513E 005A  
1883  5140 0023         DATA    >0023                   address in R1
1884  5142 DBC2         MOVB    R2,@-2(R15)             write end-of-sect mark to FDR data buffer area
1884  5144 FFFE  
1885  5146 0429         BLWP    @>005A(R9)                      
1885  5148 005A  
1886  514A 8000         DATA    >8000                   save R0 (current byte offset in sector)
1887  514C C003         MOV     R3,R0                   
1888  514E 06A0         BL      @UCOFCB                 update sect + rec offsets in control block
1888  5150 52C6  
1889  5152 0221         AI      R1,18                   point to eof offset in FDR (R1 modified by UCOFCB)
1889  5154 0012  
1890  5156 0429         BLWP    @>005A(R9)              set VDP to write
1890  5158 005A  
1891  515A 0023         DATA    >0023                   address in R1
1892  515C DBC5         MOVB    R5,@-2(R15)             update eof offset in last sector, in FDR
1892  515E FFFE  
1893  5160 06A0         BL      @URFFDR                 update # of rec/file in FDR
1893  5162 52F2  
1894  5164 0429         BLWP    @>005A(R9)                      
1894  5166 005A  
1895  5168 2001         DATA    >2001                   retrieve old R0 in R2 (current byte offset)
1896  516A C004         MOV     R4,R0                   record size
1897  516C 06A0         BL      @CALSUB                 call subroutine
1897  516E 4332  
1898  5170 52A2         DATA    AFDRPT                  get FDR data buffer in R2, PAB data buffer in R1
1899  5172 06C4         SWPB    R4                      
1900  5174 0429         BLWP    @>005A(R9)              set VDP to write
1900  5176 005A  
1901  5178 0043         DATA    >0043                   address in R2
1902  517A DBC4         MOVB    R4,@-2(R15)             write size byte to FDR data buffer
1902  517C FFFE  
1903  517E 0582         INC     R2                      increment dest pointer
1904            *                                       
1905  5180 C0C2 H138    MOV     R2,R3                   invert source and dest
1906  5182 C081         MOV     R1,R2                   so we can use the same read-write loop
1907  5184 C043         MOV     R3,R1                   than the read opcode
1908  5186 C129         MOV     @>0056(R9),R4           FDR ptr
1908  5188 0056  
1909  518A 0604         DEC     R4                      pointer to drive # for that file
1910  518C 0429         BLWP    @>005A(R9)              set VDP to read
1910  518E 005A  
1911  5190 0082         DATA    >0082                   address in R4
1912  5192 D16F         MOVB    @-1026(R15),R5          get drive #
1912  5194 FBFE  
1913  5196 0265         ORI     R5,>8000                add update data area flag
1913  5198 8000  
1914  519A 0429         BLWP    @>005A(R9)              set VDP to write
1914  519C 005A  
1915  519E 0083         DATA    >0083                   address in R4
1916  51A0 DBC5         MOVB    R5,@-2(R15)             write back flagged byte
1916  51A2 FFFE  
1917  51A4 0460         B       @WFDRPB                 to read-write loop
1917  51A6 5016  
1918            *                                       
1919  51A8 06A0 FFDRVP  BL      @CALSUB                 find FDR in VDP buffer
1919  51AA 4332  
1920  51AC 4A7E         DATA    FFFDRV                  find file FDR
1921  51AE C104         MOV     R4,R4                   found?
1922  51B0 1303         JEQ     AFPGPF                  yes
1923  51B2 06A0         BL      @ERROR5                 no: return with error
1923  51B4 494C  
1924  51B6 E000         DATA    >E000                   file error
1925  51B8 0581 AFPGPF  INC     R1                      point to filename in FDR
1926  51BA CA41         MOV     R1,@>0056(R9)           new FDR ptr
1926  51BC 0056  
1927  51BE C129         MOV     @>0054(R9),R4           get PAB ptr
1927  51C0 0054  
1928  51C2 0584         INC     R4                      point to status byte
1929  51C4 04C0         CLR     R0                      
1930  51C6 0429         BLWP    @>005A(R9)              set VDP to read
1930  51C8 005A  
1931  51CA 0082         DATA    >0082                   address in R4
1932  51CC D02F         MOVB    @-1026(R15),R0          get file status
1932  51CE FBFE  
1933  51D0 0460         B       @RTURN1                 return to caller
1933  51D2 4350  
1934            *                                       
1935  51D4 C129 RFDRST  MOV     @>0056(R9),R4           get status byte from FDR
1935  51D6 0056  
1936  51D8 0224         AI      R4,12                   point to status byte
1936  51DA 000C  
1937  51DC 0429         BLWP    @>005A(R9)              set VDP to read
1937  51DE 005A  
1938  51E0 0082         DATA    >0082                   address in R4
1939  51E2 D02F         MOVB    @-1026(R15),R0          read status byte
1939  51E4 FBFE  
1940  51E6 045B         B       *R11                    
1941            *                                       
1942  51E8 D16F RRNPAB  MOVB    @-1026(R15),R5          get record # from PAB, check if valid
1942  51EA FBFE  
1943  51EC 0985         SRL     R5,8                    
1944  51EE 1602         JNE     H139                    get # of rec/sector from FDR
1945  51F0 0205         LI      R5,256                  0: default to 256
1945  51F2 0100  
1946  51F4 C0E9 H139    MOV     @>0054(R9),R3           PAB ptr
1946  51F6 0054  
1947  51F8 0223         AI      R3,6                    point to rec #
1947  51FA 0006  
1948  51FC 0429         BLWP    @>005A(R9)              set VDP to read
1948  51FE 005A  
1949  5200 0062         DATA    >0062                   address in R3
1950  5202 D06F         MOVB    @-1026(R15),R1          get record # from PAB
1950  5204 FBFE  
1951  5206 06C1         SWPB    R1                      
1952  5208 D06F         MOVB    @-1026(R15),R1                  
1952  520A FBFE  
1953  520C 06C1         SWPB    R1                      
1954  520E C001         MOV     R1,R0                   save it
1955  5210 1101         JLT     H140                    too big
1956  5212 1003         JMP     H141                    ok
1957  5214 06A0 H140    BL      @ERROR5                 update data then return with error
1957  5216 494C  
1958  5218 8000         DATA    >8000                   memory full
1959  521A 0580 H141    INC     R0                      next record
1960  521C 0429         BLWP    @>005A(R9)              set VDP to write
1960  521E 005A  
1961  5220 0063         DATA    >0063                   address in R3
1962  5222 DBC0         MOVB    R0,@-2(R15)             write back # of future record
1962  5224 FFFE  
1963  5226 06C0         SWPB    R0                      
1964  5228 DBC0         MOVB    R0,@-2(R15)                     
1964  522A FFFE  
1965  522C 04C0         CLR     R0                      
1966  522E C0C1         MOV     R1,R3                   save # of desired rec
1967  5230 3C05         DIV     R5,R0                   divide by # of rec/sector = sect # in R0
1968  5232 C0A9 RNFISE  MOV     @>0056(R9),R2           FDR ptr
1968  5234 0056  
1969  5236 0222         AI      R2,18                   point to total # of rec (# of sectors for var)
1969  5238 0012  
1970  523A 0429         BLWP    @>005A(R9)              set VDP to read
1970  523C 005A  
1971  523E 0042         DATA    >0042                   address in R2
1972  5240 D0AF         MOVB    @-1026(R15),R2          get total # of recs/file (sect/file for var)
1972  5242 FBFE  
1973  5244 06C2         SWPB    R2                      
1974  5246 D0AF         MOVB    @-1026(R15),R2          remember: bytes are swapped
1974  5248 FBFE  
1975  524A 8083         C       R3,R2                   compare with desired record (ignored by var)
1976  524C 045B         B       *R11                    
1977            *                                       
1978  524E 0429 RRFDR   BLWP    @>005A(R9)              fetch record into FDR data buffer area
1978  5250 005A  
1979  5252 4000         DATA    >4000                   save R1
1980  5254 0224         AI      R4,-18                  ptr to top of control block
1980  5256 FFEE  
1981  5258 0429         BLWP    @>005A(R9)              set VDP to read
1981  525A 005A  
1982  525C 0082         DATA    >0082                   address in R4
1983  525E D16F         MOVB    @-1026(R15),R5          get current sector offset in file
1983  5260 FBFE  
1984  5262 06C5         SWPB    R5                      
1985  5264 D16F         MOVB    @-1026(R15),R5                  
1985  5266 FBFE  
1986  5268 0B85         SRC     R5,8                    
1987  526A 1105         JLT     H142                    -1: top of file
1988  526C 8005         C       R5,R0                   compare with desired offset (from RRNPAB)
1989  526E 130B         JEQ     H143                    same
1990  5270 06A0         BL      @CALSUB                 call subroutine
1990  5272 4332  
1991  5274 4570         DATA    UPDBF                   update data buffer if needed
1992  5276 C0C0 H142    MOV     R0,R3                   desired sector offset in file
1993  5278 06A0         BL      @UCOFCB                 update sect + rec offsets in control block
1993  527A 52C6  
1994  527C 0227         AI      R7,256                  point to data buffer area (R7 set by UCOFCB)
1994  527E 0100  
1995  5280 06A0         BL      @CALSUB                 call subroutine
1995  5282 4332  
1996  5284 4604         DATA    RDOFSC                  read a sector from offset in file (in R3)
1997  5286 0429 H143    BLWP    @>005A(R9)                      
1997  5288 005A  
1998  528A 4001         DATA    >4001                   retrieve R1
1999  528C C0E9         MOV     @>0056(R9),R3           FDR ptr
1999  528E 0056  
2000  5290 0223         AI      R3,17                   point to record length
2000  5292 0011  
2001  5294 0429         BLWP    @>005A(R9)              set VDP to read
2001  5296 005A  
2002  5298 0062         DATA    >0062                   address in R3
2003  529A D02F         MOVB    @-1026(R15),R0          get rec length in bytes
2003  529C FBFE  
2004  529E 0980         SRL     R0,8                    make it a word
2005  52A0 3840         MPY     R0,R1                   calc file offset in bytes
2006  52A2 A0A9 AFDRPT  A       @>0056(R9),R2           add FDR ptr
2006  52A4 0056  
2007  52A6 0222         AI      R2,256                  point inside data buffer area
2007  52A8 0100  
2008  52AA C0E9         MOV     @>0054(R9),R3           PAB ptr
2008  52AC 0054  
2009  52AE 05C3         INCT    R3                      point to data buffer address
2010  52B0 0429         BLWP    @>005A(R9)              set VDP to read
2010  52B2 005A  
2011  52B4 0062         DATA    >0062                   address in R3
2012  52B6 D06F         MOVB    @-1026(R15),R1          get PAB data buffer address
2012  52B8 FBFE  
2013  52BA 06C1         SWPB    R1                      
2014  52BC D06F         MOVB    @-1026(R15),R1                  
2014  52BE FBFE  
2015  52C0 06C1         SWPB    R1                      
2016  52C2 0460         B       @RTURN1                 return
2016  52C4 4350  
2017            *                               
2018  52C6 C1E9 UCOFCB  MOV     @>0056(R9),R7           update sect + rec offsets in control block
2018  52C8 0056  
2019  52CA C047         MOV     R7,R1                   FDR ptr
2020  52CC 0221         AI      R1,-6                   top of file control block
2020  52CE FFFA  
2021  52D0 0429         BLWP    @>005A(R9)              set VDP to write
2021  52D2 005A  
2022  52D4 0023         DATA    >0023                   address in R1
2023  52D6 DBC0         MOVB    R0,@-2(R15)             current sector offset in file
2023  52D8 FFFE  
2024  52DA 06C0         SWPB    R0                      
2025  52DC DBC0         MOVB    R0,@-2(R15)                     
2025  52DE FFFE  
2026  52E0 0221         AI      R1,4                    point to var rec offset in sector
2026  52E2 0004  
2027  52E4 06C5         SWPB    R5                      
2028  52E6 0429         BLWP    @>005A(R9)              set VDP to write
2028  52E8 005A  
2029  52EA 0023         DATA    >0023                   address in R1
2030  52EC DBC5         MOVB    R5,@-2(R15)             first free byte in current sector
2030  52EE FFFE  
2031  52F0 045B         B       *R11                    
2032            *                                       
2033  52F2 C0A9 URFFDR  MOV     @>0056(R9),R2           update # of rec/file in FDR
2033  52F4 0056  
2034  52F6 0429         BLWP    @>005A(R9)              set VDP to read
2034  52F8 005A  
2035  52FA 0042         DATA    >0042                   address in R2 (FDR ptr)
2036  52FC D2AF         MOVB    @-1026(R15),R10         get first char of filename
2036  52FE FBFE  
2037  5300 026A         ORI     R10,>8000               set was modified flag
2037  5302 8000  
2038  5304 0429         BLWP    @>005A(R9)              set VDP to write
2038  5306 005A  
2039  5308 0043         DATA    >0043                   address in R2
2040  530A DBCA         MOVB    R10,@-2(R15)            write flagged char back
2040  530C FFFE  
2041  530E 0222         AI      R2,18                   point to # of recs/file in FDR
2041  5310 0012  
2042  5312 0583         INC     R3                      one more
2043  5314 0429         BLWP    @>005A(R9)              set VDP to write
2043  5316 005A  
2044  5318 0043         DATA    >0043                   address in R2
2045  531A 06C3         SWPB    R3                      update # of recs/file
2046  531C DBC3         MOVB    R3,@-2(R15)                     
2046  531E FFFE  
2047  5320 06C3         SWPB    R3                      
2048  5322 DBC3         MOVB    R3,@-2(R15)                     
2048  5324 FFFE  
2049  5326 045B         B       *R11                    
2050            *                                       
2051  5328 C229 RCOFCB  MOV     @>0056(R9),R8           get rec offset, compare sect with total
2051  532A 0056  
2052  532C C108         MOV     R8,R4                   FDR ptr
2053  532E 0224         AI      R4,256                  point to data buffer area
2053  5330 0100  
2054  5332 0648         DECT    R8                      point to var record offset
2055  5334 0429         BLWP    @>005A(R9)              set VDP to read
2055  5336 005A  
2056  5338 0102         DATA    >0102                   address in R8
2057  533A D0AF         MOVB    @-1026(R15),R2          get var rec offset in current sector
2057  533C FBFE  
2058  533E 0982         SRL     R2,8                    make it a word
2059  5340 C28B         MOV     R11,R10                 save return point
2060  5342 06A0         BL      @FDR2B2                 get 2 bytes from FDR (at R8-4) into R0
2060  5344 484E  
2061  5346 FFFC         DATA    -4                      current sector offset in file
2062  5348 C0C0         MOV     R0,R3                   save it
2063  534A C2CA         MOV     R10,R11                 restore return point
2064  534C C002         MOV     R2,R0                   var record offset
2065  534E 0460         B       @RNFISE                 get # of sect/file from FDR, return
2065  5350 5232  
2066            *
2067            *------------------------------------
2068            * Opcode 4: Rewind
2069            * --------------
2070            * PAB 0: >04
2071            *     1: file type <--- error code
2072            *   2-3:
2073            *     4:
2074            *     5:
2075            *   6-7: record #  <--- >0000 if sequential
2076            *     8:
2077            *------------------------------------                                   
2078            *
2079  5352 06A0 RWIND1  BL      @CALSUB                 call subroutine
2079  5354 4332  
2080  5356 51A8         DATA    FFDRVP                  find FDR in VDP buffers, read status from PAB
2081  5358 0429         BLWP    @>005A(R9)                      
2081  535A 005A  
2082  535C 8000         DATA    >8000                   save R0 (status from PAB)
2083  535E 0240         ANDI    R0,>0600                keep only access mode
2083  5360 0600  
2084  5362 1305         JEQ     H144                    update is ok
2085  5364 0280         CI      R0,>0400                is it input?
2085  5366 0400  
2086  5368 1302         JEQ     H144                    yes: ok
2087  536A 0460         B       @ERROR8                 output or append: return with illegal opcode
2087  536C 4D92  
2088  536E 06A0 H144    BL      @CALSUB                 call subroutine
2088  5370 4332  
2089  5372 4570         DATA    UPDBF                   update data buffer if needed
2090  5374 0429         BLWP    @>005A(R9)                      
2090  5376 005A  
2091  5378 8001         DATA    >8001                   retrieve R0 (status from PAB)
2092  537A 0240         ANDI    R0,>0100                sequential or reloc?
2092  537C 0100  
2093  537E 1611         JNE     H145                    reloc: don't do anything, return
2094            *                                       
2095  5380 04C2 RWIND2  CLR     R2                      rewind file: record offset = 0
2096  5382 0703         SETO    R3                      current record = -1 (none)
2097  5384 06A0         BL      @UPDFCB                 update file control block
2097  5386 4F82  
2098  5388 04C0         CLR     R0                      record 0
2099  538A C229         MOV     @>0054(R9),R8           get PAB ptr
2099  538C 0054  
2100  538E 0228         AI      R8,6                    point to record #
2100  5390 0006  
2101  5392 0429         BLWP    @>005A(R9)              set VDP to write
2101  5394 005A  
2102  5396 0103         DATA    >0103                   address in R8
2103  5398 DBC0         MOVB    R0,@-2(R15)             write record #
2103  539A FFFE  
2104  539C 1000         NOP                             
2105  539E DBC0         MOVB    R0,@-2(R15)                     
2105  53A0 FFFE  
2106  53A2 0460 H145    B       @RTURN1                 return to caller
2106  53A4 4350  
2107            *
2108            *------------------------------------
2109            * Opcode 5: Load
2110            * --------------
2111            * PAB 0: >05
2112            *     1: file type  <--- error code
2113            *   2-3: data buffer address in VDP mem
2114            *     4:
2115            *     5:
2116            *   6-7: maximum # of bytes (size of buffer)
2117            *     8:
2118            *------------------------------------                                   
2119            *
2120  53A6 06A0 LOAD    BL      @CALSUB                 call subroutine
2120  53A8 4332  
2121  53AA 4ADC         DATA    FNDFDR                  find FDR on disk
2122  53AC C104         MOV     R4,R4                   found?
2123  53AE 1303         JEQ     H147                    yes
2124  53B0 06A0 H146    BL      @ERROR5                 no: return with error
2124  53B2 494C  
2125  53B4 E000         DATA    >E000                   file error
2126  53B6 06A0 H147    BL      @FDR2B1                 get 2 bytes from FDR into R0
2126  53B8 484A  
2127  53BA 000C         DATA    12                      file status byte
2128  53BC 0240         ANDI    R0,>0100                is it program?
2128  53BE 0100  
2129  53C0 13F7         JEQ     H146                    no: file error
2130  53C2 05C8         INCT    R8                      point to # of sect/file in FDR
2131  53C4 0429         BLWP    @>005A(R9)              set VDP to read
2131  53C6 005A  
2132  53C8 0102         DATA    >0102                   address in R8
2133  53CA D06F         MOVB    @-1026(R15),R1          get # of sectors in file
2133  53CC FBFE  
2134  53CE 06C1         SWPB    R1                      
2135  53D0 D06F         MOVB    @-1026(R15),R1                  
2135  53D2 FBFE  
2136  53D4 0B81         SRC     R1,8                    
2137  53D6 13EC         JEQ     H146                    0=empty file: return with file error
2138  53D8 06A0         BL      @RBANB                  get data buffer address in R7, # of sectors in R2
2138  53DA 5498  
2139  53DC 05C8         INCT    R8                      point to eof offset in FDR
2140  53DE 04C4         CLR     R4                      
2141  53E0 0429         BLWP    @>005A(R9)              set VDP to read
2141  53E2 005A  
2142  53E4 0102         DATA    >0102                   address in R8
2143  53E6 D12F         MOVB    @-1026(R15),R4          get # of bytes in last sector
2143  53E8 FBFE  
2144  53EA 8081         C       R1,R2                   compare # of sect with max in PAB
2145  53EC 1BE1         JH      H146                    file is too big: return with file error
2146  53EE 1602         JNE     H148                    file is smaller
2147  53F0 8100         C       R0,R4                   same # of sect: check bytes in last sector
2148  53F2 1ADE         JL      H146                    file is too big: file error
2149  53F4 04C3 H148    CLR     R3                      sector offset in file
2150  53F6 06C4         SWPB    R4                      
2151  53F8 0601 H149    DEC     R1                      next sector
2152  53FA 130D         JEQ     H150                    done
2153  53FC 0429         BLWP    @>005A(R9)                      
2153  53FE 005A  
2154  5400 D900         DATA    >D900                   save R0, R1, R3, R4, R7
2155  5402 06A0         BL      @CALSUB                 call subroutine
2155  5404 4332  
2156  5406 4604         DATA    RDOFSC                  read a sector from offset in R3
2157  5408 0429         BLWP    @>005A(R9)              restore R0, R1, R3, R4, R7
2157  540A 005A  
2158  540C D901         DATA    >D901                   
2159  540E 0583         INC     R3                      next sector
2160  5410 0227         AI      R7,256                  256 bytes further in PAB buffer
2160  5412 0100  
2161  5414 10F1         JMP     H149                    keep going
2162            *                                       
2163  5416 C104 H150    MOV     R4,R4                   
2164  5418 1604         JNE     H151                    
2165  541A 06A0         BL      @CALSUB                 call subroutine
2165  541C 4332  
2166  541E 4604         DATA    RDOFSC                  read a sector from offset in R3
2167  5420 1011         JMP     H152                    done
2168            *                                       
2169  5422 C147 H151    MOV     R7,R5                   save PAB data buffer ptr
2170  5424 C1E9         MOV     @>0056(R9),R7           FDR ptr
2170  5426 0056  
2171  5428 0227         AI      R7,256                  point to FDR data area
2171  542A 0100  
2172  542C 0429         BLWP    @>005A(R9)                      
2172  542E 005A  
2173  5430 0D00         DATA    >0D00                   save R4, R5, R7
2174  5432 06A0         BL      @CALSUB                 call subroutine
2174  5434 4332  
2175  5436 4604         DATA    RDOFSC                  read a sector from offset in R3
2176  5438 0429         BLWP    @>005A(R9)              restore R4 in R0, R5 in R1, R7 in R2
2176  543A 005A  
2177  543C E001         DATA    >E001                   
2178  543E 06A0         BL      @CALSUB                 call subroutine
2178  5440 4332  
2179  5442 5016         DATA    WFDRPB                  write bytes from FDR data buffer to PAB data buf
2180  5444 0460 H152    B       @UPDFDR                 update FDR, data buffer, VIB and return to caller
2180  5446 4550  
2181            *
2182            *------------------------------------
2183            * Opcode 6: Save
2184            * --------------
2185            * PAB 0: >06
2186            *     1: file type  <--- error code
2187            *   2-3: data buffer address in VDP mem
2188            *     4:
2189            *     5:
2190            *   6-7: # of bytes to save
2191            *     8:
2192            *------------------------------------                                   
2193            *
2194  5448 06A0 SAVE    BL      @CALSUB                 call subroutine
2194  544A 4332  
2195  544C 446A         DATA    CRFIL1                  create file
2196  544E 06A0         BL      @RBANB                  get PAB buffer ptr + # of bytes
2196  5450 5498  
2197  5452 04C3         CLR     R3                      sector offset 0
2198  5454 0429 H153    BLWP    @>005A(R9)                      
2198  5456 005A  
2199  5458 B100         DATA    >B100                   save R0, R2, R3, R7
2200  545A 06A0         BL      @CALSUB                 call subroutine
2200  545C 4332  
2201  545E 4624         DATA    WROFSC                  write sector to offset in R3
2202  5460 0429         BLWP    @>005A(R9)                      
2202  5462 005A  
2203  5464 B101         DATA    >B101                   retrieve R0, R2, R3, R7
2204  5466 0583         INC     R3                      next sector
2205  5468 0227         AI      R7,256                  256 bytes further in PAB data buffer
2205  546A 0100  
2206  546C 0602         DEC     R2                      next sector
2207  546E 16F2         JNE     H153                    more to do
2208            *                                       
2209  5470 C069         MOV     @>0056(R9),R1           FDR ptr
2209  5472 0056  
2210  5474 0221         AI      R1,12                   point to file status byte
2210  5476 000C  
2211  5478 0202         LI      R2,>0100                value for program file
2211  547A 0100  
2212  547C 0429         BLWP    @>005A(R9)              set VDP to write
2212  547E 005A  
2213  5480 0023         DATA    >0023                   address in R1
2214  5482 DBC2         MOVB    R2,@-2(R15)             write file status byte in FDR
2214  5484 FFFE  
2215  5486 0221         AI      R1,4                    point to eof offset byte in FDR
2215  5488 0004  
2216  548A 0429         BLWP    @>005A(R9)              set VDP to write
2216  548C 005A  
2217  548E 0023         DATA    >0023                   address in R1
2218  5490 DBC0         MOVB    R0,@-2(R15)             # of bytes in last sector
2218  5492 FFFE  
2219  5494 0460         B       @UPDFDR                 update FDR, data buffer, VIB then return to caller
2219  5496 4550  
2220            *                                       
2221  5498 C029 RBANB   MOV     @>0054(R9),R0           get buffer address + # of bytes
2221  549A 0054  
2222  549C 05C0         INCT    R0                      data buffer in PAB
2223  549E 0429         BLWP    @>005A(R9)              set VDP to read
2223  54A0 005A  
2224  54A2 0002         DATA    >0002                   address in R0
2225  54A4 D1EF         MOVB    @-1026(R15),R7          get data buffer address
2225  54A6 FBFE  
2226  54A8 06C7         SWPB    R7                      
2227  54AA D1EF         MOVB    @-1026(R15),R7                  
2227  54AC FBFE  
2228  54AE 06C7         SWPB    R7                      
2229  54B0 0220         AI      R0,4                    point to # of bytes to transfer
2229  54B2 0004  
2230  54B4 0429         BLWP    @>005A(R9)              set VDP to read
2230  54B6 005A  
2231  54B8 0002         DATA    >0002                   address in R0
2232  54BA D0AF         MOVB    @-1026(R15),R2          get # of bytes to be transfered
2232  54BC FBFE  
2233  54BE 0982         SRL     R2,8                    make it # of sectors (256 bytes each)
2234  54C0 04C0         CLR     R0                      
2235  54C2 D02F         MOVB    @-1026(R15),R0          see if one more is needed
2235  54C4 FBFE  
2236  54C6 1301         JEQ     H154                    no
2237  54C8 0582         INC     R2                      yes: one more sector
2238  54CA 045B H154    B       *R11                    
2239            *
2240            *-------------------------------------
2241            * Opcode 9: Status
2242            * --------------
2243            * PAB 0: >09
2244            *     1:
2245            *   2-3:
2246            *     4:
2247            *     5:
2248            *   6-7: record #
2249            *     8:           <--- file status
2250            *
2251            * Status bits, returned in PAB byte 8:
2252            * >80: file not found
2253            * >40: file is protected
2254            * >20:
2255            * >10: internal (else display or program)
2256            * >08: program file
2257            * >04: variable (else fixed or program)
2258            * >02: memory full
2259            * >01: end-of-file reached
2260            *-------------------------------------                                  
2261            *
2262  54CC 06A0 STATUS  BL      @CALSUB                 call subroutine
2262  54CE 4332  
2263  54D0 4A7E         DATA    FFFDRV                  save filename in comp buf, then find FDR in VDP
2264  54D2 C104         MOV     R4,R4                   found?
2265  54D4 1310         JEQ     H155                    yes
2266            *                                       
2267  54D6 06A0         BL      @CALSUB                 no: call subroutine
2267  54D8 4332  
2268  54DA 4AE6         DATA    FFDRDK                  find FDR on disk
2269  54DC 0200         LI      R0,>8000                value for file not found
2269  54DE 8000  
2270  54E0 C104         MOV     R4,R4                   found?
2271  54E2 1649         JNE     H164                    no: return with that value
2272  54E4 C069         MOV     @>0056(R9),R1           yes: ptr to FDR
2272  54E6 0056  
2273  54E8 04C2         CLR     R2                      
2274  54EA 0429         BLWP    @>005A(R9)              set VDP to write
2274  54EC 005A  
2275  54EE 0023         DATA    >0023                   address in R1
2276  54F0 DBC2         MOVB    R2,@-2(R15)             invalidate that FDR (file not open)
2276  54F2 FFFE  
2277  54F4 1036         JMP     H162                    transfer FDR status to PAB status byte
2278            *                                       
2279  54F6 06A0 H155    BL      @CALSUB                 file is open: call subroutine
2279  54F8 4332  
2280  54FA 51B8         DATA    AFPGPF                  adjust FDR ptr, get PAB file type into R4
2281  54FC 06A0         BL      @RFDRST                 get status byte from FDR
2281  54FE 51D4  
2282  5500 1101         JLT     H156                    var
2283  5502 1006         JMP     H157                    fix
2284            *                                       
2285  5504 06A0 H156    BL      @CALSUB                 var: call subroutine
2285  5506 4332  
2286  5508 503A         DATA    RRSEC                   load wanted sector, point to wanted rec in buffer
2287  550A 1013         JMP     H159                    out of range
2288  550C 04C2         CLR     R2                      ok: clear flag
2289  550E 1029         JMP     H162                    copy status byte from FDR into PAB, return
2290            *                                       
2291  5510 D16F H157    MOVB    @-1026(R15),R5          fix: get rec/sect byte
2291  5512 FBFE  
2292  5514 0985         SRL     R5,8                    make it a word
2293  5516 1602         JNE     H158                    
2294  5518 0205         LI      R5,>0100                00 (program files) means 256
2294  551A 0100  
2295  551C 06A0 H158    BL      @PABR2B                 get 2 bytes from PAB into R0
2295  551E 4844  
2296  5520 0006         DATA    6                       # of wanted record
2297  5522 C0C0         MOV     R0,R3                   save it
2298  5524 111C         JLT     H161                    too big: set memory full bit in PAB status byte
2299  5526 06A0         BL      @RNFISE                 get # recs/file into R2, comp with R3
2299  5528 5232  
2300  552A 04C2         CLR     R2                      
2301  552C 1A1A         JL      H162                    in file: copy file type bits, return
2302  552E 3C85         DIV     R5,R2                   how many sectors do we need?
2303  5530 C0C2         MOV     R2,R3                   save result
2304            *                                       
2305  5532 06A0 H159    BL      @FDR2B1                 get 2 bytes from FDR into R0
2305  5534 484A  
2306  5536 000E         DATA    14                      # of sectors/file
2307  5538 0583         INC     R3                      plus 1 sector for FDR
2308  553A 0202         LI      R2,>0100                value for eof reached in PAB status
2308  553C 0100  
2309  553E 60C0         S       R0,R3                   are there enough sectors in file for these recs?
2310  5540 1501         JGT     H160                    
2311  5542 100F         JMP     H162                    yes: we reached the eof
2312  5544 06A0 H160    BL      @CALSUB                 call subroutine
2312  5546 4332  
2313  5548 49AC         DATA    RWVIB                   load VIB (sector 0)
2314  554A C103         MOV     R3,R4                   number of sectors that will be needed
2315  554C C205         MOV     R5,R8                   VIB ptr
2316  554E 0228         AI      R8,10                   skip 10 bytes (required by CFSVIB)
2316  5550 000A  
2317  5552 06A0         BL      @CFSVIB                 count free sectors in bitmap, into R3
2317  5554 5740  
2318  5556 0202         LI      R2,>0100                value for eof reached
2318  5558 0100  
2319  555A 8103         C       R3,R4                   are there that many free sectors?
2320  555C 1402         JHE     H162                    yes
2321  555E 0202 H161    LI      R2,>0200                value for memory full
2321  5560 0200  
2322            *                                       
2323  5562 06A0 H162    BL      @FDR2B1                 get 2 bytes from FDR into R0
2323  5564 484A  
2324  5566 000C         DATA    12                      file status byte
2325  5568 0240         ANDI    R0,>8F00                mask irrelevant bits
2325  556A 8F00  
2326  556C 1502         JGT     H163                    
2327  556E 0260         ORI     R0,>0080                var: put var bit in PAB status style
2327  5570 0080  
2328  5572 0A30 H163    SLA     R0,3                    get rid of var bit in FDR style
2329  5574 F002         SOCB    R2,R0                   add eof and mem full bits
2330            *                                       
2331  5576 C069 H164    MOV     @>0054(R9),R1           PAB ptr
2331  5578 0054  
2332  557A 0221         AI      R1,8                    point to bias/status return byte
2332  557C 0008  
2333  557E 0429         BLWP    @>005A(R9)              set VDP to write
2333  5580 005A  
2334  5582 0023         DATA    >0023                   address in R1
2335  5584 DBC0         MOVB    R0,@-2(R15)             write file status to PAB
2335  5586 FFFE  
2336  5588 0460         B       @RTURN1                 return to caller
2336  558A 4350  
2337            *
2338            *---------------------------------
2339            * Disk directory access
2340            * ---------------------
2341            * The directory is accessed by omiting the filename in the DSR name: "DSK1."
2342            * It must be opened for input only, as an Int/Fix 38 file.
2343            * It consists in upto 128 records, the first one contains the disk informations,
2344            * the others the informations for upto 127 files (in alphabetical order).
2345            * Each record consists in an ascii string and three floating point numbers.
2346            *
2347            * Record 0 contains:
2348            * - Diskname (an ascii string of upto 10 chars).
2349            * - The number zero.
2350            * - The number of sectors on disk.
2351            * - The number of free sectors on disk.
2352            *
2353            * Other records contain:
2354            * - Filename (an ascii string of upto 10 chars).
2355            * - Filetype: 1=D/F, 2=D/V, 3=I/F, 4=I/V, 5=Prog, 0=end of directory.
2356            *   If the file is protected, this number is negative (-1=D/F, etc).
2357            * - File size in sectors (including the FDR itself).
2358            * - File record length (0 for programs).
2359            *---------------------------------
2360             
2361            *---------------------------------
2362            * Open disk directory pseudo-file
2363            *---------------------------------                                      
2364            *
2365  558C D02F OPNDIR  MOVB    @-1026(R15),R0          get file type from PAB
2365  558E FBFE  
2366  5590 0240         ANDI    R0,>1E00                mask irrelavant bits (rel/seq)
2366  5592 1E00  
2367  5594 0280         CI      R0,>0C00                is it int/fix in output mode?
2367  5596 0C00  
2368  5598 1303         JEQ     H166                    yes
2369  559A 06A0 H165    BL      @RETERR                 return with error
2369  559C 4978  
2370  559E 4000         DATA    >4000                   bad attributes
2371  55A0 06A0 H166    BL      @PABR2B                 get 2 bytes from PAB into R0
2371  55A2 4844  
2372  55A4 0004         DATA    4                       rec length
2373  55A6 0980         SRL     R0,8                    make it a word
2374  55A8 1303         JEQ     H167                    >00= default: set it to 38
2375  55AA 0280         CI      R0,>0026                is it 38?
2375  55AC 0026  
2376  55AE 16F5         JNE     H165                    no: return with bad attributes error
2377  55B0 0200 H167    LI      R0,>2600                set rec len to 38
2377  55B2 2600  
2378  55B4 0429         BLWP    @>005A(R9)              set VDP to write
2378  55B6 005A  
2379  55B8 0103         DATA    >0103                   address in R8 (from PABR2B)
2380  55BA DBC0         MOVB    R0,@-2(R15)             write rec len to PAB
2380  55BC FFFE  
2381            *                                       
2382  55BE 04C7         CLR     R7                      
2383  55C0 06A0         BL      @FNDRV                  find matching drive in file control blocks
2383  55C2 577A  
2384  55C4 55CC         DATA    H168                    go there if not found
2385  55C6 06A0 ERRR10  BL      @ERROR5                 update data then return with error
2385  55C8 494C  
2386  55CA E000         DATA    >E000                   file error
2387  55CC C1C7 H168    MOV     R7,R7                   did we find a free slot?
2388  55CE 1603         JNE     H169                    yes
2389  55D0 06A0         BL      @RETERR                 no: return with error
2389  55D2 4978  
2390  55D4 8000         DATA    >8000                   memory full
2391  55D6 0429 H169    BLWP    @>005A(R9)              set VDP to write
2391  55D8 005A  
2392  55DA 00E3         DATA    >00E3                   address in R7
2393  55DC DBC3         MOVB    R3,@-2(R15)             write drive #
2393  55DE FFFE  
2394  55E0 06C3         SWPB    R3                      
2395  55E2 DBC3         MOVB    R3,@-2(R15)             and a space as filename (illegal, indicates dir)
2395  55E4 FFFE  
2396  55E6 0460         B       @RTURN1                 return to caller
2396  55E8 4350  
2397            *
2398            *---------------------------------
2399            * Close disk directory
2400            *---------------------------------                                      
2401  55EA 06A0 CLSDIR  BL      @FNDRV                  find matching drive in file control blocks
2401  55EC 577A  
2402  55EE 55C6         DATA    ERRR10                  go there if not found: return with file error
2403  55F0 04C0         CLR     R0                      
2404  55F2 0429         BLWP    @>005A(R9)              set VDP to write
2404  55F4 005A  
2405  55F6 0103         DATA    >0103                   address in R8
2406  55F8 DBC0         MOVB    R0,@-2(R15)             clear drive #
2406  55FA FFFE  
2407  55FC 0460         B       @RTURN1                 return to caller
2407  55FE 4350  
2408            *
2409            *---------------------------------
2410            * Read a record from disk directory
2411            *---------------------------------                                      
2412            *
2413  5600 06A0 RDDIR   BL      @FNDRV                  find matching drive in file control blocks
2413  5602 577A  
2414  5604 55C6         DATA    ERRR10                  go ther it not found: return with file error
2415  5606 0588         INC     R8                      
2416  5608 C148         MOV     R8,R5                   save ptr to FDR
2417  560A 06A0         BL      @PABR2B                 get 2 bytes from PAB into R0
2417  560C 4844  
2418  560E 0006         DATA    6                       record #
2419  5610 C080         MOV     R0,R2                   save it
2420  5612 0582         INC     R2                      
2421  5614 0429         BLWP    @>005A(R9)              set VDP to write
2421  5616 005A  
2422  5618 0103         DATA    >0103                   address in R8
2423  561A DBC2         MOVB    R2,@-2(R15)             write record number in FDR
2423  561C FFFE  
2424  561E 06C2         SWPB    R2                      after first char of filename!
2425  5620 DBC2         MOVB    R2,@-2(R15)                     
2425  5622 FFFE  
2426  5624 0A10         SLA     R0,1                    since two byte per file ptr
2427  5626 D000         MOVB    R0,R0                   is rec # greater than 128?
2428  5628 1303         JEQ     H170                    no
2429  562A 06A0         BL      @ERROR5                 yes: update data then return with error
2429  562C 494C  
2430  562E A000         DATA    >A000                   past eof
2431  5630 0702 H170    SETO    R2                      code for read
2432  5632 C100         MOV     R0,R4                   record #
2433  5634 133B         JEQ     H175                    0=disk parameters
2434  5636 0204         LI      R4,1                    sector #1
2434  5638 0001  
2435  563A 06A0         BL      @CALSUB                 call subroutine
2435  563C 4332  
2436  563E 4A28         DATA    RWSEC                   read sector into buffer in R5
2437  5640 C205         MOV     R5,R8                   buffer ptr
2438  5642 0225         AI      R5,255                  point to data buffer area in this ctrl block
2438  5644 00FF  
2439  5646 0640         DECT    R0                      don't count record 0
2440  5648 A200         A       R0,R8                   point to desired file ptr
2441  564A 06A0         BL      @VDPR2B                 get two byte from VDP at R8 into R0
2441  564C 4850  
2442  564E C100         MOV     R0,R4                   sector where that FDR is to be found
2443  5650 1328         JEQ     H173                    no more
2444  5652 06A0         BL      @CALSUB                 call subroutine
2444  5654 4332  
2445  5656 4A28         DATA    RWSEC                   read FDR sector into data buffer area
2446  5658 06A0         BL      @FDR2B1                 get 2 bytes from FDR into R0
2446  565A 484A  
2447  565C 010E         DATA    270                     # of sect/file
2448  565E C180         MOV     R0,R6                   save it to output file size
2449  5660 0586         INC     R6                      include the FDR itself
2450  5662 D0EF         MOVB    @-1026(R15),R3          ignore eof offset
2450  5664 FBFE  
2451  5666 0202         LI      R2,>0A00                10 chars per filename
2451  5668 0A00  
2452  566A D0EF         MOVB    @-1026(R15),R3          get rec length
2452  566C FBFE  
2453  566E 0983         SRL     R3,8                    make it a word
2454  5670 0648         DECT    R8                      point to status byte in FDR
2455  5672 0429         BLWP    @>005A(R9)              set VDP to read
2455  5674 005A  
2456  5676 0102         DATA    >0102                   address in R8
2457  5678 D02F         MOVB    @-1026(R15),R0          get file status byte
2457  567A FBFE  
2458  567C C1C0         MOV     R0,R7                   
2459  567E 0240         ANDI    R0,>0800                keep only write protected bit
2459  5680 0800  
2460  5682 51C0         SZCB    R0,R7                   clear write protected bit (if it was set)
2461  5684 0987         SRL     R7,8                    make it a word
2462  5686 0587         INC     R7                      types are numbered from 1
2463  5688 0287         CI      R7,>0002                is it a program file?
2463  568A 0002  
2464  568C 1602         JNE     H171                    no
2465  568E 0227         AI      R7,3                    yes: make it type 5
2465  5690 0003  
2466  5692 0287 H171    CI      R7,>0008                is it var?
2466  5694 0008  
2467  5696 1A02         JL      H172                    no
2468  5698 0227         AI      R7,-127                 yes: add 1 and clear var bit
2468  569A FF81  
2469  569C 0A40 H172    SLA     R0,4                    write protect bit will be >80
2470  569E E1C0         SOC     R0,R7                   add it to file type
2471  56A0 1004         JMP     H174                    
2472            *                                       
2473  56A2 04C2 H173    CLR     R2                      no more files: filename size = 0
2474  56A4 04C6         CLR     R6                      file size = 0
2475  56A6 04C3         CLR     R3                      rec length = 0
2476  56A8 04C7         CLR     R7                      type = 0
2477  56AA 100F H174    JMP     H176                    output that
2478            *                                       
2479  56AC 0225 H175    AI      R5,255                  disk info: point to data buffer area in ctrl block
2479  56AE 00FF  
2480  56B0 06A0         BL      @CALSUB                 call subroutine
2480  56B2 4332  
2481  56B4 4A28         DATA    RWSEC                   read sector 0
2482  56B6 06A0         BL      @FDR2B1                 get 2 bytes from FDR into R0
2482  56B8 484A  
2483  56BA 010A         DATA    266                     # of sectors on disk
2484  56BC C180         MOV     R0,R6                   duplicate it
2485  56BE 0646         DECT    R6                      minus directory itself (sect 0 + 1)
2486  56C0 06A0         BL      @CFSVIB                 count free sectors in bitmap, result in R3
2486  56C2 5740  
2487  56C4 04C7         CLR     R7                      filetype is not used
2488  56C6 0202         LI      R2,>0A00                diskname is 10 chars
2488  56C8 0A00  
2489            *                                       
2490  56CA 06A0 H176    BL      @PABR2B                 get 2 bytes from PAB into R0
2490  56CC 4844  
2491  56CE 0002         DATA    2                       APEDSK99: error in source listing (was R2)
2492  56D0 C200         MOV     R0,R8                   duplicate it
2493  56D2 0588         INC     R8                      skip first byte
2494  56D4 0982         SRL     R2,8                    filename length (or diskname)
2495  56D6 1316         JEQ     H179                    0: skip filename copying
2496  56D8 04C1         CLR     R1                      
2497  56DA 0429 H177    BLWP    @>005A(R9)              set VDP to read
2497  56DC 005A  
2498  56DE 00A2         DATA    >00A2                   address in R5 (FDR ptr)
2499  56E0 D06F         MOVB    @-1026(R15),R1          get 1 char from filename in FDR
2499  56E2 FBFE  
2500  56E4 0281         CI      R1,>2000                is it a space?
2500  56E6 2000  
2501  56E8 1309         JEQ     H178                    yes: end of name
2502  56EA 0429         BLWP    @>005A(R9)              no: set VDP to write
2502  56EC 005A  
2503  56EE 0103         DATA    >0103                   address in R8 (PAB data buffer ptr)
2504  56F0 DBC1         MOVB    R1,@-2(R15)             copy char in PAB data buffer
2504  56F2 FFFE  
2505  56F4 0585         INC     R5                      increment source ptr
2506  56F6 0588         INC     R8                      increment destination ptr
2507  56F8 0602         DEC     R2                      next char
2508  56FA 16EF         JNE     H177                    
2509  56FC 0502 H178    NEG     R2                      number of trailing spaces
2510  56FE 0222         AI      R2,10                   number of chars in filename
2510  5700 000A  
2511  5702 06C2         SWPB    R2                      
2512  5704 0429 H179    BLWP    @>005A(R9)              set VDP to write
2512  5706 005A  
2513  5708 0003         DATA    >0003                   address in R0 (beg of PAB data buffer)
2514  570A DBC2         MOVB    R2,@-2(R15)             write string length byte
2514  570C FFFE  
2515            *                                       
2516  570E 0429         BLWP    @>005A(R9)              set VDP to write
2516  5710 005A  
2517  5712 0103         DATA    >0103                   address in R8
2518  5714 C047         MOV     R7,R1                   file type + protection
2519  5716 06A0         BL      @INT2FP                 make it a float number
2519  5718 57BE  
2520  571A C046         MOV     R6,R1                   file size in sectors, including FDR
2521  571C 06A0         BL      @INT2FP                 make it a float number
2521  571E 57BE  
2522  5720 C043         MOV     R3,R1                   record length
2523  5722 06A0         BL      @INT2FP                 make it a float number
2523  5724 57BE  
2524  5726 C229         MOV     @>0054(R9),R8           get PAB ptr
2524  5728 0054  
2525  572A 0228         AI      R8,5                    point to character count
2525  572C 0005  
2526  572E 0200         LI      R0,>2600                always 38 bytes
2526  5730 2600  
2527  5732 0429         BLWP    @>005A(R9)              set VDP to write
2527  5734 005A  
2528  5736 0103         DATA    >0103                   address in R8
2529  5738 DBC0         MOVB    R0,@-2(R15)             write # of characters in record
2529  573A FFFE  
2530  573C 0460         B       @RTURN1                 return to caller
2530  573E 4350  
2531            *                                       
2532  5740 0228 CFSVIB  AI      R8,46                   count free sectors in VIB bitmap
2532  5742 002E  
2533  5744 0202         LI      R2,200                  bitmap size
2533  5746 00C8  
2534  5748 04C3         CLR     R3                      free sectors counter
2535  574A 0429         BLWP    @>005A(R9)              set VDP to read
2535  574C 005A  
2536  574E 0102         DATA    >0102                   address in R8
2537  5750 D06F H180    MOVB    @-1026(R15),R1          get a byte from bitmap
2537  5752 FBFE  
2538  5754 0221         AI      R1,256                  
2538  5756 0100  
2539  5758 0981         SRL     R1,8                    
2540  575A 130C         JEQ     H184                    was >FF: no free sectors, next byte
2541  575C 0601         DEC     R1                      was it >00?
2542  575E 1603         JNE     H181                    no: count bits
2543  5760 0223         AI      R3,8                    yes: 8 more free sectors
2543  5762 0008  
2544  5764 1007         JMP     H184                    next byte
2545  5766 0200 H181    LI      R0,8                    8 bits per byte
2545  5768 0008  
2546  576A 0911 H182    SRL     R1,1                    test a bit
2547  576C 1801         JOC     H183                    was 1: sector is used
2548  576E 0583         INC     R3                      was 0: one more free sector
2549  5770 0600 H183    DEC     R0                      next bit in byte
2550  5772 16FB         JNE     H182                    more to come
2551  5774 0602 H184    DEC     R2                      next bitmap byte
2552  5776 16EC         JNE     H180                    more to come
2553  5778 045B         B       *R11                    
2554            *                                       
2555  577A C2BB FNDRV   MOV     *R11+,R10               find drive in file control blocks
2556  577C C14B         MOV     R11,R5                  save 2 returns
2557  577E C229         MOV     @>0056(R9),R8           top of mem word in VDP buffers header
2557  5780 0056  
2558  5782 0228         AI      R8,3                    point to max # of files
2558  5784 0003  
2559  5786 0429         BLWP    @>005A(R9)              set VDP to read
2559  5788 005A  
2560  578A 0102         DATA    >0102                   address in R8
2561  578C D0AF         MOVB    @-1026(R15),R2          get # of files
2561  578E FBFE  
2562  5790 0882         SRA     R2,8                    make it a word
2563  5792 0228         AI      R8,6                    point to drive # in file ctrl block
2563  5794 0006  
2564  5796 0203         LI      R3,>0020                filename begin with space (illegal: flag for dir)
2564  5798 0020  
2565  579A D0C6         MOVB    R6,R3                   APEDSK99: error in original disassembly (was R5)
2566  579C 06A0 H185    BL      @VDPR2B                 read 2 bytes from VDP at R8 into R0
2566  579E 4850  
2567  57A0 8003         C       R3,R0                   match with that control block?
2568  57A2 1309         JEQ     H187                    yes
2569  57A4 0240         ANDI    R0,>00FF                keep only first char of filename
2569  57A6 00FF  
2570  57A8 1601         JNE     H186                    valid filename: a FDR is loaded here
2571  57AA C1C8         MOV     R8,R7                   this space is free: save ptr
2572  57AC 0228 H186    AI      R8,518                  point to next file control block
2572  57AE 0206  
2573  57B0 0602         DEC     R2                      next file
2574  57B2 16F4         JNE     H185                    more to come
2575  57B4 045A         B       *R10                    not found: return to address passed in data word
2576  57B6 0588 H187    INC     R8                      drive matches: point to FDR
2577  57B8 CA48         MOV     R8,@>0056(R9)           save ptr
2577  57BA 0056  
2578  57BC 0455         B       *R5                     return to caller after data word
2579            *
2580            *--------------------------------------
2581            * Floating point format
2582            * ---------------------
2583            * Float numbers are 8 bytes long: EE 12 34 56 78 9A BC
2584            * EE is the exponent in radix 100 (not in radix 10 as usual!). It is biased
2585            * by 64: >40=0, 41=1 (i.e *100), >42=2 (i.e * 10,000) >3F= -1 (i.e /100), etc
2586            *
2587            * 12 ... BC are the mantissa in binary coded decimal: each byte encodes two
2588            * decimal digits from 00 to 99
2589            *
2590            * For negative numbers, the first word is negated
2591            * For zero, the first word is >0000 the others are irrelevant
2592            *
2593            * Examples: 40 08 00 00 00 00 00 00 is 8.0
2594            *           41 02 37 00 00 00 00 00 is 255.0 (>37 hex = 55 decimal)
2595            *           BF F8 00 00 00 00 00 00 is -8.0
2596            *           43 01 02 03 04 05 06 07 is 1020304.050607
2597            *--------------------------------------                                 
2598            *
2599  57BE 0202 INT2FP  LI      R2,>0800                write an integer in floating point format
2599  57C0 0800  
2600  57C2 DBC2         MOVB    R2,@-2(R15)             size=8
2600  57C4 FFFE  
2601  57C6 C141         MOV     R1,R5                   integer is in R1: save it for sign processing
2602  57C8 0241         ANDI    R1,>7FFF                clear sign bit
2602  57CA 7FFF  
2603  57CC 0281         CI      R1,100                  is it less than 100?
2603  57CE 0064  
2604  57D0 1A07         JL      H188                    yes
2605  57D2 04C0         CLR     R0                      100 or over
2606  57D4 0204         LI      R4,100                  
2606  57D6 0064  
2607  57D8 3C04         DIV     R4,R0                   divide by 100
2608  57DA 0260         ORI     R0,>4100                add exponent 2 to hundreths
2608  57DC 4100  
2609  57DE 1005         JMP     H190                    
2610            *                                       
2611  57E0 C001 H188    MOV     R1,R0                   is it 0?
2612  57E2 1302         JEQ     H189                    yes: exponent is 0
2613  57E4 0260         ORI     R0,>4000                no: add exponent 1
2613  57E6 4000  
2614  57E8 04C1 H189    CLR     R1                      next digits will be 0
2615            *                                       
2616  57EA C145 H190    MOV     R5,R5                   test sign bit
2617  57EC 1101         JLT     H191                    negative
2618  57EE 1001         JMP     H192                    positive or zero
2619  57F0 0500 H191    NEG     R0                      negate first word
2620  57F2 DBC0 H192    MOVB    R0,@-2(R15)             write exponent to VDP at preset address
2620  57F4 FFFE  
2621  57F6 06C0         SWPB    R0                      
2622  57F8 DBC0         MOVB    R0,@-2(R15)             write first first 2 digits (or hundreths)
2622  57FA FFFE  
2623  57FC 06C1         SWPB    R1                      
2624  57FE DBC1         MOVB    R1,@-2(R15)             write last 2 digits (if any)
2624  5800 FFFE  
2625  5802 0202         LI      R2,5                    the remaining bytes are all 0 with integers
2625  5804 0005  
2626  5806 DBC2 H193    MOVB    R2,@-2(R15)             write 0 to VDP
2626  5808 FFFE  
2627  580A 0602         DEC     R2                      next byte
2628  580C 16FC         JNE     H193                    more to do
2629  580E 045B         B       *R11                    
2630            *
2631            *---------------------------------------
2632            * Subprogram >10: sector R/W
2633            * --------------
2634            * >834A: (n/a)      <--- sector #
2635            * >834C: drive #
2636            * >834D: R/W code (write if >00)
2637            * >834E: VDP buffer
2638            * >8350: sector #   <--- error code
2639            *---------------------------------------                                        
2640            *
2641  5810 C1CB ESUB01  MOV     R11,R7                  
2642  5812 06A0         BL      @PRPFDO                 prepare disk operations
2642  5814 43FE  
2643  5816 CA69         MOV     @>0050(R9),@>004A(R9)   copy sector #
2643  5818 0050  
2643  581A 004A  
2644  581C 0460         B       @SECRW1                 
2644  581E 4188  
2645            *
2646            *---------------------------------------
2647            * Subprogram >11: format disk
2648            * --------------                                        
2649            *
2650  5820 C1CB ESUB02  MOV     R11,R7                  
2651  5822 06A0         BL      @PRPFDO                 prepare disk operations
2651  5824 43FE  
2652  5826 0460         B       @FMTDSK                 
2652  5828 4206  
2653            *
2654            *---------------------------------------
2655            * Subprogram >12: file (un)protect
2656            * --------------
2657            * >834C: drive #
2658            * >834D: protect code (>00 unprotect)
2659            * >834E: ptr to filename
2660            * >8350: (n/a)      <--- error code
2661            *---------------------------------------                                
2662            *
2663  582A C1CB ESUB03  MOV     R11,R7                  
2664  582C 06A0         BL      @PRPFDO                 prepare disk operations
2664  582E 43FE  
2665  5830 D029         MOVB    @>004D(R9),R0           get protection code
2665  5832 004D  
2666  5834 0240         ANDI    R0,>0800                keep the bit that will be needed
2666  5836 0800  
2667  5838 0429         BLWP    @>005A(R9)              save R0 on stack
2667  583A 005A  
2668  583C 8000         DATA    >8000                   
2669  583E C029         MOV     @>004E(R9),R0           get pointer to filename
2669  5840 004E  
2670  5842 06A0         BL      @CALSUB                 call subroutine
2670  5844 4332  
2671  5846 592C         DATA    RFDRVB                  load FDR in VDP buffer
2672  5848 0429         BLWP    @>005A(R9)              retrieve old R0, in R2
2672  584A 005A  
2673  584C 2001         DATA    >2001                   
2674  584E 06A0         BL      @FDR2B1                 read two bytes in R0 from top of FDR + offset
2674  5850 484A  
2675  5852 000C         DATA    12                      file status byte
2676  5854 0240         ANDI    R0,>F700                clear protection flag
2676  5856 F700  
2677  5858 F002         SOCB    R2,R0                   set it if needed
2678  585A 0429         BLWP    @>005A(R9)              set VDP for write
2678  585C 005A  
2679  585E 0103         DATA    >0103                   address in R8
2680  5860 DBC0         MOVB    R0,@-2(R15)             write back file status to FDR
2680  5862 FFFE  
2681            *                                       
2682  5864 C229 UWFLVB  MOV     @>0056(R9),R8           FDR address in VDP mem
2682  5866 0056  
2683  5868 0429         BLWP    @>005A(R9)              set VDP for read
2683  586A 005A  
2684  586C 0102         DATA    >0102                   address in R8
2685  586E D02F         MOVB    @-1026(R15),R0          get drive # in ctrl block
2685  5870 FBFE  
2686  5872 0260         ORI     R0,>8000                flag it
2686  5874 8000  
2687  5876 0429         BLWP    @>005A(R9)              set VDP for write
2687  5878 005A  
2688  587A 0103         DATA    >0103                   address in R8
2689  587C DBC0         MOVB    R0,@-2(R15)             write it back
2689  587E FFFE  
2690  5880 0460         B       @UPDFDR                 update FDR, load VIB
2690  5882 4550  
2691            *
2692            *---------------------------------
2693            * Subprogram >13: file rename
2694            * --------------
2695            * >834C: drive #
2696            * >834E: ptr to new name
2697            * >8350: ptr to old name <--- error code
2698            *---------------------------------                                      
2699            *
2700  5884 C1CB ESUB04  MOV     R11,R7                  
2701  5886 06A0         BL      @PRPFDO                 prepare disk operations
2701  5888 43FE  
2702  588A C029         MOV     @>004E(R9),R0           get ptr to new filename
2702  588C 004E  
2703  588E 0429         BLWP    @>005A(R9)              save R0 on stack
2703  5890 005A  
2704  5892 8000         DATA    >8000                   
2705  5894 C029         MOV     @>0050(R9),R0           get ptr to old filename
2705  5896 0050  
2706  5898 06A0         BL      @CALSUB                 call subroutine
2706  589A 4332  
2707  589C 592C         DATA    RFDRVB                  put FDR in VDP buffer
2708  589E 06A0         BL      @RMFPTR                 remove FDR ptr from sector 1
2708  58A0 47B4  
2709  58A2 06A0         BL      @FDR2B1                 get 2 bytes from FDR
2709  58A4 484A  
2710  58A6 000C         DATA    12                      file status byte
2711  58A8 0240         ANDI    R0,>0800                protected?
2711  58AA 0800  
2712  58AC 1303         JEQ     H194                    no
2713  58AE 06A0         BL      @ERROR5                 yes: return with error
2713  58B0 494C  
2714  58B2 2000         DATA    >2000                   write protected
2715  58B4 06A0 H194    BL      @FDR2B1                 get 2 bytes from FDR
2715  58B6 484A  
2716  58B8 FFFC         DATA    -4                      sector # of FDR
2717  58BA C040         MOV     R0,R1                   
2718  58BC 0429         BLWP    @>005A(R9)              retrieve R0 from stack
2718  58BE 005A  
2719  58C0 8001         DATA    >8001                   ptr to new filename
2720  58C2 0429         BLWP    @>005A(R9)              save R1 on stack
2720  58C4 005A  
2721  58C6 4000         DATA    >4000                   sector # of FDR
2722  58C8 06A0         BL      @UFNCB                  write drive # and filename in compare buffer
2722  58CA 5B4E  
2723  58CC 06A0         BL      @CALSUB                 call subroutine
2723  58CE 4332  
2724  58D0 4B12         DATA    FFDRFN                  find FDR from filename
2725  58D2 C104         MOV     R4,R4                   found?
2726  58D4 1338         JEQ     H195                    yes: return with file error (name already exist)
2727  58D6 06A0         BL      @INSFDR                 insert a FDR in sector 1
2727  58D8 47E4  
2728  58DA 0429         BLWP    @>005A(R9)              retrieve sect # of FDR in R4
2728  58DC 005A  
2729  58DE 0801         DATA    >0801                   
2730  58E0 0429         BLWP    @>005A(R9)              set VDP to write
2730  58E2 005A  
2731  58E4 0103         DATA    >0103                   address in R8
2732  58E6 DBC4         MOVB    R4,@-2(R15)             write sector # of FDR
2732  58E8 FFFE  
2733  58EA 06C4         SWPB    R4                      
2734  58EC DBC4         MOVB    R4,@-2(R15)                     
2734  58EE FFFE  
2735  58F0 06C4         SWPB    R4                      sector #
2736  58F2 0702         SETO    R2                      code for read
2737  58F4 04C5         CLR     R5                      buffer offset: VDP at >8356
2738  58F6 06A0         BL      @CALSUB                 call subroutine
2738  58F8 4332  
2739  58FA 4A24         DATA    RDFDR1                  read FDR
2740  58FC C045         MOV     R5,R1                   
2741  58FE C029         MOV     @>0058(R9),R0                   
2741  5900 0058  
2742  5902 0220         AI      R0,257                  
2742  5904 0101  
2743  5906 0601         DEC     R1                      
2744  5908 06A0         BL      @CFNFDR                 copy filename in compare buffer to FDR
2744  590A 5B64  
2745  590C 04C2         CLR     R2                      code for write
2746  590E 06A0         BL      @CALSUB                 call subroutine
2746  5910 4332  
2747  5912 4A28         DATA    RWSEC                   write FDR (with new name in it)
2748  5914 06A0         BL      @CALSUB                 call subroutine
2748  5916 4332  
2749  5918 4A10         DATA    WRSEC1                  write sector 1 (with new FDR ptr in it)
2750  591A C069         MOV     @>0056(R9),R1           FDR ptr
2750  591C 0056  
2751  591E 0429         BLWP    @>005A(R9)              prepare VDP to write
2751  5920 005A  
2752  5922 0023         DATA    >0023                   address in R1
2753  5924 DBC4         MOVB    R4,@-2(R15)             clear first char of FDR in buffer
2753  5926 FFFE  
2754  5928 0460         B       @RTURN1                 return to caller
2754  592A 4350  
2755            *                               
2756  592C 04C6 RFDRVB  CLR     R6                      put FDR in VDP buffer
2757  592E D1A9         MOVB    @>004C(R9),R6           get drive #
2757  5930 004C  
2758  5932 06A0         BL      @UFNCB                  update filename compare buffer
2758  5934 5B4E  
2759  5936 06A0         BL      @CALSUB                 call subroutine
2759  5938 4332  
2760  593A 4A9E         DATA    FFDRVB                  look if FDR already in VDP buffer
2761  593C 06A0         BL      @CALSUB                 call subroutine
2761  593E 4332  
2762  5940 4AE2         DATA    FFDROD                  file FDR on disk
2763  5942 C104         MOV     R4,R4                   found?
2764  5944 1303         JEQ     H196                    yes
2765  5946 06A0 H195    BL      @RETERR                 no: return with error code in >8350
2765  5948 4978  
2766  594A E000         DATA    >E000                   file error
2767  594C 0460 H196    B       @RTURN1                 return to caller
2767  594E 4350  
2768            *
2769            *-------------------------------------
2770            * Subprogram >14: file raw read
2771            * --------------
2772            * >834C: drive #                          <--- >00
2773            * >834D: # of sectors (>00=get file info) <--- sectors read
2774            * >834E: ptr to filename
2775            * >8350: file info buffer (>83xx)         <--- error code
2776            *                              |
2777            * >83xx  : VDP buffer       <--'
2778            * >83xx+2: first sector # (total # of sect when get file info)
2779            * >83xx+4: status flag
2780            * >83xx+5: recs/sector
2781            * >83xx+6: eof offset
2782            * >83xx+7: rec size
2783            * >83xx+8: # of recs
2784            *-------------------------------------                                  
2785            *
2786  5950 C1CB ESUB05  MOV     R11,R7                  
2787  5952 06A0         BL      @PRPFDO                 prepare disk operations
2787  5954 43FE  
2788  5956 06A0         BL      @RFNPTR                 load filename and ptrs
2788  5958 5B86  
2789  595A 06A0         BL      @FFFDR                  find file FDR, load some info
2789  595C 5BAC  
2790  595E C082         MOV     R2,R2                   # of sectors to read
2791  5960 131E         JEQ     H202                    >00: get file info
2792  5962 6003         S       R3,R0                   sectors in file - first sector to read
2793  5964 1502         JGT     H197                    in file
2794  5966 04C2         CLR     R2                      past eof
2795  5968 1017         JMP     H201                    
2796  596A 8002 H197    C       R2,R0                   sectors past first one vs sectors to load
2797  596C 1A01         JL      H198                    
2798  596E C080         MOV     R0,R2                   load what's left
2799  5970 0429 H198    BLWP    @>005A(R9)                      
2799  5972 005A  
2800  5974 2000         DATA    >2000                   save R2
2801  5976 0429 H199    BLWP    @>005A(R9)                      
2801  5978 005A  
2802  597A 3100         DATA    >3100                   save R2, R3, R7
2803  597C 06A0         BL      @CALSUB                 call subroutine
2803  597E 4332  
2804  5980 4604         DATA    RDOFSC                  read sector from offset in file
2805  5982 0429         BLWP    @>005A(R9)                      
2805  5984 005A  
2806  5986 3101         DATA    >3101                   retrieve R2, R3, R7
2807  5988 0583         INC     R3                      next sector
2808  598A 0227         AI      R7,256                  increment VDP buffer ptr by 256 bytes
2808  598C 0100  
2809  598E 0602         DEC     R2                      more to do?
2810  5990 16F2         JNE     H199                    yes
2811  5992 0429 H200    BLWP    @>005A(R9)                      
2811  5994 005A  
2812  5996 2001         DATA    >2001                   retrieve R2 (# of sectors read)
2813  5998 CA42 H201    MOV     R2,@>004C(R9)           update # of sectors in parameters
2813  599A 004C  
2814  599C 100A         JMP     H203                    
2815            *                                       
2816  599E CD00 H202    MOV     R0,*R4+                 get file info: sectors in file
2817  59A0 0648         DECT    R8                      
2818  59A2 05C2         INCT    R2                      copy 2 bytes (status + recs/sector)
2819  59A4 06A0         BL      @VDP2SP                 from VDP at R8 to file info structure
2819  59A6 5BE0  
2820  59A8 0202         LI      R2,4                    copy 4 bytes
2820  59AA 0004  
2821  59AC A202         A       R2,R8                   
2822  59AE 06A0         BL      @VDP2SP                 eof offset, rec len, # of recs (or # of sect)
2822  59B0 5BE0  
2823  59B2 06A0 H203    BL      @CALSUB                 call subroutine
2823  59B4 4332  
2824  59B6 4550         DATA    UPDFDR                  updata FDR (+ data) if needed, read VIB
2825  59B8 04E9         CLR     @>0050(R9)              clear error flag
2825  59BA 0050  
2826  59BC 0460         B       @RTURN1                 return to caller
2826  59BE 4350  
2827            *
2828            *--------------------------------------
2829            * Subprogram >15: file raw write
2830            * --------------
2831            * >834C: drive #                                  <--- >00
2832            * >834D: # of sectors (>00=create file from info) <--- # of sectors written
2833            * >834E: ptr to filename
2834            * >8350: file info buffer (>83xx)                 <--- error code
2835            *                              |
2836            * >83xx  : VDP buffer       <--'
2837            * >83xx+2: first sector # (total # of sectors when creating file)
2838            * >83xx+4: status flag
2839            * >83xx+5: recs/sector
2840            * >83xx+6: eof offset
2841            * >83xx+7: rec size
2842            * >83xx+8: # of recs
2843            *--------------------------------------                                 
2844            *
2845  59C0 C1CB ESUB06  MOV     R11,R7                  
2846  59C2 06A0         BL      @PRPFDO                 prepare disk operations
2846  59C4 43FE  
2847  59C6 06A0         BL      @RFNPTR                 load drive + filename, + a few info
2847  59C8 5B86  
2848  59CA 1314         JEQ     H205                    sectors to write=0: create file
2849  59CC 06A0         BL      @FFFDR                  find file FDR
2849  59CE 5BAC  
2850  59D0 0429         BLWP    @>005A(R9)                      
2850  59D2 005A  
2851  59D4 2000         DATA    >2000                   save R2 (# of sectors to write)
2852  59D6 0429 H204    BLWP    @>005A(R9)                      
2852  59D8 005A  
2853  59DA 3100         DATA    >3100                   save R2, R3, R7
2854  59DC 06A0         BL      @CALSUB                 call subroutine
2854  59DE 4332  
2855  59E0 4624         DATA    WROFSC                  write sector from offset in file
2856  59E2 0429         BLWP    @>005A(R9)                      
2856  59E4 005A  
2857  59E6 3101         DATA    >3101                   retrieve R2, R3, R7
2858  59E8 0583         INC     R3                      next sector
2859  59EA 0227         AI      R7,256                  increment VDP ptr by 256 bytes
2859  59EC 0100  
2860  59EE 0602         DEC     R2                      more to do?
2861  59F0 16F2         JNE     H204                    yes
2862  59F2 10CF         JMP     H200                    update # of sectors written, in param. Then return
2863            *                               
2864  59F4 06A0 H205    BL      @CALSUB                 create file
2864  59F6 4332  
2865  59F8 4A9E         DATA    FFDRVB                  find file FDR in VDP buffers
2866  59FA 06A0         BL      @CALSUB                 call subroutine
2866  59FC 4332  
2867  59FE 4AE2         DATA    FFDROD                  find file FDR on disk
2868  5A00 06A0         BL      @CALSUB                 call subroutine
2868  5A02 4332  
2869  5A04 4470         DATA    CRFIL2                  create file
2870  5A06 0429         BLWP    @>005A(R9)                      
2870  5A08 005A  
2871  5A0A 0801         DATA    >0801                   retrieve R4 (file info ptr)
2872  5A0C C229         MOV     @>0056(R9),R8           FDR ptr
2872  5A0E 0056  
2873  5A10 05C4         INCT    R4                      skip 2 bytes
2874  5A12 C0F4         MOV     *R4+,R3                 # of sector to create
2875  5A14 0228         AI      R8,10                   skip filename
2875  5A16 000A  
2876  5A18 06A0         BL      @SP2VDP                 write 2 bytes in VDP at R8+2
2876  5A1A 5BF0  
2877  5A1C 0002         DATA    2                       i.e. status + recs/sector
2878  5A1E 06A0         BL      @SP2VDP                 write 4 bytes in VDP at new R8+4
2878  5A20 5BF0  
2879  5A22 0004         DATA    4                       i.e. eof offset, rec len, # of recs (or # of
2880  5A24 0603         DEC     R3                      offset = # of sectors-1 (starts from 0)
2881  5A26 1103         JLT     H206                    create an empty file, FDR only
2882  5A28 06A0         BL      @CALSUB                 
2882  5A2A 4332  
2883  5A2C 463A         DATA    APSCTS                  append enough sectors to reach offset
2884  5A2E 0460 H206    B       @UWFLVB                 modify FDR, write it, load VIB, return
2884  5A30 5864  
2885            *
2886            *---------------------------------------
2887            * Subprogram FILES: number of files
2888            *---------------------------------------                                        
2889  5A32 C1CB ESUB08  MOV     R11,R7                  
2890  5A34 06A0         BL      @PRPFDO                 prepare disk operation
2890  5A36 43FE  
2891  5A38 C229         MOV     @>002C(R9),R8           ptr to next basic token
2891  5A3A 002C  
2892  5A3C 0228         AI      R8,7                    skip FILES
2892  5A3E 0007  
2893  5A40 06A0         BL      @VDPR2B                 get next two bytes in R0
2893  5A42 4850  
2894  5A44 0280         CI      R0,>C801                >C8=unquoted string, size=1 char
2894  5A46 C801  
2895  5A48 161C         JNE     H207                    return (with error) if different
2896  5A4A 05C8         INCT    R8                      increment pointer
2897  5A4C 06A0         BL      @VDPR2B                 get next two bytes
2897  5A4E 4850  
2898  5A50 06C0         SWPB    R0                      
2899  5A52 0220         AI      R0,>49D0                substact >B630: # of files >B6=closed parenthesis
2899  5A54 49D0  
2900  5A56 0280         CI      R0,>0009                only 9 files allowed in Basic !
2900  5A58 0009  
2901  5A5A 1B13         JH      H207                    return with error if more
2902  5A5C 06C0         SWPB    R0                      
2903  5A5E DA40         MOVB    R0,@>004C(R9)           put new # of files in scratch-pad memory
2903  5A60 004C  
2904  5A62 06A0         BL      @CALSUB                 call subroutine
2904  5A64 4332  
2905  5A66 5A8C         DATA    PESB07                  subprogram >16 (private entry point)
2906  5A68 DA69         MOVB    @>0050(R9),@>0050(R9)   test result
2906  5A6A 0050  
2906  5A6C 0050  
2907  5A6E 1609         JNE     H207                    error
2908  5A70 C229         MOV     @>002C(R9),R8           ok: get ptr to Basic token
2908  5A72 002C  
2909  5A74 0228         AI      R8,12                   skip the whole statement
2909  5A76 000C  
2910  5A78 CA48         MOV     R8,@>002C(R9)           update ptr
2910  5A7A 002C  
2911  5A7C 5A69         SZCB    @>0042(R9),@>0042(R9)   clear current token
2911  5A7E 0042  
2911  5A80 0042  
2912  5A82 0460 H207    B       @RTURN1                 return to caller (i.e. Basic)
2912  5A84 4350  
2913            *
2914            *---------------------------------------
2915            * Subprogram >16: number of files
2916            * --------------
2917            * >834C: # of files
2918            * >8350: (n/a)      <--- error code
2919            *---------------------------------------                                        
2920            *
2921  5A86 C1CB ESUB07  MOV     R11,R7                  entry point from assembly
2922  5A88 06A0         BL      @PRPFDO                 prepare disk operations
2922  5A8A 43FE  
2923  5A8C 04C0 PESB07  CLR     R0                      entry point from call files
2924  5A8E D029         MOVB    @>004C(R9),R0           get # of files
2924  5A90 004C  
2925  5A92 1359         JEQ     H214                    return with error
2926  5A94 C229         MOV     @>0056(R9),R8           ptr to end of buffer word
2926  5A96 0056  
2927  5A98 0228         AI      R8,3                    point to # of files byte
2927  5A9A 0003  
2928  5A9C 04C3         CLR     R3                      
2929  5A9E 0429         BLWP    @>005A(R9)              set VDP to read
2929  5AA0 005A  
2930  5AA2 0102         DATA    >0102                   address in R8
2931  5AA4 D0EF         MOVB    @-1026(R15),R3          get current # of files
2931  5AA6 FBFE  
2932  5AA8 0205         LI      R5,518                  size of 1 file control block
2932  5AAA 0206  
2933  5AAC 90C0         CB      R0,R3                   compare required with current
2934  5AAE 1348         JEQ     H213                    same: return with no error
2935  5AB0 122B         JLE     H210                    less
2936  5AB2 C180         MOV     R0,R6                   more files needed
2937  5AB4 0280         CI      R0,>1000                maximum is 16
2937  5AB6 1000  
2938  5AB8 1B46         JH      H214                    return with error
2939  5ABA 6003         S       R3,R0                   how many to add
2940  5ABC 0980         SRL     R0,8                    make it a word
2941  5ABE 3805         MPY     R5,R0                   # of bytes to add
2942  5AC0 C101         MOV     R1,R4                   result in R0:R1
2943  5AC2 0504         NEG     R4                      
2944  5AC4 C0A9         MOV     @>0070(R9),R2           highest free address in VDP mem
2944  5AC6 0070  
2945  5AC8 C002         MOV     R2,R0                   
2946  5ACA 6001         S       R1,R0                   what it would become
2947  5ACC 0280         CI      R0,>0800                is there room enough for VDP?
2947  5ACE 0800  
2948  5AD0 113A         JLT     H214                    no: return with error
2949  5AD2 C040         MOV     R0,R1                   ok: new base
2950  5AD4 0582 H208    INC     R2                      increment source ptr
2951  5AD6 0580         INC     R0                      increment destination ptr
2952  5AD8 0429         BLWP    @>005A(R9)              set VDP to read
2952  5ADA 005A  
2953  5ADC 0042         DATA    >0042                   address in R2
2954  5ADE D0EF         MOVB    @-1026(R15),R3          get a byte
2954  5AE0 FBFE  
2955  5AE2 0429         BLWP    @>005A(R9)              set VDP to write
2955  5AE4 005A  
2956  5AE6 0003         DATA    >0003                   address in R0
2957  5AE8 DBC3         MOVB    R3,@-2(R15)             copy a byte
2957  5AEA FFFE  
2958  5AEC 8202         C       R2,R8                   did we copy the whole header?
2959  5AEE 16F2         JNE     H208                    not yet
2960  5AF0 0429         BLWP    @>005A(R9)              set VDP to write
2960  5AF2 005A  
2961  5AF4 0003         DATA    >0003                   address in R0
2962  5AF6 DBC6         MOVB    R6,@-2(R15)             new # of files
2962  5AF8 FFFE  
2963  5AFA 04C6         CLR     R6                      
2964  5AFC 6080         S       R0,R2                   
2965  5AFE DBC6 H209    MOVB    R6,@-2(R15)             clear byte
2965  5B00 FFFE  
2966  5B02 0602         DEC     R2                      
2967  5B04 16FC         JNE     H209                    
2968  5B06 101A         JMP     H212                    
2969            *                                       
2970  5B08 0429 H210    BLWP    @>005A(R9)              less files needed
2970  5B0A 005A  
2971  5B0C 0103         DATA    >0103                   set VDP to write to address in R8
2972  5B0E DBC0         MOVB    R0,@-2(R15)             new # of files in buffer header
2972  5B10 FFFE  
2973  5B12 60C0         S       R0,R3                   how many to remove
2974  5B14 0983         SRL     R3,8                    make it a word
2975  5B16 38C5         MPY     R5,R3                   # of bytes to remove
2976  5B18 C044         MOV     R4,R1                   result in R3:R4
2977  5B1A A048         A       R8,R1                   new address for buffer header
2978  5B1C C0A9         MOV     @>0070(R9),R2           highest free address in VDP mem
2978  5B1E 0070  
2979  5B20 0429 H211    BLWP    @>005A(R9)              set VDP to read
2979  5B22 005A  
2980  5B24 0102         DATA    >0102                   address in R8
2981  5B26 D02F         MOVB    @-1026(R15),R0          read a byte
2981  5B28 FBFE  
2982  5B2A 0429         BLWP    @>005A(R9)              set VDP to write
2982  5B2C 005A  
2983  5B2E 0023         DATA    >0023                   address in R1
2984  5B30 DBC0         MOVB    R0,@-2(R15)             write byte back
2984  5B32 FFFE  
2985  5B34 0601         DEC     R1                      decrement destination ptr
2986  5B36 0608         DEC     R8                      decrement source ptr
2987  5B38 8088         C       R8,R2                   did we copy the whole header?
2988  5B3A 16F2         JNE     H211                    not yet
2989            *                                       
2990  5B3C CA41 H212    MOV     R1,@>0070(R9)           new first free address                                  
2990  5B3E 0070  
2991  5B40 04E9 H213    CLR     @>0050(R9)              clear error flag
2991  5B42 0050  
2992  5B44 1002         JMP     H215                    
2993  5B46 0729 H214    SETO    @>0050(R9)              set error flag
2993  5B48 0050  
2994  5B4A 0460 H215    B       @RTURN1                 return to caller
2994  5B4C 4350  
2995            *                                       
2996  5B4E 04E9 UFNCB   CLR     @>0054(R9)              write drive # and filename in compare buffer
2996  5B50 0054  
2997  5B52 C069         MOV     @>0058(R9),R1           
2997  5B54 0058  
2998  5B56 0221         AI      R1,256                  ptr to filename compare buffer
2998  5B58 0100  
2999  5B5A 0429         BLWP    @>005A(R9)              set VDP to write
2999  5B5C 005A  
3000  5B5E 0023         DATA    >0023                   address in R1
3001  5B60 DBC6         MOVB    R6,@-2(R15)             write drive #
3001  5B62 FFFE  
3002  5B64 0202 CFNFDR  LI      R2,10                   filename must be exactly 10 chars
3002  5B66 000A  
3003  5B68 0581 H216    INC     R1                      next char in compare buffer
3004  5B6A 0429         BLWP    @>005A(R9)              set VDP to read
3004  5B6C 005A  
3005  5B6E 0002         DATA    >0002                   address in R0
3006  5B70 D0EF         MOVB    @-1026(R15),R3          get 1 char from filename
3006  5B72 FBFE  
3007  5B74 0580         INC     R0                      next char in provided filename
3008  5B76 0429         BLWP    @>005A(R9)              set VDP to write
3008  5B78 005A  
3009  5B7A 0023         DATA    >0023                   address in R1
3010  5B7C DBC3         MOVB    R3,@-2(R15)             write 1 char to compare buffer
3010  5B7E FFFE  
3011  5B80 0602         DEC     R2                      
3012  5B82 16F2         JNE     H216                    next char
3013  5B84 045B         B       *R11                    
3014            *                                       
3015  5B86 C28B RFNPTR  MOV     R11,R10                 load compare buffer and ptrs
3016  5B88 04C6         CLR     R6                      
3017  5B8A D1A9         MOVB    @>004C(R9),R6           drive #
3017  5B8C 004C  
3018  5B8E C029         MOV     @>004E(R9),R0           ptr to filename
3018  5B90 004E  
3019  5B92 06A0         BL      @UFNCB                  write them in compare buffer
3019  5B94 5B4E  
3020  5B96 D129         MOVB    @>0050(R9),R4           file info structure ptr
3020  5B98 0050  
3021  5B9A 0984         SRL     R4,8                    
3022  5B9C A109         A       R9,R4                   make it a PAB address
3023  5B9E D029         MOVB    @>004D(R9),R0           # of sectors (>00=get file info)
3023  5BA0 004D  
3024  5BA2 0429         BLWP    @>005A(R9)                      
3024  5BA4 005A  
3025  5BA6 0800         DATA    >0800                   save R4
3026  5BA8 0980         SRL     R0,8                    
3027  5BAA 045A         B       *R10                    EQ set for get file info
3028            *                                       
3029  5BAC 0429 FFFDR   BLWP    @>005A(R9)              find file FDR
3029  5BAE 005A  
3030  5BB0 8010         DATA    >8010                   save R0 + R11
3031  5BB2 06A0         BL      @CALSUB                 call subroutine
3031  5BB4 4332  
3032  5BB6 4A9E         DATA    FFDRVB                  find file FDR in VDP buffers
3033  5BB8 06A0         BL      @CALSUB                 call subroutine
3033  5BBA 4332  
3034  5BBC 4AE2         DATA    FFDROD                  find FDR on disk
3035  5BBE C104         MOV     R4,R4                   found ?
3036  5BC0 1303         JEQ     H217                    yes
3037  5BC2 06A0         BL      @ERROR5                 no: return with error
3037  5BC4 494C  
3038  5BC6 E000         DATA    >E000                   file error
3039  5BC8 06A0 H217    BL      @FDR2B1                 get two bytes from FDR into R0
3039  5BCA 484A  
3040  5BCC 000E         DATA    14                      # of sectors in file
3041  5BCE 0429         BLWP    @>005A(R9)                      
3041  5BD0 005A  
3042  5BD2 2011         DATA    >2011                   retrieve R0 in R2 (# of sect to read), and R11
3043  5BD4 0429         BLWP    @>005A(R9)                      
3043  5BD6 005A  
3044  5BD8 0801         DATA    >0801                   retrieve R4 (ptr to file info structure)
3045  5BDA C1F4         MOV     *R4+,R7                 VDP buffer
3046  5BDC C0D4         MOV     *R4,R3                  first sector
3047  5BDE 045B         B       *R11                    
3048            *                                       
3049  5BE0 0429 VDP2SP  BLWP    @>005A(R9)              copy VDP bytes to scratch-pad
3049  5BE2 005A  
3050  5BE4 0102         DATA    >0102                   read from VDP at R8
3051  5BE6 DD2F H218    MOVB    @-1026(R15),*R4+        read bytes into scratch-pad at R4
3051  5BE8 FBFE  
3052  5BEA 0602         DEC     R2                      # of byte in R2
3053  5BEC 16FC         JNE     H218                    next byte
3054  5BEE 045B         B       *R11                    
3055            *                                       
3056  5BF0 C0BB SP2VDP  MOV     *R11+,R2                copy scratch-pad bytes to VDP
3057  5BF2 A202         A       R2,R8                   
3058  5BF4 0429         BLWP    @>005A(R9)              set VDP to write
3058  5BF6 005A  
3059  5BF8 0103         DATA    >0103                   address in R8 + offset in data word
3060  5BFA DBF4 H219    MOVB    *R4+,@-2(R15)           write byte from scratch-pad at R4
3060  5BFC FFFE  
3061  5BFE 0602         DEC     R2                      # of bytes in R2, was in data word
3062  5C00 16FC         JNE     H219                    next byte
3063  5C02 045B         B       *R11    
3064            *
3065            * APEDSK99 CALL subprograms
3066            *
3067            * parameter is single digit -> 0x00
3068  5C04 0206 PDSK    LI      R6,>0100                Protect ACOMND 
3068  5C06 0100  
3069  5C08 102C         JMP     ACLPRP                  generic prep
3070  5C0A 0206 UDSK    LI      R6,>0200                Unprotect ACOMND 
3070  5C0C 0200  
3071  5C0E 1029         JMP     ACLPRP                  generic prep
3072  5C10 0206 LDSK    LI      R6,>0300                List Files on DSKx ACOMND 
3072  5C12 0300  
3073  5C14 1026         JMP     ACLPRP                  generic prep
3074            * parameters are single digit + character string -> 1x00; ! >1300 IS RESERVED (BL NTPDT+1) ! 
3075  5C16 0206 MDSK    LI      R6,>1000                Change DSK ACOMND
3075  5C18 1000  
3076  5C1A 1023         JMP     ACLPRP                  generic prep
3077  5C1C 0206 NDSK    LI      R6,>1100                create new blank SS/SD DOAD image
3077  5C1E 1100  
3078  5C20 1020         JMP     ACLPRP
3079            * parameter is a charachter string -> 2x00
3080  5C22 0206 RDSK    LI      R6,>2000                Remove DOAD from SD card ACOMND 
3080  5C24 2000  
3081  5C26 101D         JMP     ACLPRP                  generic prep
3082  5C28 0206 FGET    LI      R6,>2100                get DOAD from FTP server ACOMND
3082  5C2A 2100  
3083  5C2C 101A         JMP     ACLPRP                  generic prep
3084  5C2E 0206 FPUT    LI      R6,>2200                save DOAD to FTP server ACOMND 
3084  5C30 2200  
3085  5C32 1017         JMP     ACLPRP                  generic prep
3086  5C34 0206 ADSR    LI      R6,>2300                load DSR and reset ACOMND
3086  5C36 2300  
3087  5C38 1014         JMP     ACLPRP                  generic prep
3088  5C3A 0206 CDIR    LI      R6,>2400                change root folder
3088  5C3C 2400  
3089  5C3E 1011         JMP     ACLPRP                  generic prep
3090            * no parameters ->3x00
3091  5C40 0206 SMAP    LI      R6,>3000                Show DSKx mapping ACOMND
3091  5C42 3000  
3092  5C44 100E         JMP     ACLPRP                  generic prep
3093  5C46 0206 LDIR    LI      R6,>3100                List SD dir ACOMND
3093  5C48 3100  
3094  5C4A 100B         JMP     ACLPRP                  generic prep
3095  5C4C 0206 AHLP    LI      R6,>3200                display APEDSK99 CALL()'s help screen
3095  5C4E 3200  
3096  5C50 1008         JMP     ACLPRP                  generic prep
3097  5C52 0206 ACHR    LI      R6,>3300                load proper lowercase character set
3097  5C54 3300  
3098  5C56 1005         JMP     ACLPRP                  generic prep
3099  5C58 0206 ARST    LI      R6,>3468                APEDSK99 reset ACOMND
3099  5C5A 3468  
3100  5C5C 1002         JMP     ACLPRP                  generic prep
3101  5C5E 0206 TIME    LI      R6,>3500                show NTP time and date
3101  5C60 3500  
3102            *
3103            * Generic prep and return to TI BASIC for APEDSK99 CALL's
3104            *
3105  5C62 06C6 ACLPRP  SWPB    R6                      get optional subcommand in MSB
3106  5C64 D806         MOVB    R6,@ASUBCM              save
3106  5C66 5FE9  
3107  5C68 06C6         SWPB    R6                      back to primary command
3108            *
3109  5C6A C1CB         MOV     R11,R7                  save return-to-TI BASIC address
3110  5C6C 06A0         BL      @PRPFDO                 prepare TI Controller DSR operations
3110  5C6E 43FE  
3111            *
3112  5C70 C229         MOV     @>002C(R9),R8           ptr to next basic token
3112  5C72 002C  
3113  5C74 0228         AI      R8,4                    skip length byte and 3 chars of CALL name
3113  5C76 0004  
3114  5C78 06A0         BL      @VDPR2B                 get CALL last char and "(" or "0" in R0
3114  5C7A 4850  
3115  5C7C 0A80         SLA     R0,8                    only interested in LSB
3116  5C7E 130E         JEQ     NOPARM                  0 = no parameters? SMAP / LDIR / AHLP / ACHR / ARST / TIME (and special guest LDSK)
3117            *
3118  5C80 0228         AI      R8,2                    adjust token pointer
3118  5C82 0002  
3119  5C84 06A0         BL      @VDPR2B                 get next two bytes in R0
3119  5C86 4850  
3120  5C88 0280         CI      R0,>C801                >C8=unquoted string, size=1 char?
3120  5C8A C801  
3121  5C8C 1331         JEQ     USTRNG                  yes: PDSK / UDSK / LDSK / MDSK / NDSK
3122            *
3123  5C8E 0280         CI      R0,>C701                >C7=quoted string, minimum 1 character?
3123  5C90 C701  
3124  5C92 1A02         JL      ACLERR
3125  5C94 0460         B       @QSTRNG                 yes: RDSK / FGET / FPUT / ADSR / CDIR
3125  5C96 5D8C  
3126            *
3127  5C98 0460 ACLERR  B       @RTURN1                 expect the unexpected                           
3127  5C9A 4350  
3128            *
3129            * SMAP / LDIR / AHLP / ACHR / ARST / TIME (and special guest LDSK)
3130            *
3131  5C9C 0286 NOPARM  CI      R6,>0300                LDSK without parameters is handy (re-use last used DSK#)
3131  5C9E 0300  
3132  5CA0 1303         JEQ     NOPRM2
3133  5CA2 0286         CI      R6,>3000                catch other CALL's without parameters -> error
3133  5CA4 3000  
3134  5CA6 1AF8         JL      ACLERR
3135            *
3136  5CA8 D820 NOPRM2  MOVB    @LSTDRV,@CALLBF         get last drive accessed (LDSK without parameters)
3136  5CAA 5FC7  
3136  5CAC 5FC8  
3137  5CAE D806         MOVB    R6,@ACOMND              execute LDSK / ACHR / ARST / TIME
3137  5CB0 5FE8  
3138  5CB2 0286         CI      R6,>3300                ACHR / ARST / TIME ?    
3138  5CB4 3300  
3139  5CB6 1A3C         JL      LDSK2                   no; SMAP / LDIR / AHLP use LDSK display routine
3140            *
3141  5CB8 0208 QNOPRM  LI      R8,9                    current CALL length
3141  5CBA 0009  
3142  5CBC 0286         CI      R6,>3300                ACHR?
3142  5CBE 3300  
3143  5CC0 1306         JEQ     ACHR2                   yes; get some real characters
3144  5CC2 0286         CI      R6,>0300                LDSK()?
3144  5CC4 0300  
3145  5CC6 1602         JNE     A9901                   nope; exit with CALL lenght 9 for SMAP / LDIR / AHLP / ARST / TIME
3146  5CC8 0228         AI      R8,3                    yep;  exit with CALL length 12 for LDSK
3146  5CCA 0003  
3147            *
3148  5CCC 1030 A9901   JMP     A9904
3149            *
3150  5CCE 9820 ACHR2   CB      @INT2FP+2,@CALLST
3150  5CD0 57C0  
3150  5CD2 5FC6  
3151  5CD4 132C         JEQ     A9904                   >08; no char definition file found
3152            *
3153  5CD6 C0A0         MOV     @PATTBL,R2              get start of <SPACE> pattern table entry (default >0400 for TI BASIC)
3153  5CD8 4046  
3154  5CDA 06A0         BL      @VDPWRI                 set VPD address
3154  5CDC 4310  
3155            *                       
3156  5CDE 06A0 A9902   BL      @DISSTS                 use existing display routine to write 4 definitions at a time
3156  5CE0 5E36  
3157  5CE2 9820         CB      @K004,@CALLST           check Arduino ACHR return code
3157  5CE4 432E  
3157  5CE6 5FC6  
3158  5CE8 1322         JEQ     A9904                   we're done
3159  5CEA 05A0         INC     @RDINT                  generates interrupt for next lot
3159  5CEC 5FEA  
3160  5CEE 10F7         JMP     A9902                   again
3161            *
3162            * PDSK / UDSK / LDSK / MDSK / NDSK
3163            *
3164  5CF0 0286 USTRNG  CI      R6,>2000                only PDSK / UDSK / LDSK / MDSK / NDSK?
3164  5CF2 2000  
3165  5CF4 14D1         JHE     ACLERR                  no -> sneaky other commands don't belong here
3166  5CF6 05C8         INCT    R8                      increment pointer
3167  5CF8 06A0         BL      @VDPR2B                 get next two bytes              
3167  5CFA 4850  
3168            *
3169  5CFC 06C0         SWPB    R0
3170  5CFE 0220         AI      R0,>49D0                add 2's complement of >B630: MSB = >B3 / "," or >B6 / ")", LSB= # of files 
3170  5D00 49D0  
3171  5D02 1502         JGT     A9903                   >B6
3172  5D04 0220         AI      R0,768                  >B3, adjust R0 to positive range
3172  5D06 0300  
3173            *
3174  5D08 13C7 A9903   JEQ     ACLERR                  DSK0 not valid, * INCORRECT COMMAND
3175  5D0A 0280         CI      R0,3                    only 3 DSK's allowed
3175  5D0C 0003  
3176  5D0E 1BC4         JH      ACLERR                  DSK4+, * INCORRECT COMMAND
3177            *
3178  5D10 06C0         SWPB    R0
3179  5D12 D800         MOVB    R0,@CALLBF              save DSKx
3179  5D14 5FC8  
3180  5D16 D800         MOVB    R0,@LSTDRV              remember last drive accessed for LDSK without parameter
3180  5D18 5FC7  
3181            *
3182  5D1A 0286         CI      R6,>1000                MDSK or NDSK?
3182  5D1C 1000  
3183  5D1E 1433         JHE     MNDSK2                  yep
3184            *
3185  5D20 D806         MOVB    R6,@ACOMND              send PDSK / UDSK / LDSK command to Arduino
3185  5D22 5FE8  
3186            
3187  5D24 0286         CI      R6,>0300                LDSK?
3187  5D26 0300  
3188  5D28 1303         JEQ     LDSK2                   yep
3189            *
3190  5D2A 0208 PUDSK2  LI      R8,12                   CALL length
3190  5D2C 000C  
3191  5D2E 1054 A9904   JMP     ACLBAS                  return to BASIC         
3192            *                       
3193  5D30 9820 LDSK2   CB      @K002,@CALLST
3193  5D32 432C  
3193  5D34 5FC6  
3194  5D36 13C0         JEQ     QNOPRM                  LDSK: >00; no DOAD mapped
3195            *
3196  5D38 04C2 NXTSCR  CLR     R2                      clear screen; position 0
3197  5D3A 06A0         BL      @VDPWRI
3197  5D3C 4310  
3198            *
3199  5D3E 0200         LI      R0,>8000                space + TI BASIC bias
3199  5D40 8000  
3200  5D42 06A0         BL      @VDPRPW
3200  5D44 4258  
3201  5D46 02C0         DATA    704                     704 positions to clear
3202            *
3203  5D48 0202         LI      R2,32                   start 2nd screen line; 1st is lost due to BASIC scroll
3203  5D4A 0020  
3204  5D4C 06A0 A9905   BL      @VDPWRI                 
3204  5D4E 4310  
3205            *       
3206  5D50 9820         CB      @K004,@CALLST           check Arduino LDSK / SDSK / LDIR / AHLP return code
3206  5D52 432E  
3206  5D54 5FC6  
3207  5D56 13B0         JEQ     QNOPRM                  "More" (>F0); blank DSK or done last file / help txt
3208            *
3209  5D58 06A0         BL      @DISSTS                 LDSK / SDSK / LDIR / AHLP output to screen
3209  5D5A 5E36  
3210            *
3211  5D5C 0222         AI      R2,32                   next screen position
3211  5D5E 0020  
3212  5D60 0282         CI      R2,640                  end of display area?
3212  5D62 0280  
3213  5D64 1303         JEQ     NXTPRP                  yes; show "more" symbol
3214            *
3215  5D66 05A0         INC     @RDINT                  generates interrupt for next file / help txt
3215  5D68 5FEA  
3216  5D6A 10F0         JMP     A9905   
3217            *       
3218  5D6C 0202 NXTPRP  LI      R2,702
3218  5D6E 02BE  
3219  5D70 06A0         BL      @VDPWRI
3219  5D72 4310  
3220  5D74 0205         LI      R5,>9E00                show ">", more file / help txt to display
3220  5D76 9E00  
3221  5D78 DBC5         MOVB    R5,@-2(R15)
3221  5D7A FFFE  
3222            *
3223  5D7C 06A0         BL      @CHKKEY
3223  5D7E 5E48  
3224            *
3225  5D80 05A0         INC     @RDINT                  generates interrupt for next file / help txt
3225  5D82 5FEA  
3226  5D84 10D9         JMP     NXTSCR
3227            *
3228            * MDSK / NDSK / RDSK / FGET / FPUT / ADSR / NDIR
3229            *
3230  5D86 05C8 MNDSK2  INCT    R8                      increment pointer
3231  5D88 06A0         BL      @VDPR2B                 get next two digits
3231  5D8A 4850  
3232            *
3233  5D8C 0286 QSTRNG  CI      R6,>1000                further check on RDSK / FGET / FPUT / ADSR
3233  5D8E 1000  
3234  5D90 1A18         JL      A9907                   no -> sneaky PDSK / UDSK don't belong here      
3235  5D92 0220         AI      R0,>3900                add 2's complement of >C700 =  only keep # of characters
3235  5D94 3900  
3236  5D96 1315         JEQ     A9907                   0 characters / empty string -> * INCORRECT COMMAND
3237  5D98 0280         CI      R0,8                    max 8 characters?
3237  5D9A 0008  
3238  5D9C 1B12         JH      A9907                   no -> * INCORRECT COMMAND
3239            *
3240  5D9E C100         MOV     R0,R4                   save # of characters
3241  5DA0 0205         LI      R5,CALLBF+2             pointer to DOAD / DSR name      
3241  5DA2 5FCA  
3242  5DA4 05C8         INCT    R8                      increment pointer
3243  5DA6 C088         MOV     R8,R2                   for VDPRD, address must be in R2
3244  5DA8 06A0         BL      @VDPRD                  set VDP READ address
3244  5DAA 431A  
3245  5DAC DD6F A9906   MOVB    @-1026(R15),*R5+        get character and save in CALL buffer
3245  5DAE FBFE  
3246  5DB0 0600         DEC     R0                      one less to go
3247  5DB2 16FC         JNE     A9906   
3248  5DB4 D560         MOVB    @K002,*R5               mark end of string with >00 (Arduino check for < 8 characters)
3248  5DB6 432C  
3249            *
3250  5DB8 D02F         MOVB    @-1026(R15),R0          get next token
3250  5DBA FBFE  
3251  5DBC 0280         CI      R0,>B600                is it a ")" ?
3251  5DBE B600  
3252  5DC0 1302         JEQ     A9908
3253  5DC2 0460 A9907   B       @ACLERR                 * INCORRECT COMMAND
3253  5DC4 5C98  
3254            *
3255  5DC6 0208 A9908   LI      R8,13                   prep RDSK / FGET / FPUT / ADSR CALL length ( CALL_XXXX("") )
3255  5DC8 000D  
3256  5DCA A204         A       R4,R8                   add # of characters in string
3257                    
3258  5DCC 0286         CI      R6,>1100                MDSK or NDSK?
3258  5DCE 1100  
3259  5DD0 1B01         JH      A9909                   no; jump and execute RDSK / FGET / FPUT / ADSR
3260  5DD2 05C8         INCT    R8                      adjust MDSK and NDSK CALL length
3261            *
3262  5DD4 D806 A9909   MOVB    R6,@ACOMND              command to Arduino
3262  5DD6 5FE8  
3263            *
3264  5DD8 9820 ACLBAS  CB      @CALLST,@K004           "More" or "AllGood" received from Arduino?      
3264  5DDA 5FC6  
3264  5DDC 432E  
3265  5DDE 1419         JHE     A9910                   yep
3266            *       
3267  5DE0 0205         LI      R5,GPLINT               no; GPL routine
3267  5DE2 006A  
3268  5DE4 06A0         BL      @GPLXML                 
3268  5DE6 5ED8  
3269  5DE8 56CD         DATA    SCROLL                  scroll screen
3270  5DEA 0202         LI      R2,736                  screen starting position for (error) message
3270  5DEC 02E0  
3271  5DEE 06A0         BL      @VDPWRI                 set VDP address
3271  5DF0 4310  
3272  5DF2 06A0         BL      @DISSTS                 show (error) message
3272  5DF4 5E36  
3273  5DF6 0205         LI      R5,GPLINT               GPL routine
3273  5DF8 006A  
3274  5DFA 06A0         BL      @GPLXML 
3274  5DFC 5ED8  
3275  5DFE 56CD         DATA    SCROLL                  scroll screen
3276            *
3277  5E00 9820         CB      @CALLST,@K007           error (status code 0 - 9)?
3277  5E02 5FC6  
3277  5E04 432D  
3278  5E06 1405         JHE     A9910                   no, informational; be silent    
3279            *
3280  5E08 0205         LI      R5,GPLINT               yes: let's make some noise
3280  5E0A 006A  
3281  5E0C 06A0         BL      @GPLXML
3281  5E0E 5ED8  
3282  5E10 03D6         DATA    HONK                    GPL routine"bad tone"
3283            *
3284  5E12 0286 A9910   CI      R6,>3500                TIME() ?
3284  5E14 3500  
3285  5E16 132D         JEQ     TIME2                   yes; see if we can assign date/time to NTP$
3286            *
3287  5E18 04C6 A9911   CLR     R6
3288  5E1A D1A0         MOVB    @ASUBCM,R6              any subcommand to execute?
3288  5E1C 5FE9  
3289  5E1E 1302         JEQ     A9912                   no
3290  5E20 D806         MOVB    R6,@ACOMND              yes; execute (currently only ARST)
3290  5E22 5FE8  
3291            *
3292  5E24 04E9 A9912   CLR     @>0050(R9)              clear error flag                
3292  5E26 0050  
3293  5E28 AA48         A       R8, @>002C(R9)          add call length to token pointer                
3293  5E2A 002C  
3294  5E2C 5A69         SZCB    @>0042(R9),@>0042(R9)   clear current token
3294  5E2E 0042  
3294  5E30 0042  
3295  5E32 0460         B       @RTURN1                 return to caller (i.e. TI-BASIC)
3295  5E34 4350  
3296            *       
3297            * Display data, status messages and errors
3298            *
3299  5E36 0205 DISSTS  LI      R5,CALLBF               start of file name buffer
3299  5E38 5FC8  
3300  5E3A 0206         LI      R6,32                   32 bytes / 1 screen row of data to display
3300  5E3C 0020  
3301  5E3E DBF5 A9913   MOVB    *R5+,@-2(R15)           store character in VDP screen memory
3301  5E40 FFFE  
3302  5E42 0606         DEC     R6
3303  5E44 16FC         JNE     A9913
3304  5E46 045B         B       *R11
3305            *
3306            * Quick key test to display next screen after ">"
3307            * Keyboard column 0 (= space enter <nc> fctn shift ctrl <nc>)
3308            * Code copy from Thierry's TI's Tech Pages site
3309            *
3310  5E48 C10C CHKKEY  MOV     R12,R4                  save R12
3311  5E4A 04C1         CLR     R1                      test column 0
3312  5E4C 020C         LI      R12,>0024               address for column selection
3312  5E4E 0024  
3313  5E50 30C1 A9914   LDCR    R1,3                    select column
3314  5E52 1FF2         TB      -14                     test R12 address >0008
3315  5E54 1607         JNE     A9915                   <SPACE>
3316  5E56 1FF3         TB      -13                     test R12 address >000A
3317  5E58 13FB         JEQ     A9914                   no key; test again
3318            *
3319  5E5A D820         MOVB    @K004,@CALLST           signal ENTER to LDIR() command
3319  5E5C 432E  
3319  5E5E 5FC6  
3320  5E60 020B         LI      R11,QNOPRM              leave without clearing screen
3320  5E62 5CB8  
3321            *
3322  5E64 C304 A9915   MOV     R4,R12                  restore R12
3323  5E66 0A24         SLA     R4,2                    debounce delay
3324  5E68 0604 A9916   DEC     R4                      key debounce
3325  5E6A 16FE         JNE     A9916                   debounce some more
3326            *
3327  5E6C 045B         B       *R11                    we got one; return for next screen
3328            *
3329            * prep for calling XML >16 and update BASIC variable NTP$               
3330            *
3331  5E6E 4E54 VARINF  TEXT    'NTP$'
3331  5E70 5024  
3332  5E72 0204 TIME2   LI      R4,VARINF               variable name for XML >16 in FAC
3332  5E74 5E6E  
3333  5E76 C149         MOV     R9,R5                   get scratchpad start address
3334  5E78 D974 A9917   MOVB    *R4+,@>004A(R5)         variable name in FAC
3334  5E7A 004A  
3335  5E7C 0585         INC     R5
3336  5E7E 0284         CI      R4,VARINF+4             done all chars?
3336  5E80 5E72  
3337  5E82 16FA         JNE     A9917                   
3338            *
3339  5E84 0205         LI      R5,>0400                variable length for XML >16 in @>8359
3339  5E86 0400  
3340  5E88 DA45         MOVB    R5,@>0059(R9)           
3340  5E8A 0059  
3341  5E8C 04E9         CLR     @>0089(R9)      
3341  5E8E 0089  
3342            *
3343  5E90 0205         LI      R5,XML16                ROM routine: find NTP$ in VDP symbol table (returns to GPL interpreter)
3343  5E92 15D6  
3344  5E94 06A0         BL      @GPLXML
3344  5E96 5ED8  
3345  5E98 2244         DATA    XMLRTN                  GPL "RTN", escaping GPL interpreter
3346            *
3347  5E9A 9A60         CB      @VARINF,@>004A(R9)      found NTP$ in VDP symbol table?
3347  5E9C 5E6E  
3347  5E9E 004A  
3348  5EA0 1318         JEQ     A9919                   no symbol table pointer; back to BASIC
3349            *
3350  5EA2 06A0         BL      @XML14                  ROM routine: get NTP$ VDP address and string length (returns through RT)
3350  5EA4 164E  
3351  5EA6 02A9         STWP    R9                      restore scratchpad pointer
3352  5EA8 0229         AI      R9,-224
3352  5EAA FF20  
3353            *       
3354  5EAC C169         MOV     @>0050(R9),R5           get string length
3354  5EAE 0050  
3355  5EB0 0285         CI      R5,16                   16 chars?
3355  5EB2 0010  
3356  5EB4 160E         JNE     A9919                   no NTP$ assignment for you
3357            *
3358  5EB6 C0A0         MOV     @>834E,R2               yes
3358  5EB8 834E  
3359  5EBA 06A0         BL      @VDPWRI                 set VDP write address
3359  5EBC 4310  
3360  5EBE 0205         LI      R5,CALLBF               CALL TIME data still in buffer
3360  5EC0 5FC8  
3361  5EC2 D0B5 A9918   MOVB    *R5+,R2                 read character
3362  5EC4 0222         AI      R2,>A000                remove TI BASIC bias
3362  5EC6 A000  
3363  5EC8 DBC2         MOVB    R2,@-2(R15)             save to NTP$ value space
3363  5ECA FFFE  
3364  5ECC 0285         CI      R5,CALLBF+16            done all 16 chars?
3364  5ECE 5FD8  
3365  5ED0 16F8         JNE     A9918                   no; one more
3366            *
3367  5ED2 10A2 A9919   JMP     A9911                   yes; back to BASIC
3368            *
3369            * execute GROM or XML routine (SCROLL, "bad sound" / HONK and XML >16)
3370            * DSR and GPL interpreter use same workspace (>83E0) so we need to save a few things
3371            *
3372  5ED4 0000 SAVGRA  BSS     2                       save current GROM address so we can return to BASIC
3373  5ED6 0000 SAVR11  BSS     2                       GPL interpreter uses R11
3374            *
3375  5ED8 D820 GPLXML  MOVB    @>9802,@SAVGRA          save current GROM address
3375  5EDA 9802  
3375  5EDC 5ED4  
3376  5EDE 1000         NOP
3377  5EE0 D820         MOVB    @>9802,@SAVGRA+1
3377  5EE2 9802  
3377  5EE4 5ED5  
3378  5EE6 0620         DEC     @SAVGRA                 GRMWA returns address + 1; decrease for correct address
3378  5EE8 5ED4  
3379            *
3380  5EEA D83B         MOVB    *R11+,@>9C02            set GPL routine address
3380  5EEC 9C02  
3381  5EEE 1000         NOP
3382  5EF0 D83B         MOVB    *R11+,@>9C02
3382  5EF2 9C02  
3383  5EF4 C80B         MOV     R11,@SAVR11             save final DSR return address
3383  5EF6 5ED6  
3384            *
3385  5EF8 020B         LI      R11,GXRTN               DSR return address after GPL routine
3385  5EFA 5F14  
3386  5EFC C80B         MOV     R11,@RTN5C              @>4028 is where XML >5C returns to
3386  5EFE 4028  
3387            *
3388  5F00 05E0         INCT    @>8373                  increase stack pointer
3388  5F02 8373  
3389  5F04 06C9         SWPB    R9                      
3390  5F06 D260         MOVB    @>8373,R9
3390  5F08 8373  
3391  5F0A 06C9         SWPB    R9                      complete stack pointer in R9
3392  5F0C 020B         LI      R11,XML5C               GROM pointer to >0F5C (= XML >5C)
3392  5F0E 105C  
3393  5F10 C64B         MOV     R11,*R9                 save GROM pointer on stack
3394            *
3395  5F12 0455         B       *R5                     execute GROM/ROM routine, return through GPL interpreter
3396            *
3397  5F14 D820 GXRTN   MOVB    @SAVGRA,@>9C02          and ... we're back; restore saved GROM address
3397  5F16 5ED4  
3397  5F18 9C02  
3398  5F1A 1000         NOP
3399  5F1C D820         MOVB    @SAVGRA+1,@>9C02
3399  5F1E 5ED5  
3399  5F20 9C02  
3400            *
3401  5F22 02A9         STWP    R9                      restore scratchpad pointer
3402  5F24 0229         AI      R9,-224
3402  5F26 FF20  
3403            *
3404  5F28 C2E0         MOV     @SAVR11,R11             restore R11
3404  5F2A 5ED6  
3405  5F2C 045B         B       *R11                    return to instruction after BL @GPLEXEC DATA statement
3406            *               
3407            * update FAT time/date for current DOAD after DSR Write / Format / Save
3408            *
3409  5F2E D820 NTPDT   MOVB    @NTPFAT+1,@ACOMND       "DSK NTP date/time update" command to Arduino           
3409  5F30 4027  
3409  5F32 5FE8  
3410  5F34 045B         B       *R11                    return to Format / Close
3411            *
3412            *----------------------------------------------------------------------------------
3413            * >5F36 - >5FB3: 126 free bytes remaining
3414            * >5FC2 - >5FD3 is DSK1-3 parameters storage
3415            * >5FD4 is the CALL() status byte
3416            * >5FD6 - >5FE7 is buffer storage for APEDSK99 CALL's
3417            * >5FE8 is the Arduino Command Register (TI BASIC CALL support)
3418            * Word >5FEA maps to the read counter (R6, to generate interrupts when reading data) 
3419            * Bytes >5FEE maps to the CRU emulation write register
3420            * Bytes >5FF0 to >5FFE map to the FDC emulation registers
3421            *-----------------------------------------------------------------------------------                                    
3422            *
3423  5F36 0000         END
3423            


 Assembly Complete - Errors: 0,  Warnings: 0


 ------ Symbol Listing ------

 A9901  ABS:5CCC A9901
 A9902  ABS:5CDE A9902
 A9903  ABS:5D08 A9903
 A9904  ABS:5D2E A9904
 A9905  ABS:5D4C A9905
 A9906  ABS:5DAC A9906
 A9907  ABS:5DC2 A9907
 A9908  ABS:5DC6 A9908
 A9909  ABS:5DD4 A9909
 A9910  ABS:5E12 A9910
 A9911  ABS:5E18 A9911
 A9912  ABS:5E24 A9912
 A9913  ABS:5E3E A9913
 A9914  ABS:5E50 A9914
 A9915  ABS:5E64 A9915
 A9916  ABS:5E68 A9916
 A9917  ABS:5E78 A9917
 A9918  ABS:5EC2 A9918
 A9919  ABS:5ED2 A9919
 ACHR   ABS:5C52 ACHR
 ACHR2  ABS:5CCE ACHR2
 ACLBAS ABS:5DD8 ACLBAS
 ACLERR ABS:5C98 ACLERR
 ACLPRP ABS:5C62 ACLPRP
 ACOMND ABS:5FE8 ACOMND
 ADDSEC ABS:46DE ADDSEC
 ADSR   ABS:5C34 ADSR
 AFDRPT ABS:52A2 AFDRPT
 AFPGPF ABS:51B8 AFPGPF
 AHLP   ABS:5C4C AHLP
 APSCTS ABS:463A APSCTS
 ARST   ABS:5C58 ARST
 ASUBCM ABS:5FE9 ASUBCM
 AVERSN ABS:4048 AVERSN
 CALLBF ABS:5FC8 CALLBF
 CALLST ABS:5FC6 CALLST
 CALSUB ABS:4332 CALSUB
 CDIR   ABS:5C3A CDIR
 CFNFDR ABS:5B64 CFNFDR
 CFSVIB ABS:5740 CFSVIB
 CHKKEY ABS:5E48 CHKKEY
 CLOSE  ABS:4FAA CLOSE
 CLRFBT ABS:455C CLRFBT
 CLSDIR ABS:55EA CLSDIR
 CMPFN  ABS:4816 CMPFN
 CPCKFN ABS:48EE CPCKFN
 CRFIL1 ABS:446A CRFIL1
 CRFIL2 ABS:4470 CRFIL2
 CRFIL3 ABS:447C CRFIL3
 CRUWRI ABS:5FEE CRUWRI
 DECDCI ABS:4B90 DECDCI
 DELETE ABS:4748 DELETE
 DISSTS ABS:5E36 DISSTS
 DSDRVS ABS:4330 DSDRVS
 DSKPRM ABS:5FB4 DSKPRM
 DSR01  ABS:40F2 DSR01
 DSR02  ABS:40FA DSR02
 DSR03  ABS:4104 DSR03
 DSR04  ABS:410E DSR04
 ECUSTM ABS:436A ECUSTM
 EDSR01 ABS:4D26 EDSR01
 EDSR02 ABS:4D34 EDSR02
 EDSR03 ABS:4D3A EDSR03
 EDSR04 ABS:4D40 EDSR04
 EPWRUP ABS:4118 EPWRUP
 ERROR1 ABS:42CE ERROR1
 ERROR3 ABS:4200 ERROR3
 ERROR4 ABS:426C ERROR4
 ERROR5 ABS:494C ERROR5
 ERROR6 ABS:4B02 ERROR6
 ERROR7 ABS:48F2 ERROR7
 ERROR8 ABS:4D92 ERROR8
 ERROR9 ABS:4DAE ERROR9
 ERRR10 ABS:55C6 ERRR10
 ESUB01 ABS:5810 ESUB01
 ESUB02 ABS:5820 ESUB02
 ESUB03 ABS:582A ESUB03
 ESUB04 ABS:5884 ESUB04
 ESUB05 ABS:5950 ESUB05
 ESUB06 ABS:59C0 ESUB06
 ESUB07 ABS:5A86 ESUB07
 ESUB08 ABS:5A32 ESUB08
 FDR2B1 ABS:484A FDR2B1
 FDR2B2 ABS:484E FDR2B2
 FDSKDR ABS:4864 FDSKDR
 FFDRDK ABS:4AE6 FFDRDK
 FFDRFN ABS:4B12 FFDRFN
 FFDROD ABS:4AE2 FFDROD
 FFDRVB ABS:4A9E FFDRVB
 FFDRVP ABS:51A8 FFDRVP
 FFFDR  ABS:5BAC FFFDR
 FFFDRV ABS:4A7E FFFDRV
 FFSBM  ABS:4C96 FFSBM
 FFSBMP ABS:4BD0 FFSBMP
 FFSVIB ABS:45B4 FFSVIB
 FGET   ABS:5C28 FGET
 FMTDSK ABS:4206 FMTDSK
 FNDFDR ABS:4ADC FNDFDR
 FNDRV  ABS:577A FNDRV
 FPUT   ABS:5C2E FPUT
 FRSCB1 ABS:4C9C FRSCB1
 FSCTOF ABS:4724 FSCTOF
 GPLINT ABS:006A GPLINT
 GPLXML ABS:5ED8 GPLXML
 GXRTN  ABS:5F14 GXRTN
 H001   ABS:413E H001
 H002   ABS:41A2 H002
 H003   ABS:41C2 H003
 H004   ABS:41D0 H004
 H005   ABS:41D4 H005
 H006   ABS:41EA H006
 H007   ABS:4222 H007
 H008   ABS:4232 H008
 H009   ABS:4240 H009
 H010   ABS:425A H010
 H011   ABS:429A H011
 H012   ABS:42BC H012
 H013   ABS:42E0 H013
 H014   ABS:430A H014
 H015   ABS:431E H015
 H016   ABS:438E H016
 H017   ABS:43B2 H017
 H018   ABS:43B8 H018
 H019   ABS:43DC H019
 H020   ABS:43E0 H020
 H021   ABS:43F4 H021
 H022   ABS:4492 H022
 H023   ABS:44EA H023
 H024   ABS:4506 H024
 H025   ABS:451C H025
 H026   ABS:4526 H026
 H027   ABS:4538 H027
 H028   ABS:4546 H028
 H029   ABS:454C H029
 H030   ABS:4584 H030
 H031   ABS:45B0 H031
 H032   ABS:45D2 H032
 H033   ABS:45DC H033
 H034   ABS:4600 H034
 H035   ABS:4614 H035
 H036   ABS:461E H036
 H037   ABS:464A H037
 H038   ABS:465E H038
 H039   ABS:4670 H039
 H040   ABS:46A6 H040
 H041   ABS:46AA H041
 H042   ABS:46B2 H042
 H043   ABS:46B4 H043
 H044   ABS:46C2 H044
 H045   ABS:46D2 H045
 H046   ABS:46DA H046
 H047   ABS:4722 H047
 H048   ABS:472E H048
 H049   ABS:4738 H049
 H050   ABS:4744 H050
 H051   ABS:4760 H051
 H052   ABS:4776 H052
 H053   ABS:4782 H053
 H054   ABS:47C6 H054
 H055   ABS:47F6 H055
 H056   ABS:481E H056
 H057   ABS:4842 H057
 H058   ABS:487C H058
 H059   ABS:4886 H059
 H060   ABS:488E H060
 H061   ABS:48DC H061
 H062   ABS:48E4 H062
 H063   ABS:48F8 H063
 H064   ABS:4906 H064
 H065   ABS:4912 H065
 H066   ABS:4942 H066
 H067   ABS:4976 H067
 H068   ABS:4998 H068
 H069   ABS:499C H069
 H070   ABS:49D4 H070
 H071   ABS:49E8 H071
 H072   ABS:49F8 H072
 H073   ABS:4A02 H073
 H074   ABS:4A58 H074
 H075   ABS:4A68 H075
 H076   ABS:4A6E H076
 H077   ABS:4A76 H077
 H078   ABS:4A9A H078
 H079   ABS:4AB8 H079
 H080   ABS:4AD8 H080
 H081   ABS:4AEE H081
 H082   ABS:4B08 H082
 H083   ABS:4B1E H083
 H084   ABS:4B80 H084
 H085   ABS:4B84 H085
 H086   ABS:4B8A H086
 H087   ABS:4BE4 H087
 H088   ABS:4BF6 H088
 H089   ABS:4C06 H089
 H090   ABS:4C12 H090
 H091   ABS:4C38 H091
 H092   ABS:4C42 H092
 H093   ABS:4C4A H093
 H094   ABS:4C70 H094
 H095   ABS:4C8C H095
 H096   ABS:4CC8 H096
 H097   ABS:4CD6 H097
 H098   ABS:4CD8 H098
 H099   ABS:4CDC H099
 H100   ABS:4CDE H100
 H101   ABS:4D06 H101
 H102   ABS:4D0E H102
 H103   ABS:4D44 H103
 H104   ABS:4D4A H104
 H105   ABS:4D70 H105
 H106   ABS:4DB4 H106
 H107   ABS:4DCA H107
 H108   ABS:4DD6 H108
 H109   ABS:4E08 H109
 H110   ABS:4E20 H110
 H111   ABS:4E24 H111
 H112   ABS:4E7A H112
 H113   ABS:4E7E H113
 H114   ABS:4EA2 H114
 H115   ABS:4EA6 H115
 H116   ABS:4ECA H116
 H117   ABS:4EF8 H117
 H118   ABS:4F50 H118
 H119   ABS:4F76 H119
 H120   ABS:4F7A H120
 H121   ABS:4FC0 H121
 H122   ABS:4FC4 H122
 H123   ABS:4FD0 H123
 H124   ABS:4FD6 H124
 H125   ABS:4FDE H125
 H126   ABS:5000 H126
 H127   ABS:501A H127
 H128   ABS:5036 H128
 H129   ABS:5044 H129
 H130   ABS:5068 H130
 H131   ABS:5070 H131
 H132   ABS:5094 H132
 H133   ABS:50D2 H133
 H134   ABS:50DA H134
 H135   ABS:50E4 H135
 H136   ABS:50FA H136
 H137   ABS:5110 H137
 H138   ABS:5180 H138
 H139   ABS:51F4 H139
 H140   ABS:5214 H140
 H141   ABS:521A H141
 H142   ABS:5276 H142
 H143   ABS:5286 H143
 H144   ABS:536E H144
 H145   ABS:53A2 H145
 H146   ABS:53B0 H146
 H147   ABS:53B6 H147
 H148   ABS:53F4 H148
 H149   ABS:53F8 H149
 H150   ABS:5416 H150
 H151   ABS:5422 H151
 H152   ABS:5444 H152
 H153   ABS:5454 H153
 H154   ABS:54CA H154
 H155   ABS:54F6 H155
 H156   ABS:5504 H156
 H157   ABS:5510 H157
 H158   ABS:551C H158
 H159   ABS:5532 H159
 H160   ABS:5544 H160
 H161   ABS:555E H161
 H162   ABS:5562 H162
 H163   ABS:5572 H163
 H164   ABS:5576 H164
 H165   ABS:559A H165
 H166   ABS:55A0 H166
 H167   ABS:55B0 H167
 H168   ABS:55CC H168
 H169   ABS:55D6 H169
 H170   ABS:5630 H170
 H171   ABS:5692 H171
 H172   ABS:569C H172
 H173   ABS:56A2 H173
 H174   ABS:56AA H174
 H175   ABS:56AC H175
 H176   ABS:56CA H176
 H177   ABS:56DA H177
 H178   ABS:56FC H178
 H179   ABS:5704 H179
 H180   ABS:5750 H180
 H181   ABS:5766 H181
 H182   ABS:576A H182
 H183   ABS:5770 H183
 H184   ABS:5774 H184
 H185   ABS:579C H185
 H186   ABS:57AC H186
 H187   ABS:57B6 H187
 H188   ABS:57E0 H188
 H189   ABS:57E8 H189
 H190   ABS:57EA H190
 H191   ABS:57F0 H191
 H192   ABS:57F2 H192
 H193   ABS:5806 H193
 H194   ABS:58B4 H194
 H195   ABS:5946 H195
 H196   ABS:594C H196
 H197   ABS:596A H197
 H198   ABS:5970 H198
 H199   ABS:5976 H199
 H200   ABS:5992 H200
 H201   ABS:5998 H201
 H202   ABS:599E H202
 H203   ABS:59B2 H203
 H204   ABS:59D6 H204
 H205   ABS:59F4 H205
 H206   ABS:5A2E H206
 H207   ABS:5A82 H207
 H208   ABS:5AD4 H208
 H209   ABS:5AFE H209
 H210   ABS:5B08 H210
 H211   ABS:5B20 H211
 H212   ABS:5B3C H212
 H213   ABS:5B40 H213
 H214   ABS:5B46 H214
 H215   ABS:5B4A H215
 H216   ABS:5B68 H216
 H217   ABS:5BC8 H217
 H218   ABS:5BE6 H218
 H219   ABS:5BFA H219
 HONK   ABS:03D6 HONK
 INSFDR ABS:47E4 INSFDR
 INT2FP ABS:57BE INT2FP
 K001   ABS:4186 K001
 K002   ABS:432C K002
 K004   ABS:432E K004
 K005   ABS:432F K005
 K007   ABS:432D K007
 K013   ABS:42DE K013
 K014   ABS:494A K014
 LASTRK ABS:42EC LASTRK
 LDIR   ABS:5C46 LDIR
 LDSK   ABS:5C10 LDSK
 LDSK2  ABS:5D30 LDSK2
 LOAD   ABS:53A6 LOAD
 LSTDRV ABS:5FC7 LSTDRV
 MDSK   ABS:5C16 MDSK
 MNDSK2 ABS:5D86 MNDSK2
 NDSK   ABS:5C1C NDSK
 NOCRU  ABS:4184 NOCRU
 NOPARM ABS:5C9C NOPARM
 NOPRM2 ABS:5CA8 NOPRM2
 NTPDT  ABS:5F2E NTPDT
 NTPFAT ABS:4026 NTPFAT
 NXTPRP ABS:5D6C NXTPRP
 NXTSCR ABS:5D38 NXTSCR
 OPCVEC ABS:4D78 OPCVEC
 OPEN   ABS:4D98 OPEN
 OPNDIR ABS:558C OPNDIR
 PABR2B ABS:4844 PABR2B
 PATTBL ABS:4046 PATTBL
 PDSK   ABS:5C04 PDSK
 PESB07 ABS:5A8C PESB07
 PRFDRS ABS:4F58 PRFDRS
 PRPFDO ABS:43FE PRPFDO
 PRPRTN ABS:4400 PRPRTN
 PUDSK2 ABS:5D2A PUDSK2
 PWRUP  ABS:40EC PWRUP
 QNOPRM ABS:5CB8 QNOPRM
 QSTRNG ABS:5D8C QSTRNG
 R0     ABS:0000 R0
 R1     ABS:0001 R1
 R10    ABS:000A R10
 R11    ABS:000B R11
 R12    ABS:000C R12
 R13    ABS:000D R13
 R14    ABS:000E R14
 R15    ABS:000F R15
 R2     ABS:0002 R2
 R3     ABS:0003 R3
 R4     ABS:0004 R4
 R5     ABS:0005 R5
 R6     ABS:0006 R6
 R7     ABS:0007 R7
 R8     ABS:0008 R8
 R9     ABS:0009 R9
 RBANB  ABS:5498 RBANB
 RCOFCB ABS:5328 RCOFCB
 RDATA  ABS:5FF6 RDATA
 RDDIR  ABS:5600 RDDIR
 RDFDR1 ABS:4A24 RDFDR1
 RDFDR2 ABS:4A20 RDFDR2
 RDINT  ABS:5FEA RDINT
 RDOFSC ABS:4604 RDOFSC
 RDSEC1 ABS:4A0E RDSEC1
 RDSK   ABS:5C22 RDSK
 READ   ABS:4FB4 READ
 RETERR ABS:4978 RETERR
 RFDRST ABS:51D4 RFDRST
 RFDRVB ABS:592C RFDRVB
 RFNPTR ABS:5B86 RFNPTR
 RMFPTR ABS:47B4 RMFPTR
 RNFISE ABS:5232 RNFISE
 RRFDR  ABS:524E RRFDR
 RRNPAB ABS:51E8 RRNPAB
 RRSEC  ABS:503A RRSEC
 RSTAT  ABS:5FF0 RSTAT
 RSTDRV ABS:42A0 RSTDRV
 RTN5C  ABS:4028 RTN5C
 RTURN1 ABS:4350 RTURN1
 RVRVDP ABS:43B6 RVRVDP
 RWIND1 ABS:5352 RWIND1
 RWIND2 ABS:5380 RWIND2
 RWSEC  ABS:4A28 RWSEC
 RWSECA ABS:4A2A RWSECA
 RWSECB ABS:4A2C RWSECB
 RWVIB  ABS:49AC RWVIB
 SAVE   ABS:5448 SAVE
 SAVGRA ABS:5ED4 SAVGRA
 SAVR11 ABS:5ED6 SAVR11
 SCROLL ABS:56CD SCROLL
 SECRW1 ABS:4188 SECRW1
 SELDRV ABS:4272 SELDRV
 SMAP   ABS:5C40 SMAP
 SNDCMD ABS:42E4 SNDCMD
 SP2VDP ABS:5BF0 SP2VDP
 STATUS ABS:54CC STATUS
 SUB01  ABS:4010 SUB01
 SUB02  ABS:4016 SUB02
 SUB03  ABS:401C SUB03
 SUB04  ABS:4022 SUB04
 SUB05  ABS:402A SUB05
 SUB06  ABS:4030 SUB06
 SUB07  ABS:4036 SUB07
 SUB08  ABS:403C SUB08
 SUB09  ABS:404C SUB09
 SUB10  ABS:4056 SUB10
 SUB11  ABS:4060 SUB11
 SUB12  ABS:406A SUB12
 SUB13  ABS:4074 SUB13
 SUB14  ABS:407E SUB14
 SUB15  ABS:4088 SUB15
 SUB16  ABS:4092 SUB16
 SUB17  ABS:409C SUB17
 SUB18  ABS:40A6 SUB18
 SUB19  ABS:40B0 SUB19
 SUB20  ABS:40BA SUB20
 SUB21  ABS:40C4 SUB21
 SUB22  ABS:40CE SUB22
 SUB23  ABS:40D8 SUB23
 SUB24  ABS:40E2 SUB24
 SVDPRD ABS:43EC SVDPRD
 SVDPWR ABS:43E2 SVDPWR
 SVRVDP ABS:438A SVRVDP
 TIME   ABS:5C5E TIME
 TIME2  ABS:5E72 TIME2
 UCOFCB ABS:52C6 UCOFCB
 UDSK   ABS:5C0A UDSK
 UFNCB  ABS:5B4E UFNCB
 UPDBF  ABS:4570 UPDBF
 UPDCLI ABS:4BAC UPDCLI
 UPDFCB ABS:4F82 UPDFCB
 UPDFDR ABS:4550 UPDFDR
 URFFDR ABS:52F2 URFFDR
 USTRNG ABS:5CF0 USTRNG
 UWFLVB ABS:5864 UWFLVB
 VARINF ABS:5E6E VARINF
 VDP2SP ABS:5BE0 VDP2SP
 VDPR2B ABS:4850 VDPR2B
 VDPRD  ABS:431A VDPRD
 VDPRPW ABS:4258 VDPRPW
 VDPWRI ABS:4310 VDPWRI
 VECRTN ABS:4382 VECRTN
 WCOMND ABS:5FF8 WCOMND
 WDATA  ABS:5FFE WDATA
 WFDRPB ABS:5016 WFDRPB
 WRFDR  ABS:4A1A WRFDR
 WRITE  ABS:509E WRITE
 WROFSC ABS:4624 WROFSC
 WRSEC1 ABS:4A10 WRSEC1
 WSECTR ABS:5FFC WSECTR
 WTCPT1 ABS:4264 WTCPT1
 XML14  ABS:164E XML14
 XML16  ABS:15D6 XML16
 XML5C  ABS:105C XML5C
 XMLRTN ABS:2244 XMLRTN
