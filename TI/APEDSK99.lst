Asm994a TMS99000 Assembler - v3.010

                * Asm994a Generated Register Equates
                *
      0000 0000 R0      EQU     0 
      0000 0001 R1      EQU     1 
      0000 0002 R2      EQU     2 
      0000 0003 R3      EQU     3 
      0000 0004 R4      EQU     4 
      0000 0005 R5      EQU     5 
      0000 0006 R6      EQU     6 
      0000 0007 R7      EQU     7 
      0000 0008 R8      EQU     8 
      0000 0009 R9      EQU     9 
      0000 000A R10     EQU     10
      0000 000B R11     EQU     11
      0000 000C R12     EQU     12
      0000 000D R13     EQU     13
      0000 000E R14     EQU     14
      0000 000F R15     EQU     15
                *
   1            *===============================================================================================================
   2            * TI DISK CONTROLLER ROM   >4000-5FFF
   3            * 
   4            * initial commented disassembly by Thierry Nouspikel
   5            * (see http://www.unige.ch/medecine/nouspikel/ti99/titechpages.htm)
   6            *
   7            * and
   8            * 
   9            * Monty Schmidt's book: TI Technical Drive
  10            *
  11            * adapted for APEDSK99 by Jochen Buur
  12            * github.com/jambuur/APEDSK99
  13            *
  14            * v12r: support for Double Density / 80 tracks (max 1440 AU's)
  15            *================================================================================================================
  16  0000 5FB4 DSKPRM  EQU     >5FB4                   per DSKx: Mbyte #sectors, Lbyte #sectors, #sectors/track, #tracks, #sides
  17  0000 5FC6 CALLST  EQU     >5FC6                   CALL() execution status: finished, still active, error
  18  0000 5FC7 LSTDRV  EQU     >5FC7                   remember last drive accessed for LDSK without argument
  19  0000 5FC8 CALLBF  EQU     >5FC8                   2-way buffer for TI BASIC CALL's (1 screen line, 32 characters)
  20  0000 5FE8 ACOMND  EQU     >5FE8                   APEDSK99-specific Command register
  21  0000 5FE9 ASUBCM  EQU     >5FE9                   APEDSK99-specific SubCommand register
  22  0000 5FEA RDINT   EQU     >5FEA                   issue read interrupt
  23  0000 5FEE CRUWRI  EQU     >5FEE                   emulated 8 CRU output bits
  24  0000 5FF0 RSTAT   EQU     >5FF0                   read FD1771 Status register
  25  0000 5FF6 RDATA   EQU     >5FF6                   read FD1771 Data register
  26  0000 5FF8 WCOMND  EQU     >5FF8                   write FD1771 Command register
  27  0000 5FFC WSECTR  EQU     >5FFC                   write FD1771 Sector register
  28  0000 5FFE WDATA   EQU     >5FFE                   write FD1771 Data register
  29            *
  30  0000 164E XML14   EQU     >164E                   ROM address for XML >14
  31  0000 15D6 XML16   EQU     >15D6                   ROM address for XML >16
  32            *
  33  0000 4409 XMLBC   EQU     >4409                   GROM address for XML >BC 
  34  0000 A018 RTNBC   EQU     >A018                   return address for XML >BC in high memory expansion
  35            *
  36  0000 006A GPLINT  EQU     >006A                   jump to GROM interpreter for SCROLL / HONK
  37  0000 2244 XMLRTN  EQU     >2244                   jump to GROM interpreter for RTN (after executing XML >14 / >16 routine)
  38  0000 56CD SCROLL  EQU     >56CD                   GROM address for scroll routine
  39  0000 0036 HONK    EQU     >0036                   GROM address for bad sound / HONK routine
  40            *
  41                    AORG    >4000                   DSR memory block
  42            *
  43  4000 AA           BYTE    >AA                     standard header mark
  44  4001 02           BYTE    >02                     version 2
  45  4002 0000         DATA    >0000                   no programs
  46  4004 40F6         DATA    PWRUP                   power-up chain ptr
  47  4006 0000         DATA    >0000                   programs chain ptr (none)
  48  4008 40FC         DATA    DSR01                   DSR chain ptr
  49  400A 4010         DATA    SUB01                   subprograms chain ptr
  50  400C 0000         DATA    >0000                   ISR chain ptr (none)
  51  400E 0000         DATA    >0000                   
  52            *
  53  4010 4016 SUB01   DATA    SUB02                   link to next subprogram
  54  4012 5822         DATA    ESUB01                  address of that one
  55  4014 0110         DATA    >0110                   subprogram name: >10 (sector R/W)
  56  4016 401C SUB02   DATA    SUB03                   
  57  4018 5832         DATA    ESUB02                  
  58  401A 0111         DATA    >0111                   subprogram >11 (format disk)
  59  401C 4022 SUB03   DATA    SUB04                   
  60  401E 583C         DATA    ESUB03                  
  61  4020 0112         DATA    >0112                   subprogram >12 (file un/protect)
  62  4022 4028 SUB04   DATA    SUB05                   
  63  4024 5896         DATA    ESUB04                  
  64  4026 0113 NTPFAT  DATA    >0113                   subprogram >13 (file rename); doubles as FAT update flag
  65            *
  66  4028 402E SUB05   DATA    SUB06                   
  67  402A 5962         DATA    ESUB05                  
  68  402C 0114         DATA    >0114                   subprogram >14 (file direct input)              
  69  402E 4034 SUB06   DATA    SUB07                   
  70  4030 59D2         DATA    ESUB06                  
  71  4032 0115         DATA    >0115                   subprogram >15 (file direct output)
  72  4034 403A SUB07   DATA    SUB08                   
  73  4036 5A98         DATA    ESUB07                  
  74  4038 0116         DATA    >0116                   subprogram >16 (number of files)
  75  403A 404C SUB08   DATA    SUB09                   
  76  403C 5A44         DATA    ESUB08                  
  77  403E 05           BYTE    >05                     
  78  403F 4649         TEXT    'FILES'                 same as >16, called from Basic
  78  4041 4C45  
  78  4043 53    
  79            *
  80  4044 0400 PATTBL  DATA    >0400                   TI BASIC VDP RAM address for Pattern Table; change before calling ACHR from assembly
  81  4046 7631 AVERSN  TEXT    'v12r'                  APEDSK99 version string (ARST)
  81  4048 3272  
  82  404A 0000 XBASRT  DATA    >0000                   CALL LINK return address (Extended Basic)
  83            *
  84  404C 4056 SUB09   DATA    SUB10
  85  404E 5C16         DATA    PDSK
  86  4050 04           BYTE    >04
  87  4051 5044         TEXT    'PDSK'                  Protect DSKx (apply adhesive tab)
  87  4053 534B  
  88  4055 0000         EVEN
  89  4056 4060 SUB10   DATA    SUB11                   
  90  4058 5C1C         DATA    UDSK
  91  405A 04           BYTE    >04
  92  405B 5544         TEXT    'UDSK'                  Un-protect DSKx (remove adhesive tab)
  92  405D 534B  
  93  405F 0000         EVEN
  94  4060 406A SUB11   DATA    SUB12
  95  4062 5C22         DATA    LDSK
  96  4064 04           BYTE    >04
  97  4065 4C44         TEXT    'LDSK'                  List files on DSKx
  97  4067 534B  
  98  4069 0000         EVEN
  99  406A 4074 SUB12   DATA    SUB13
 100  406C 5C28         DATA    MDSK
 101  406E 04           BYTE    >04
 102  406F 4D44         TEXT    'MDSK'                  Map DOAD to DSKx
 102  4071 534B  
 103  4073 0000         EVEN
 104  4074 407E SUB13   DATA    SUB14
 105  4076 5C2E         DATA    NDSK
 106  4078 04           BYTE    >04
 107  4079 4E44         TEXT    'NDSK'                  reName mapped DSKx
 107  407B 534B  
 108  407D 0000         EVEN
 109  407E 4088 SUB14   DATA    SUB15
 110  4080 5C34         DATA    RDSK
 111  4082 04           BYTE    >04
 112  4083 5244         TEXT    'RDSK'                  Remove DOAD from SD card
 112  4085 534B  
 113  4087 0000         EVEN
 114  4088 4092 SUB15   DATA    SUB16
 115  408A 5C3A         DATA    FGET
 116  408C 04           BYTE    >04
 117  408D 4647         TEXT    'FGET'                  Load DOAD from FTP server
 117  408F 4554  
 118  4091 0000         EVEN
 119  4092 409C SUB16   DATA    SUB17
 120  4094 5C40         DATA    FPUT
 121  4096 04           BYTE    >04
 122  4097 4650         TEXT    'FPUT'                  Save DOAD to FTP server
 122  4099 5554  
 123  409B 0000         EVEN
 124  409C 40A6 SUB17   DATA    SUB18
 125  409E 5C46         DATA    ADSR
 126  40A0 04           BYTE    >04
 127  40A1 4144         TEXT    'ADSR'                  APEDSK99 DSR load / initialise / set default
 127  40A3 5352  
 128  40A5 0000         EVEN
 129  40A6 40B0 SUB18   DATA    SUB19
 130  40A8 5C4C         DATA    CDIR
 131  40AA 04           BYTE    >04
 132  40AB 4344         TEXT    'CDIR'                  Change working /Folder
 132  40AD 4952  
 133  40AF 0000         EVEN
 134  40B0 40BA SUB19   DATA    SUB20
 135  40B2 5C52         DATA    SMAP
 136  40B4 04           BYTE    >04
 137  40B5 534D         TEXT    'SMAP'                  Show DOAD mappings for DSK[1-3] + available working /Folders
 137  40B7 4150  
 138  40B9 0000         EVEN
 139  40BA 40C4 SUB20   DATA    SUB21
 140  40BC 5C58         DATA    LDIR
 141  40BE 04           BYTE    >04
 142  40BF 4C44         TEXT    'LDIR'                  List DOAD files on SD card
 142  40C1 4952  
 143  40C3 0000         EVEN
 144  40C4 40CE SUB21   DATA    SUB22
 145  40C6 5C5E         DATA    AHLP
 146  40C8 04           BYTE    >04
 147  40C9 4148         TEXT    'AHLP'                  APEDSK99 CALL help screen
 147  40CB 4C50  
 148  40CD 0000         EVEN
 149  40CE 40D8 SUB22   DATA    SUB23
 150  40D0 5C64         DATA    ACHR
 151  40D2 04           BYTE    >04
 152  40D3 4143         TEXT    'ACHR'                  Load real lower case characters
 152  40D5 4852  
 153  40D7 0000         EVEN
 154  40D8 40E2 SUB23   DATA    SUB24
 155  40DA 5C6A         DATA    ARST
 156  40DC 04           BYTE    >04
 157  40DD 4152         TEXT    'ARST'                  APEDSK99 Reset
 157  40DF 5354  
 158  40E1 0000         EVEN
 159  40E2 40EC SUB24   DATA    SUB25
 160  40E4 5C70         DATA    TIME
 161  40E6 04           BYTE    >04
 162  40E7 5449         TEXT    'TIME'                  NTP date/time display / assign to NTP$
 162  40E9 4D45  
 163  40EB 0000         EVEN
 164  40EC 0000 SUB25   DATA    >0000                   APEDSK99 configuration (IP address etc)
 165  40EE 5C76         DATA    ACFG
 166  40F0 04           BYTE    >04
 167  40F1 4143         TEXT    'ACFG'
 167  40F3 4647  
 168  40F5 0000         EVEN
 169            *
 170  40F6 0000 PWRUP   DATA    >0000                   power-up chain (no more)
 171  40F8 4122         DATA    EPWRUP                  address of power-up routine
 172  40FA 0000         DATA    >0000                   no name
 173            *                                       
 174  40FC 4104 DSR01   DATA    DSR02                   DSR chain
 175  40FE 4D38         DATA    EDSR01                  address of DSR
 176  4100 03           BYTE    >03                     name size
 177  4101 4453         TEXT    'DSK'                   DSR name
 177  4103 4B    
 178  4104 410E DSR02   DATA    DSR03                   
 179  4106 4D46         DATA    EDSR02                  
 180  4108 04           BYTE    >04                     
 181  4109 4453         TEXT    'DSK1'                  
 181  410B 4B31  
 182  410D 0000         EVEN                            
 183  410E 4118 DSR03   DATA    DSR04                   
 184  4110 4D4C         DATA    EDSR03                  
 185  4112 04           BYTE    >04                     
 186  4113 4453         TEXT    'DSK2'                  
 186  4115 4B32  
 187  4117 0000         EVEN                            
 188  4118 0000 DSR04   DATA    >0000                   no more
 189  411A 4D52         DATA    EDSR04                  
 190  411C 04           BYTE    >04                     
 191  411D 4453         TEXT    'DSK3'                  
 191  411F 4B33  
 192  4121 0000         EVEN            
 193            *
 194            *=====================================
 195            * Power-up routine
 196            *=====================================                                          
 197            *
 198  4122 028C EPWRUP  CI      R12,>1000               Dhr. F.G. Kaal check: are we powering up 1st CRU (>1000) peripheral?
 198  4124 1000  
 199  4126 1633         JNE     NOCRU                   nope; return
 200            *
 201  4128 C1CB         MOV     R11,R7                  yes; save return address
 202  412A 02A9         STWP    R9                      get workspace (should be >83E0)
 203  412C 0229         AI      R9,-224                 point to top of scratch-pad mem (>8300)
 203  412E FF20  
 204  4130 C0A9         MOV     @>0070(R9),R2           highest free address in vdp mem (>8370)
 204  4132 0070  
 205  4134 C002         MOV     R2,R0                   save it
 206  4136 0222         AI      R2,-2088                we'll need >828 bytes
 206  4138 F7D8  
 207  413A CA42         MOV     R2,@>0070(R9)           update address
 207  413C 0070  
 208  413E 0582         INC     R2
 209  4140 06A0         BL      @VDPWRI                 set VDP address
 209  4142 431A  
 210  4144 0201         LI      R1,2088                 
 210  4146 0828  
 211  4148 04EF H001    CLR     @-2(R15)                clear these >828 bytes
 211  414A FFFE  
 212  414C 0601         DEC     R1                      
 213  414E 16FC         JNE     H001                    
 214  4150 06A0         BL      @VDPWRI                 set VDP address (same)
 214  4152 431A  
 215  4154 0203         LI      R3,>AA03                        
 215  4156 AA03  
 216  4158 DBC3         MOVB    R3,@-2(R15)             write buffer ID mark
 216  415A FFFE  
 217  415C 1000         NOP                             
 218  415E DBC0         MOVB    R0,@-2(R15)             write old highest free address
 218  4160 FFFE  
 219  4162 06C0         SWPB    R0
 220  4164 DBC0         MOVB    R0,@-2(R15)
 220  4166 FFFE  
 221  4168 1000         NOP                             
 222  416A DBCC         MOVB    R12,@-2(R15)            write CRU address (>1000 for APEDSK99)
 222  416C FFFE  
 223  416E 06C3         SWPB    R3                      
 224  4170 DBC3         MOVB    R3,@-2(R15)             write number of files (3)
 224  4172 FFFE  
 225  4174 06A0         BL      @PRPRTN                 preparation routine
 225  4176 4412  
 226  4178 06A0         BL      @CALSUB                 call subroutine
 226  417A 433C  
 227  417C 42AA         DATA    RSTDRV                  reset all drives
 228  417E 04E9         CLR     @>0054(R9)              name length = 0 for power-up
 228  4180 0054  
 229  4182 0429         BLWP    @>005A(R9)              retrieve R7 (saved by PRPRTN)
 229  4184 005A  
 230  4186 0011         DATA    >0011                   put it into R11
 231  4188 CA60         MOV     @K001,@>006C(R9)        ???
 231  418A 4190  
 231  418C 006C  
 232  418E 045B NOCRU   B       *R11                    return
 233            *                               
 234  4190 0404 K001    DATA    >0404                   
 235            *
 236            *---------------------------------------
 237            * Sector read/write
 238            *---------------------------------------                                        
 239            *
 240  4192 DA60 SECRW1  MOVB    @K002,@>0050(R9)        APEDSK99: no error
 240  4194 4336  
 240  4196 0050  
 241  4198 06A0         BL      @SELDRV                 select drive
 241  419A 427C  
 242            *
 243  419C C069         MOV     @>004A(R9),R1           sector #
 243  419E 004A  
 244  41A0 0281         CI      R1,>05A0                APEDSK99: max 1440 (DS/DD/40T or DS/SD/80T)?
 244  41A2 05A0  
 245  41A4 1A03         JL      H002                    APEDSK99: yes; sector# within range
 246  41A6 06A0         BL      @ERROR1                 APEDSK99: no -> "device error"
 246  41A8 42D8  
 247  41AA 0600         DATA    >0600   
 248            
 249  41AC C801 H002    MOV     R1,@WSECTR              APEDSK99: sector# to FD1771 write sector register (16bits)
 249  41AE 5FFC  
 250            *
 251  41B0 C0A9         MOV     @>004E(R9),R2           data buffer address
 251  41B2 004E  
 252  41B4 D029         MOVB    @>004D(R9),R0           read or write ?
 252  41B6 004D  
 253  41B8 1312         JEQ     H005                    write
 254  41BA 06A0         BL      @VDPWRI                 read FD = write to VDP buffer
 254  41BC 431A  
 255  41BE 0206         LI      R6,256                  
 255  41C0 0100  
 256  41C2 C806         MOV     R6,@RDINT               APEDSK99: interrupt Arduino for read operation 
 256  41C4 5FEA  
 257  41C6 06A0         BL      @SNDCMD                 send command
 257  41C8 42EE  
 258  41CA 8800         DATA    >8800                   APEDSK99: read sector
 259            *
 260  41CC D020 H003    MOVB    @RDATA,R0               get 1 byte from FDC
 260  41CE 5FF6  
 261  41D0 DBC0         MOVB    R0,@-2(R15)             save it to VDP
 261  41D2 FFFE  
 262  41D4 0620         DEC     @RDINT                  APEDSK99: interrupt Arduino for read operation
 262  41D6 5FEA  
 263  41D8 16F9         JNE     H003                    next byte
 264            *
 265  41DA 0460 H004    B       @RTURN1                 return
 265  41DC 435A  
 266            
 267            *       
 268  41DE 06A0 H005    BL      @VDPRD                  write to FD = read from VDP buffer
 268  41E0 4324  
 269  41E2 0206         LI      R6,256                  256 bytes to write
 269  41E4 0100  
 270            *
 271            * APEDSK99: the first byte to be written needs to be in the data register before the write command is given
 272            *
 273  41E6 D02F         MOVB    @-1026(R15),R0          APEDSK99: get a byte from data buffer
 273  41E8 FBFE  
 274  41EA D800         MOVB    R0,@WDATA               APEDSK99: write first byte to data register
 274  41EC 5FFE  
 275  41EE 06A0         BL      @SNDCMD                 send command
 275  41F0 42EE  
 276  41F2 A800         DATA    >A800                   APEDSK99: write sector
 277            *
 278  41F4 D02F H006    MOVB    @-1026(R15),R0          get a byte from data buffer
 278  41F6 FBFE  
 279  41F8 D800         MOVB    R0,@WDATA               pass it to data register
 279  41FA 5FFE  
 280  41FC 0606         DEC     R6                      
 281  41FE 16FA         JNE     H006                    next byte
 282            *
 283  4200 06A0         BL      @WTCPT1                 APEDSK99: check for Write Protect
 283  4202 426E  
 284  4204 0A20         SLA     R0,2                    APEDSK99: WP bit in Carry
 285  4206 1801         JOC     ERROR3                  write protect: error 34
 286  4208 10E8         JMP     H004                    APEDSK99: no need to verify             
 287            *                                       
 288  420A 06A0 ERROR3  BL      @ERROR1                 error 34 (Write Protect)
 288  420C 42D8  
 289  420E 3400         DATA    >3400                   
 290            *
 291            *--------------------------------------------------------------------
 292            * Format disk - APEDSK99: we don't do any physical formatting anymore
 293            *--------------------------------------------------------------------
 294            *
 295  4210 04E9 FMTDSK  CLR     @>004A(R9)              called by subprogram >11
 295  4212 004A  
 296            *                                       
 297  4214 5A60         SZCB    @K004,@>004C(R9)        clear DSR version flags
 297  4216 4338  
 297  4218 004C  
 298            *
 299  421A 06A0         BL      @SELDRV                 select drive
 299  421C 427C  
 300            *
 301  421E D029         MOVB    @>004D(R9),R0           APEDSK99: get # of tracks
 301  4220 004D  
 302  4222 9829         CB      @>0051(R9),@K005        APEDSK99: double sided?
 302  4224 0051  
 302  4226 4339  
 303  4228 1601         JNE     H007                    APEDSK99: single-side
 304            *
 305  422A 0A10         SLA     R0,1                    times two (since 2 sides)
 306            *
 307  422C 0980 H007    SRL     R0,8                    APEDSK99: make it a byte
 308  422E 0206         LI      R6,9                    APEDSK99: start with single density
 308  4230 0009  
 309  4232 9829         CB      @>0050(R9),@K005        APEDSK99: double density required?
 309  4234 0050  
 309  4236 4339  
 310  4238 1601         JNE     H008                    APEDSK99: no, leave R6 alone
 311  423A 0A16         SLA     R6,1                    APEDSK99: yes, R6*2
 312            *               
 313  423C 3806 H008    MPY     R6,R0                   APEDSK99: #sectors/track * #tracks
 314  423E 0281         CI      R1,>05A0                APEDSK99: >1440 sectors?
 314  4240 05A0  
 315  4242 1203         JLE     H009                    APEDSK99: nope; continue
 316  4244 06A0         BL      @ERROR1                 APEDSK99: yes; "device error"
 316  4246 42D8  
 317  4248 0600         DATA    >0600   
 318            *
 319  424A CA41 H009    MOV     R1,@>004A(R9)           pass total # of sectors per disk
 319  424C 004A  
 320  424E 06C6         SWPB    R6
 321  4250 DA46         MOVB    R6,@>004D(R9)           APEDSK99: pass # of sectors per track
 321  4252 004D  
 322  4254 DA60         MOVB    @K002,@>0050(R9)        no error
 322  4256 4336  
 322  4258 0050  
 323            *
 324  425A 06A0         BL      @NTPDT                  APEDSK99: update DOAD FAT time/date
 324  425C 5F58  
 325            *
 326  425E 0460         B       @RTURN1                 return
 326  4260 435A  
 327            *                                       
 328                                                    
 329  4262 C1BB VDPRPW  MOV     *R11+,R6                VDP repeated write
 330  4264 DBC0 H010    MOVB    R0,@-2(R15)
 330  4266 FFFE  
 331  4268 0606         DEC     R6                      byte in R0
 332  426A 16FC         JNE     H010                    number of repeats in data word
 333  426C 045B         B       *R11                    
 334            *
 335  426E D020 WTCPT1  MOVB    @RSTAT,R0               get status. APEDSK99: Not Ready >80 / Write Protect >40
 335  4270 5FF0  
 336  4272 1101         JLT     ERROR4                  drive not ready. APEDSK99: Not Ready set when DOAD file is unavailable
 337  4274 045B         B       *R11                    
 338            *
 339  4276 06A0 ERROR4  BL      @ERROR1                 exit with error code 6, reseting all drives
 339  4278 42D8  
 340  427A 0600         DATA    >0600                   
 341            *                                       
 342  427C C1CB SELDRV  MOV     R11,R7                  select a drive
 343  427E C0A9         MOV     @>0058(R9),R2
 343  4280 0058  
 344  4282 0222         AI      R2,-10                  point to drive info
 344  4284 FFF6  
 345  4286 04C0         CLR     R0                      
 346  4288 D029         MOVB    @>004C(R9),R0           get drive #
 346  428A 004C  
 347  428C 130B         JEQ     H011                    can't be >00: error #7
 348  428E 0280         CI      R0,>0300                        
 348  4290 0300  
 349  4292 1B08         JH      H011                    drive number can't be higher than 3: error #7
 350  4294 06A0         BL      @VDPWRI                 set VDP to write, address in R2
 350  4296 431A  
 351  4298 DBC0         MOVB    R0,@-2(R15)             modify last drive accessed              
 351  429A FFFE  
 352            *
 353  429C 0A10         SLA     R0,1                    APEDSK99: bit 0 is side select, 1-3 is drive #
 354  429E D800         MOVB    R0,@CRUWRI              APEDSK99: select drive
 354  42A0 5FEE  
 355  42A2 0457         B       *R7                     
 356            *                                       
 357  42A4 06A0 H011    BL      @ERROR1                 exit with error #7
 357  42A6 42D8  
 358  42A8 0700         DATA    >0700                   
 359            *                                       
 360  42AA 5820 RSTDRV  SZCB    @DSDRVS,@CRUWRI         APEDSK99: reset all drives including side
 360  42AC 433A  
 360  42AE 5FEE  
 361  42B0 D820         MOVB    @K013,@WCOMND           send Force Interrupt with no interrupt flag set
 361  42B2 42E8  
 361  42B4 5FF8  
 362  42B6 C0A9         MOV     @>0058(R9),R2           ptr to VIB buffer
 362  42B8 0058  
 363  42BA 0222         AI      R2,-10                  now points to drive info buffer
 363  42BC FFF6  
 364  42BE 06A0         BL      @VDPWRI                 set VDP to write to address in R2
 364  42C0 431A  
 365  42C2 0200         LI      R0,4                    
 365  42C4 0004  
 366  42C6 DBC0 H012    MOVB    R0,@-2(R15)             write four >00 (i.e. clear drive info)
 366  42C8 FFFE  
 367  42CA 0600         DEC     R0                      
 368  42CC 16FC         JNE     H012                    
 369  42CE DA60         MOVB    @K002,@>0050(R9)        no error
 369  42D0 4336  
 369  42D2 0050  
 370  42D4 0460         B       @RTURN1                 get return address from stack
 370  42D6 435A  
 371            *                                       
 372  42D8 C01B ERROR1  MOV     *R11,R0                 exit with error
 373  42DA DA40         MOVB    R0,@>0050(R9)           place err code in >8350
 373  42DC 0050  
 374  42DE 0280         CI      R0,>0600                check if device error
 374  42E0 0600  
 375  42E2 1603         JNE     H013                    no: exit
 376  42E4 06A0         BL      @SNDCMD                 yes: reset drives
 376  42E6 42EE  
 377            *
 378  42E8 0000 K013    DATA    >0000                   APEDSK99: send Restore command
 379            *
 380  42EA 0460 H013    B       @RTURN1                 return to caller (address from stack)
 380  42EC 435A  
 381            *                               
 382  42EE C03B SNDCMD  MOV     *R11+,R0                send command to FDC from data word
 383  42F0 D800         MOVB    R0,@WCOMND              send command
 383  42F2 5FF8  
 384  42F4 045B         B       *R11                    
 385            *                                       
 386  42F6 04C0 LASTRK  CLR     R0                      get last track # for this drive
 387  42F8 D029         MOVB    @>004C(R9),R0           get drive #
 387  42FA 004C  
 388  42FC 130B         JEQ     H014                    can't be 0
 389  42FE 06C0         SWPB    R0                      
 390  4300 0280         CI      R0,3                    
 390  4302 0003  
 391  4304 1B07         JH      H014                    can't be higher than 3
 392  4306 C0A9         MOV     @>0058(R9),R2                   
 392  4308 0058  
 393  430A 0222         AI      R2,-10                  point to last drive accessed
 393  430C FFF6  
 394  430E A080         A       R0,R2                   point to last track for this drive
 395  4310 0460         B       @VDPRD                  prepare VDP to read from address in R2
 395  4312 4324  
 396            *                                       
 397  4314 06A0 H014    BL      @ERROR1                 exit with error code 7
 397  4316 42D8  
 398  4318 0700         DATA    >0700                   
 399            *                                       
 400  431A 0262 VDPWRI  ORI     R2,>4000                set VDP address to write
 400  431C 4000  
 401  431E 0242         ANDI    R2,>7FFF                not to a register
 401  4320 7FFF  
 402  4322 1002         JMP     H015                    
 403  4324 0242 VDPRD   ANDI    R2,>3FFF                set VDP address to read
 403  4326 3FFF  
 404  4328 06C2 H015    SWPB    R2                      
 405  432A D7C2         MOVB    R2,*R15                 write address
 406  432C 06C2         SWPB    R2                      
 407  432E D7C2         MOVB    R2,*R15                 
 408  4330 0242         ANDI    R2,>3FFF                        
 408  4332 3FFF  
 409  4334 045B         B       *R11                    
 410            *                                       
 411  4336 00   K002    BYTE    >00                     
 412  4337 09   K007    BYTE    >09                                             
 413  4338 F0   K004    BYTE    >F0                     
 414  4339 02   K005    BYTE    2
 415  433A 0F   DSDRVS  BYTE    >0F                     APEDSK99: deselect all drives + side (reset CRUWRI bits 7,6,5 and 4)                    
 416            *
 417  433B 0000         EVEN
 418            *                               
 419  433C 0669 CALSUB  DECT    @>0066(R9)              call subroutine, return address in stack
 419  433E 0066  
 420  4340 C2A9         MOV     @>0066(R9),R10
 420  4342 0066  
 421  4344 0429         BLWP    @>005A(R9)              set VDP to write to address in R10
 421  4346 005A  
 422  4348 0143         DATA    >0143                   
 423  434A C2BB         MOV     *R11+,R10               get next data word
 424  434C 06CB         SWPB    R11                     write return address to VDP
 425  434E DBCB         MOVB    R11,@-2(R15)                    
 425  4350 FFFE  
 426  4352 06CB         SWPB    R11                     
 427  4354 DBCB         MOVB    R11,@-2(R15)                    
 427  4356 FFFE  
 428  4358 045A         B       *R10                    branch to address in data word
 429            *                               
 430  435A C2E0 RTURN1  MOV     @XBASRT,R11             APEDSK99: CALL LINK from Extended Basic?
 430  435C 404A  
 431  435E 1301         JEQ     H015A                   nope
 432  4360 045B         B       *R11                    yes; return to ExBas program
 433            *
 434  4362 C2E9 H015A   MOV     @>0066(R9),R11          get return address from VDP stack
 434  4364 0066  
 435  4366 0429         BLWP    @>005A(R9)              
 435  4368 005A  
 436  436A 0162         DATA    >0162                   set VDP to read from address in R11
 437  436C D2EF         MOVB    @-1026(R15),R11                 
 437  436E FBFE  
 438  4370 06CB         SWPB    R11                     
 439  4372 D2EF         MOVB    @-1026(R15),R11                 
 439  4374 FBFE  
 440  4376 05E9         INCT    @>0066(R9)                      
 440  4378 0066  
 441  437A 045B         B       *R11                    
 442            *
 443            *---------------------------------------
 444            * Custom routines, dealing with VDP memory
 445            * Format is >pppr where r is routine number (0-3)
 446            * and ppp contains parameters
 447            * The workspace it >8300. Called by BLWP @>005A(9).
 448            *---------------------------------------                                        
 449            *
 450  437C C28D ECUSTM  MOV     R13,R10                 save wregs ptr
 451  437E C23E         MOV     *R14+,R8                get next data word
 452  4380 C248         MOV     R8,R9                   save it
 453  4382 0949         SRL     R9,4                    keep parameter
 454  4384 0248         ANDI    R8,3                    four possible operations
 454  4386 0003  
 455  4388 A208         A       R8,R8                   make it a word ptr
 456  438A C2ED         MOV     @>001E(R13),R11         get old R15, i.e. VDP port (>8C02)
 456  438C 001E  
 457  438E C228         MOV     @VECRTN(R8),R8          get vector for operation
 457  4390 4394  
 458  4392 0458         B       *R8                     branch to it
 459            *                                       
 460  4394 439C VECRTN  DATA    SVRVDP                  save registers to VDP stack
 461  4396 43C8         DATA    RVRVDP                  retrieve registers
 462  4398 43FE         DATA    SVDPRD                  set VDP address to read
 463  439A 43F4         DATA    SVDPWR                  set VDP address to write
 464            *                                       
 465  439C 022A SVRVDP  AI      R10,22                  0: save registers in VDP mem
 465  439E 0016  
 466  43A0 0919 H016    SRL     R9,1                    start with R12
 467  43A2 1710         JNC     H017                    bits in >ppp tell which register to save (R0-R11)
 468  43A4 064C         DECT    R12                     previous address in VDP stack (grows down)
 469  43A6 C21A         MOV     *R10,R8                 get register contents
 470  43A8 06CC         SWPB    R12                     set VDP address to write
 471  43AA D6CC         MOVB    R12,*R11                R12 is >8366: VDP stack ptr
 472  43AC 06CC         SWPB    R12                     
 473  43AE 026C         ORI     R12,>4000                       
 473  43B0 4000  
 474  43B2 D6CC         MOVB    R12,*R11                        
 475  43B4 06C8         SWPB    R8                      save register to VDP mem
 476  43B6 DAC8         MOVB    R8,@-2(R11)                     
 476  43B8 FFFE  
 477  43BA 06C8         SWPB    R8                      
 478  43BC DAC8         MOVB    R8,@-2(R11)                     
 478  43BE FFFE  
 479  43C0 C249         MOV     R9,R9                   more to come?
 480  43C2 1317         JEQ     H020                    no:return
 481  43C4 064A H017    DECT    R10                     point to previous register
 482  43C6 10EC         JMP     H016                    
 483            *                               
 484  43C8 0A49 RVRVDP  SLA     R9,4                    1: retrieve registers from VDP mem
 485  43CA 0A19 H018    SLA     R9,1                    each bit tells whether to load
 486  43CC 1710         JNC     H019                    don't retrieve that one
 487  43CE 06CC         SWPB    R12                     set VDP address to read
 488  43D0 D6CC         MOVB    R12,*R11                R12 is >8366: VDP stack ptr
 489  43D2 06CC         SWPB    R12                     
 490  43D4 024C         ANDI    R12,>3FFF                       
 490  43D6 3FFF  
 491  43D8 D6CC         MOVB    R12,*R11                        
 492  43DA 1000         NOP                             
 493  43DC D22B         MOVB    @-1026(R11),R8          get a 2-byte value from VDP
 493  43DE FBFE  
 494  43E0 06C8         SWPB    R8                      
 495  43E2 D22B         MOVB    @-1026(R11),R8                  
 495  43E4 FBFE  
 496  43E6 C688         MOV     R8,*R10                 save it to register
 497  43E8 05CC         INCT    R12                     increment ptr (stack grows downwards)
 498  43EA C249         MOV     R9,R9                   more to come?
 499  43EC 1302         JEQ     H020                    no: return
 500  43EE 05CA H019    INCT    R10                     next register
 501  43F0 10EC         JMP     H018                    
 502  43F2 0380 H020    RTWP                            
 503            *                                       
 504  43F4 A24D SVDPWR  A       R13,R9                  2: set VDP for a write
 505  43F6 C219         MOV     *R9,R8                  
 506  43F8 0268         ORI     R8,>4000                get address from reg in >..p2 (*2)
 506  43FA 4000  
 507  43FC 1004         JMP     H021                    
 508            *                                       
 509  43FE A24D SVDPRD  A       R13,R9                  3: set VDP for a read
 510  4400 C219         MOV     *R9,R8
 511  4402 0248         ANDI    R8,>3FFF                get register from reg in >..p3 (*2)
 511  4404 3FFF  
 512  4406 06C8 H021    SWPB    R8                      set VDP address
 513  4408 D6C8         MOVB    R8,*R11                 
 514  440A 06C8         SWPB    R8                      
 515  440C D6C8         MOVB    R8,*R11                 
 516  440E 0380         RTWP                            
 517            *
 518            *---------------------------------------
 519            * Preparation subroutine
 520            * Sets up the 4 custom subroutines
 521            * Gets a few pointers to VDP buffers
 522            *  >8358: copy of VIB  >8366: VDP stack ptr (grows down from drive info)
 523            *  >8354: PAB          >8356: ptr to end-of-buffer
 524            *---------------------------------------                                        
 525            *
 526  4410 05C7 PRPFDO  INCT    R7                      stop scanning upon return
 527  4412 C28B PRPRTN  MOV     R11,R10                 save return address
 528  4414 02A9         STWP    R9                      get workspace (should be >83E0)
 529  4416 0229         AI      R9,-224                 top of scratch/pad mem (>8300)
 529  4418 FF20  
 530  441A 0200         LI      R0,ECUSTM               entry to 4 custom routines
 530  441C 437C  
 531  441E CA40         MOV     R0,@>005C(R9)           put it in >835C
 531  4420 005C  
 532  4422 C009         MOV     R9,R0                   
 533  4424 0220         AI      R0,>004E                workspace for these four (>834E)
 533  4426 004E  
 534  4428 CA40         MOV     R0,@>005A(R9)           put it in >835A
 534  442A 005A  
 535            *                                       
 536  442C C229         MOV     @>0070(R9),R8           highest free address in VDP mem
 536  442E 0070  
 537  4430 05C8         INCT    R8                      point to end-of-buffer word
 538  4432 06A0         BL      @VDPR2B                 read 2 bytes from VDP address R8, into R0
 538  4434 4862  
 539  4436 C088         MOV     R8,R2                   save current R8
 540  4438 C200         MOV     R0,R8                   get end-of-buffer word
 541  443A 0228         AI      R8,-266                 yes: point to volume information block
 541  443C FEF6  
 542  443E CA48         MOV     R8,@>0058(R9)           save it in >8358
 542  4440 0058  
 543  4442 0228         AI      R8,-10                  point to disk drive info (drive #, last tracks)
 543  4444 FFF6  
 544  4446 CA48         MOV     R8,@>0066(R9)           save in >8366: VDP stack ptr (DECT before writing)
 544  4448 0066  
 545  444A 0429         BLWP    @>005A(R9)              save R7 (return address)
 545  444C 005A  
 546  444E 0100         DATA    >0100                   
 547  4450 C1E9         MOV     @>0056(R9),R7           ptr to PAB: end of DSR name
 547  4452 0056  
 548  4454 C0C7         MOV     R7,R3                   save it
 549  4456 61E9         S       @>0054(R9),R7           start of DSR name
 549  4458 0054  
 550  445A CA42         MOV     R2,@>0056(R9)           >8356: ptr to end-of-buffer word in VDP mem
 550  445C 0056  
 551  445E 0607         DEC     R7                      point to name length byte
 552  4460 04C2         CLR     R2                      
 553  4462 0429         BLWP    @>005A(R9)              set VDP to read from address in R2
 553  4464 005A  
 554  4466 00E2         DATA    >00E2                   
 555  4468 D0AF         MOVB    @-1026(R15),R2          get name length byte
 555  446A FBFE  
 556  446C 06C2         SWPB    R2                      make it a word
 557  446E 60A9         S       @>0054(R9),R2           minus DSR name size: lenght of .parameters
 557  4470 0054  
 558  4472 0227         AI      R7,-9                   point to top of PAB
 558  4474 FFF7  
 559  4476 CA47         MOV     R7,@>0054(R9)           save it in >8354
 559  4478 0054  
 560  447A 045A         B       *R10                    
 561            *                               
 562  447C 06A0 CRFIL1  BL      @CALSUB                 create file
 562  447E 433C  
 563  4480 4AEE         DATA    FNDFDR                  find a FDR in disk
 564  4482 C104 CRFIL2  MOV     R4,R4                   found?
 565  4484 1604         JNE     CRFIL3                  no
 566  4486 06A0         BL      @CALSUB                 yes: delete old file
 566  4488 433C  
 567  448A 45C6         DATA    FFSVIB                  free file sector in VIB bitmap
 568  448C 1045         JMP     H024                    clear its FDR
 569            *                               
 570  448E 06A0 CRFIL3  BL      @INSFDR                 new file: insert a FDR in sector 1
 570  4490 47F6  
 571  4492 0701         SETO    R1                      
 572  4494 06A0         BL      @CALSUB                 call subroutine
 572  4496 433C  
 573  4498 4BE2         DATA    FFSBMP                  find a free sector in VIB bitmap
 574  449A C000         MOV     R0,R0                   found?
 575  449C 1603         JNE     H022                    yes: # in R0
 576  449E 06A0         BL      @ERROR5                 no: update data, then return with error
 576  44A0 495E  
 577  44A2 8000         DATA    >8000                   memory full (APEDSK99: doubles as subcommand flag)
 578            *                               
 579  44A4 0429 H022    BLWP    @>005A(R9)              set VDP to write
 579  44A6 005A  
 580  44A8 0103         DATA    >0103                   address in R8
 581  44AA DBC0         MOVB    R0,@-2(R15)             write sector # for FDR in sector 1
 581  44AC FFFE  
 582  44AE 06C0         SWPB    R0                      
 583  44B0 DBC0         MOVB    R0,@-2(R15)                     
 583  44B2 FFFE  
 584  44B4 06C0         SWPB    R0                      
 585  44B6 C069         MOV     @>0056(R9),R1           ptr to FDR in VDP buffers
 585  44B8 0056  
 586  44BA 0221         AI      R1,-4                   ptr to sector # for FDR
 586  44BC FFFC  
 587  44BE 0429         BLWP    @>005A(R9)              set VDP to write
 587  44C0 005A  
 588  44C2 0023         DATA    >0023                   address in R1
 589  44C4 DBC0         MOVB    R0,@-2(R15)             write sector # for FDR in VDP buffer
 589  44C6 FFFE  
 590  44C8 06C0         SWPB    R0                      
 591  44CA DBC0         MOVB    R0,@-2(R15)                     
 591  44CC FFFE  
 592  44CE 0221         AI      R1,3                    ptr to drive #
 592  44D0 0003  
 593  44D2 0429         BLWP    @>005A(R9)              set VDP to write
 593  44D4 005A  
 594  44D6 0023         DATA    >0023                   address in R1
 595  44D8 DBC6         MOVB    R6,@-2(R15)             write drive # before FDR in VDP buffer
 595  44DA FFFE  
 596  44DC 04C2         CLR     R2                      code for write
 597  44DE 0581         INC     R1                      
 598  44E0 06A0         BL      @CALSUB                 call subroutine
 598  44E2 433C  
 599  44E4 4A22         DATA    WRSEC1                  write sector 1
 600  44E6 C169         MOV     @>0058(R9),R5           ptr to VIB in VDP buffers
 600  44E8 0058  
 601  44EA 04C4         CLR     R4                      sector 0
 602  44EC 06A0         BL      @CALSUB                 call subroutine
 602  44EE 433C  
 603  44F0 4A3A         DATA    RWSEC                   write VIB to sector 0
 604  44F2 C0C5         MOV     R5,R3                   copy filename from compare buffer to FDR
 605  44F4 0223         AI      R3,257                  ptr to file compare buffer
 605  44F6 0101  
 606  44F8 0202         LI      R2,10                   10 chars per filename
 606  44FA 000A  
 607  44FC 0429 H023    BLWP    @>005A(R9)              set VDP to read
 607  44FE 005A  
 608  4500 0062         DATA    >0062                   address in R3
 609  4502 D02F         MOVB    @-1026(R15),R0          get 1 char
 609  4504 FBFE  
 610  4506 0583         INC     R3                      increment source ptr
 611  4508 0429         BLWP    @>005A(R9)              set VDP to write
 611  450A 005A  
 612  450C 0023         DATA    >0023                   address in R1
 613  450E DBC0         MOVB    R0,@-2(R15)             copy 1 char
 613  4510 FFFE  
 614  4512 0581         INC     R1                      increment destination ptr
 615  4514 0602         DEC     R2                      # of chars in R2
 616  4516 16F2         JNE     H023                    next
 617            *
 618  4518 06A0 H024    BL      @NTPDT                  APEDSK99: update DOAD FAT time/date
 618  451A 5F58  
 619            *
 620  451C C069         MOV     @>0056(R9),R1           FDR ptr
 620  451E 0056  
 621  4520 0221         AI      R1,10                   skip filename
 621  4522 000A  
 622  4524 0202         LI      R2,246                  remaining bytes in FDR
 622  4526 00F6  
 623  4528 0429         BLWP    @>005A(R9)              set VDP to write
 623  452A 005A  
 624  452C 0023         DATA    >0023                   address in R1
 625  452E DBC2 H025    MOVB    R2,@-2(R15)             write >00
 625  4530 FFFE  
 626  4532 0602         DEC     R2                      clear remainder of new FDR
 627  4534 16FC         JNE     H025                    next byte
 628  4536 1010         JMP     H028                    write FDR to disk return to caller
 629            *                                       
 630  4538 C169 H026    MOV     @>0056(R9),R5           check if FDR must be updated
 630  453A 0056  
 631  453C 0429         BLWP    @>005A(R9)              set VDP to read
 631  453E 005A  
 632  4540 00A2         DATA    >00A2                   address in R5
 633  4542 D12F         MOVB    @-1026(R15),R4          get filename in file ctrl block
 633  4544 FBFE  
 634  4546 1101         JLT     H027                    flag: FDR was modified, update it
 635  4548 100A         JMP     H029                    
 636  454A 0244 H027    ANDI    R4,>7F00                clear flag bit
 636  454C 7F00  
 637  454E 0429         BLWP    @>005A(R9)              st VDP to write
 637  4550 005A  
 638  4552 00A3         DATA    >00A3                   address in R5
 639  4554 DBC4         MOVB    R4,@-2(R15)             write back filename without flag bit
 639  4556 FFFE  
 640  4558 04C2 H028    CLR     R2                      code for write
 641  455A 0460         B       @WRFDR                  write FDR to disk
 641  455C 4A2C  
 642  455E 0460 H029    B       @RTURN1                 return to caller
 642  4560 435A  
 643            *                               
 644  4562 06A0 UPDFDR  BL      @CALSUB                 update FDR + data
 644  4564 433C  
 645  4566 4582         DATA    UPDBF                   update data buffer if necessary
 646  4568 06A0         BL      @CALSUB                 call subroutine
 646  456A 433C  
 647  456C 4538         DATA    H026                    update FDR if necessary
 648  456E C169 CLRFBT  MOV     @>0056(R9),R5                   
 648  4570 0056  
 649  4572 04C6         CLR     R6                      
 650  4574 0429         BLWP    @>005A(R9)              set VDP to write
 650  4576 005A  
 651  4578 00A3         DATA    >00A3                   address in R5
 652  457A DBC6         MOVB    R6,@-2(R15)             clr first byte of filename in FDR
 652  457C FFFE  
 653  457E 0460         B       @RWVIB                  
 653  4580 49BE  
 654            *                                       
 655  4582 C129 UPDBF   MOV     @>0056(R9),R4           check if data buffer must be updated
 655  4584 0056  
 656  4586 0604         DEC     R4                      
 657  4588 0429         BLWP    @>005A(R9)              set VDP to read
 657  458A 005A  
 658  458C 0082         DATA    >0082                   address in R4
 659  458E D06F         MOVB    @-1026(R15),R1          get drive #
 659  4590 FBFE  
 660  4592 1101         JLT     H030                    flag: must be updated
 661  4594 1016         JMP     H031                    no need to update: return
 662  4596 0241 H030    ANDI    R1,>7F00                erase flag
 662  4598 7F00  
 663  459A 0429         BLWP    @>005A(R9)              set VDP to write
 663  459C 005A  
 664  459E 0083         DATA    >0083                   address in R4
 665  45A0 DBC1         MOVB    R1,@-2(R15)             write back drive # without flag
 665  45A2 FFFE  
 666  45A4 0224         AI      R4,-5                   point to current logical record offset
 666  45A6 FFFB  
 667  45A8 0429         BLWP    @>005A(R9)              set VDP to read
 667  45AA 005A  
 668  45AC 0082         DATA    >0082                   address in R4
 669  45AE D0EF         MOVB    @-1026(R15),R3          get current logical record offset
 669  45B0 FBFE  
 670  45B2 06C3         SWPB    R3                      
 671  45B4 D0EF         MOVB    @-1026(R15),R3                  
 671  45B6 FBFE  
 672  45B8 06C3         SWPB    R3                      
 673  45BA C1C4         MOV     R4,R7                   
 674  45BC 0227         AI      R7,262                  point to data buffer area
 674  45BE 0106  
 675  45C0 103A         JMP     WROFSC                  
 676  45C2 0460 H031    B       @RTURN1                 return to caller
 676  45C4 435A  
 677            *                               
 678  45C6 C0A9 FFSVIB  MOV     @>0056(R9),R2           free file sectors in VIB bitmap
 678  45C8 0056  
 679  45CA 0222         AI      R2,12                   
 679  45CC 000C  
 680  45CE 0429         BLWP    @>005A(R9)              set VDP to read
 680  45D0 005A  
 681  45D2 0042         DATA    >0042                   address in R2
 682  45D4 D02F         MOVB    @-1026(R15),R0          get file status byte from FDR
 682  45D6 FBFE  
 683  45D8 0240         ANDI    R0,>0800                write protected?
 683  45DA 0800  
 684  45DC 1303         JEQ     H032                    no
 685  45DE 06A0         BL      @ERROR5                 update data if needed, the return with error
 685  45E0 495E  
 686  45E2 2000         DATA    >2000                   write protected
 687            *                                       
 688  45E4 C229 H032    MOV     @>0056(R9),R8           get ptr to FDR
 688  45E6 0056  
 689  45E8 0228         AI      R8,28                   point to clusters list
 689  45EA 001C  
 690  45EC 0704         SETO    R4                      previous offset
 691  45EE 06A0 H033    BL      @DECDCI                 decode cluster info: sector in R1, offset in R2
 691  45F0 4BA2  
 692  45F2 0228         AI      R8,3                    next cluster ptr
 692  45F4 0003  
 693  45F6 C041         MOV     R1,R1                   
 694  45F8 130C         JEQ     H034                    sector 0 = no more clusters
 695  45FA C002         MOV     R2,R0                   total offset
 696  45FC 6084         S       R4,R2                   minus previous cluster offset = cluster size
 697  45FE C100         MOV     R0,R4                   new previous cluster offset
 698  4600 06A0         BL      @CALSUB                 call subroutine
 698  4602 433C  
 699  4604 4CAE         DATA    FRSCB1                  free sectors in bitmap (from R1, # in R2)
 700  4606 C048         MOV     R8,R1                   
 701  4608 6069         S       @>0056(R9),R1                   
 701  460A 0056  
 702  460C 0281         CI      R1,>0100                end of FDR reached?
 702  460E 0100  
 703  4610 16EE         JNE     H033                    not yet
 704  4612 0460 H034    B       @RTURN1                 return to caller
 704  4614 435A  
 705            *                                       
 706  4616 06A0 RDOFSC  BL      @FDR2B1                 read a sector from offset in file
 706  4618 485C  
 707  461A 000E         DATA    14                      get # of sectors
 708  461C 80C0         C       R0,R3                   is desired sector in file?
 709  461E 1B03         JH      H035                    yes
 710  4620 06A0         BL      @ERROR5                 no: update data, then return with error
 710  4622 495E  
 711  4624 A000         DATA    >A000                   past end-of-file
 712  4626 06A0 H035    BL      @CALSUB                 call subroutine
 712  4628 433C  
 713  462A 4736         DATA    FSCTOF                  find sector from cluster list
 714  462C A101         A       R1,R4                   put sector in R4
 715  462E 0702         SETO    R2                      code for read
 716  4630 C147 H036    MOV     R7,R5                   buffer ptr
 717  4632 0460         B       @RWSEC                  read/write sector
 717  4634 4A3A  
 718            *                                       
 719  4636 0429 WROFSC  BLWP    @>005A(R9)              write sector to offset in file offset in R3
 719  4638 005A  
 720  463A 8100         DATA    >8100                   save R0 and R7
 721  463C 06A0         BL      @CALSUB                 call subroutine
 721  463E 433C  
 722  4640 464C         DATA    APSCTS                  append enough sectors to reach that offset
 723  4642 0429         BLWP    @>005A(R9)              retrieve R0 and R7
 723  4644 005A  
 724  4646 8101         DATA    >8101                   
 725  4648 04C2         CLR     R2                      code for write
 726  464A 10F2         JMP     H036                    write sector
 727            *                               
 728  464C 06A0 APSCTS  BL      @FDR2B1                 append sector(s) to a file to get offset in R3
 728  464E 485C  
 729  4650 000E         DATA    14                      get # of sect from FDR
 730            *                                       
 731  4652 80C0         C       R0,R3                   is desired sector in file?
 732  4654 1B47         JH      H045                    yes: find it and return
 733  4656 C000         MOV     R0,R0                   
 734  4658 1301         JEQ     H037                    empty file
 735  465A 0600         DEC     R0                      last sector #
 736  465C C143 H037    MOV     R3,R5                   save desired sector offset
 737  465E C0C0         MOV     R0,R3                   last sector in file
 738  4660 06A0         BL      @CALSUB                 call subroutine
 738  4662 433C  
 739  4664 4736         DATA    FSCTOF                  find sector # from offset in file
 740  4666 0429         BLWP    @>005A(R9)              save R1 (sector #)
 740  4668 005A  
 741  466A 4000         DATA    >4000                   
 742  466C A044         A       R4,R1                   # of last sector in cluster
 743  466E C105         MOV     R5,R4                   offset of desired sector
 744  4670 06A0 H038    BL      @CALSUB                 call subroutine
 744  4672 433C  
 745  4674 4BE2         DATA    FFSBMP                  find free sector in bitmap, starting from R1
 746  4676 C000         MOV     R0,R0                   found?
 747  4678 1604         JNE     H039                    yes: # in R0
 748  467A C142         MOV     R2,R5                   no: save # of sectors
 749  467C 06A0         BL      @ADDSEC                 update FDR
 749  467E 46F0  
 750  4680 101B         JMP     H040                    return with memory full
 751            *                                       
 752  4682 C041 H039    MOV     R1,R1                   
 753  4684 1320         JEQ     H043                    empty cluster
 754  4686 0581         INC     R1                      one more sector in cluster
 755  4688 8040         C       R0,R1                   same as the one found in bitmap?
 756  468A 131C         JEQ     H042                    yes: just increase cluster size
 757  468C 0429         BLWP    @>005A(R9)              no: retrieve R1 (sector #)
 757  468E 005A  
 758  4690 4001         DATA    >4001                   
 759  4692 0429         BLWP    @>005A(R9)              save R0 + R2
 759  4694 005A  
 760  4696 A000         DATA    >A000                   
 761  4698 06A0         BL      @UPDCLI                 update current cluster info
 761  469A 4BBE  
 762  469C 0429         BLWP    @>005A(R9)              retrieve R0 + R2
 762  469E 005A  
 763  46A0 A001         DATA    >A001                   
 764  46A2 0228         AI      R8,3                    ptr to next cluster info
 764  46A4 0003  
 765  46A6 C048         MOV     R8,R1                   
 766  46A8 6069         S       @>0056(R9),R1           current FDR size
 766  46AA 0056  
 767  46AC 0281         CI      R1,>0100                room enough?
 767  46AE 0100  
 768  46B0 1605         JNE     H041                    yes
 769  46B2 06A0         BL      @CALSUB                 no: call subroutine
 769  46B4 433C  
 770  46B6 4CA8         DATA    FFSBM                   free sector in bitmap
 771  46B8 0460 H040    B       @ERROR6                 return with memory full
 771  46BA 4B14  
 772            *                                       
 773  46BC C040 H041    MOV     R0,R1                   new sector #
 774  46BE 0429         BLWP    @>005A(R9)              save R1
 774  46C0 005A  
 775  46C2 4000         DATA    >4000                   
 776  46C4 1007 H042    JMP     H044                    make a new cluster
 777            *                                       
 778  46C6 0429 H043    BLWP    @>005A(R9)              retrieve R1
 778  46C8 005A  
 779  46CA 4001         DATA    >4001                   
 780  46CC 0429         BLWP    @>005A(R9)              save R0
 780  46CE 005A  
 781  46D0 8000         DATA    >8000                   
 782  46D2 0702         SETO    R2                      empty file: start from offset 0
 783  46D4 C040 H044    MOV     R0,R1                   sector #
 784  46D6 0582         INC     R2                      increment cluster size
 785  46D8 8102         C       R2,R4                   enough?
 786  46DA 16CA         JNE     H038                    no: get one more sector
 787  46DC C144         MOV     R4,R5                   
 788  46DE 06A0         BL      @ADDSEC                 add sector to FDR
 788  46E0 46F0  
 789  46E2 1004         JMP     H046                    done
 790            *                               
 791  46E4 06A0 H045    BL      @CALSUB                 call subroutine
 791  46E6 433C  
 792  46E8 4736         DATA    FSCTOF                  find a sector from offset in file
 793  46EA A101         A       R1,R4                   last sector in cluster
 794  46EC 0460 H046    B       @RTURN1                 return to caller
 794  46EE 435A  
 795            *                                       
 796  46F0 C28B ADDSEC  MOV     R11,R10                 add sector to FDR
 797  46F2 C101         MOV     R1,R4                   
 798  46F4 0429         BLWP    @>005A(R9)              retrieve R1
 798  46F6 005A  
 799  46F8 4001         DATA    >4001                   
 800  46FA C041         MOV     R1,R1                   sector #
 801  46FC 131B         JEQ     H047                    none: return
 802  46FE 06A0         BL      @UPDCLI                 write info for R1 cluster
 802  4700 4BBE  
 803  4702 C0A9         MOV     @>0056(R9),R2           pointer to FDR
 803  4704 0056  
 804  4706 0429         BLWP    @>005A(R9)              set VDP to read
 804  4708 005A  
 805  470A 0042         DATA    >0042                   address in R2
 806  470C D06F         MOVB    @-1026(R15),R1          first char of filename
 806  470E FBFE  
 807  4710 0261         ORI     R1,>8000                flag
 807  4712 8000  
 808  4714 0429         BLWP    @>005A(R9)              set VDP to write
 808  4716 005A  
 809  4718 0043         DATA    >0043                   address in R2
 810  471A DBC1         MOVB    R1,@-2(R15)                     
 810  471C FFFE  
 811  471E 0222         AI      R2,14                   ptr to # of sectors
 811  4720 000E  
 812  4722 0585         INC     R5                      new # of sectors
 813  4724 0429         BLWP    @>005A(R9)              set VDP to write
 813  4726 005A  
 814  4728 0043         DATA    >0043                   address in R2
 815  472A DBC5         MOVB    R5,@-2(R15)             update # of sectors
 815  472C FFFE  
 816  472E 06C5         SWPB    R5                      
 817  4730 DBC5         MOVB    R5,@-2(R15)                     
 817  4732 FFFE  
 818  4734 045A H047    B       *R10                    
 819            *                                       
 820  4736 C229 FSCTOF  MOV     @>0056(R9),R8           find sector from offset in file
 820  4738 0056  
 821  473A 0228         AI      R8,28                   cluster list
 821  473C 001C  
 822  473E C103         MOV     R3,R4                   desired sector offset is in R3
 823  4740 06A0 H048    BL      @DECDCI                 decode info: sector in R1, offset in R2
 823  4742 4BA2  
 824  4744 80C2         C       R2,R3                   reached yet?
 825  4746 1101         JLT     H049                    no
 826  4748 1006         JMP     H050                    yes: return
 827  474A 0228 H049    AI      R8,3                    point to next cluster info
 827  474C 0003  
 828  474E C103         MOV     R3,R4                   
 829  4750 6102         S       R2,R4                   
 830  4752 0604         DEC     R4                      size of the desired cluster (if it's the next)
 831  4754 10F5         JMP     H048                    keep trying
 832  4756 0460 H050    B       @RTURN1                 return to caller
 832  4758 435A  
 833            *
 834            *---------------------------------
 835            * Opcode 7: Delete
 836            * ----------------
 837            * PAB 0: >07
 838            *     1:            <--- error code
 839            *   2-3:
 840            *     4:
 841            *     5:
 842            *   6-7:
 843            *     8:
 844            *---------------------------------                                      
 845            *
 846  475A 06A0 DELETE  BL      @CALSUB                 delete file
 846  475C 433C  
 847  475E 4A90         DATA    FFFDRV                  find file FDR in VDP buffers
 848  4760 C104         MOV     R4,R4                   found?
 849  4762 1307         JEQ     H051                    yes
 850  4764 06A0         BL      @CALSUB                 no: call subroutine
 850  4766 433C  
 851  4768 4AF8         DATA    FFDRDK                  find FDR on disk
 852  476A C104         MOV     R4,R4                   found?
 853  476C 1313         JEQ     H053                    yes
 854  476E 0460         B       @RTURN1                 no: return to caller
 854  4770 435A  
 855            *                                       
 856  4772 0581 H051    INC     R1                      FDR found, point to it
 857  4774 CA41         MOV     R1,@>0056(R9)           save it for other routines
 857  4776 0056  
 858  4778 06A0         BL      @CALSUB                 call subroutine
 858  477A 433C  
 859  477C 4A20         DATA    RDSEC1                  read sector 1
 860  477E 06A0         BL      @FDR2B1                 read 2 bytes from VDP at >8356+offset
 860  4780 485C  
 861  4782 FFFC         DATA    -4                      i.e. get sector # of FRD in R0
 862  4784 C0C0         MOV     R0,R3                   save it for later
 863  4786 C205         MOV     R5,R8                   ptr to top of sector 1
 864  4788 06A0 H052    BL      @VDPR2B                 read 2 bytes from VDP at R8 into R0
 864  478A 4862  
 865  478C 05C8         INCT    R8                      next FDR ptr in sector 1
 866  478E 80C0         C       R0,R3                   is this the one we want?
 867  4790 16FB         JNE     H052                    not yet
 868  4792 0648         DECT    R8                      yes: point back to it
 869            *
 870  4794 06A0 H053    BL      @NTPDT                  APEDSK99: update DOAD FAT time/date
 870  4796 5F58  
 871            *
 872  4798 0429         BLWP    @>005A(R9)              save R8
 872  479A 005A  
 873  479C 0080         DATA    >0080                   
 874  479E 06A0         BL      @CALSUB                 call subroutine
 874  47A0 433C  
 875  47A2 45C6         DATA    FFSVIB                  free file sectors in VIB bitmap
 876  47A4 0429         BLWP    @>005A(R9)              retrieve R8
 876  47A6 005A  
 877  47A8 0081         DATA    >0081                   
 878  47AA 06A0         BL      @RMFPTR                 remove FDR ptr from sector 1
 878  47AC 47C6  
 879  47AE 04C2         CLR     R2                      code for write
 880  47B0 06A0         BL      @CALSUB                 call subroutine
 880  47B2 433C  
 881  47B4 4A22         DATA    WRSEC1                  write sector 1
 882  47B6 06A0         BL      @FDR2B1                 get 2 bytes from VDP at >8356+offset in R0
 882  47B8 485C  
 883  47BA FFFC         DATA    -4                      i.e. sector # of FDR
 884  47BC 06A0         BL      @CALSUB                 call subroutine
 884  47BE 433C  
 885  47C0 4CA8         DATA    FFSBM                   free sector in R0 in VIB bitmap
 886  47C2 0460         B       @CLRFBT                 clear 1rst byte of filename in VDP
 886  47C4 456E  
 887            *
 888            * Sector 1 contains an alphabetically sorted list of FDR pointers
 889            * Each pointer is 2 bytes long and contains the sector # of this FDR
 890            * The list must end with a >0000 mark. Thus there can be 127 files at most
 891            *
 892  47C6 C169 RMFPTR  MOV     @>0056(R9),R5           remove FDR ptr from sector 1
 892  47C8 0056  
 893  47CA 0225         AI      R5,256                  
 893  47CC 0100  
 894  47CE C0C5         MOV     R5,R3                   pointer to data buffer
 895  47D0 0223         AI      R3,256                  point to next ctrl block
 895  47D2 0100  
 896  47D4 C088         MOV     R8,R2                   shift up FDR list, erasing FDR pointed by R8
 897  47D6 05C2         INCT    R2                      point to next FDR ptr in sector 1
 898  47D8 0429 H054    BLWP    @>005A(R9)              set VDP to read
 898  47DA 005A  
 899  47DC 0042         DATA    >0042                   address in R2
 900  47DE D02F         MOVB    @-1026(R15),R0          get 1 byte
 900  47E0 FBFE  
 901  47E2 0582         INC     R2                      inc source ptr
 902  47E4 0429         BLWP    @>005A(R9)              set VDP to write
 902  47E6 005A  
 903  47E8 0103         DATA    >0103                   address in R8
 904  47EA DBC0         MOVB    R0,@-2(R15)             copy 1 byte
 904  47EC FFFE  
 905  47EE 0588         INC     R8                      inc dest pointer
 906  47F0 80C2         C       R2,R3                   done?
 907  47F2 16F2         JNE     H054                    not yet
 908  47F4 045B         B       *R11                    
 909            *                                       
 910  47F6 C28B INSFDR  MOV     R11,R10                 insert a FDR in sector 1
 911  47F8 C048         MOV     R8,R1                   
 912  47FA 06A0         BL      @FDR2B1                 get 2 bytes from VDP at >8356+offset
 912  47FC 485C  
 913  47FE 01FC         DATA    508                     i.e. last FDR slot in sector 1 (list ends with 0)
 914  4800 C000         MOV     R0,R0                   
 915  4802 1302         JEQ     H055                    
 916  4804 0460         B       @ERROR6                 memory full error
 916  4806 4B14  
 917  4808 0608 H055    DEC     R8                      previous byte
 918  480A 0429         BLWP    @>005A(R9)              set VDP to read
 918  480C 005A  
 919  480E 0102         DATA    >0102                   address in R8
 920  4810 D02F         MOVB    @-1026(R15),R0          get 1 byte
 920  4812 FBFE  
 921  4814 05C8         INCT    R8                      
 922  4816 0429         BLWP    @>005A(R9)              set VDP to write
 922  4818 005A  
 923  481A 0103         DATA    >0103                   address in R8
 924  481C DBC0         MOVB    R0,@-2(R15)             copy byte two bytes further down
 924  481E FFFE  
 925  4820 0648         DECT    R8                      
 926  4822 8048         C       R8,R1                   done ?
 927  4824 16F1         JNE     H055                    not yet
 928  4826 045A         B       *R10                    
 929            *                               
 930  4828 C0A9 CMPFN   MOV     @>0058(R9),R2           compare filenames
 930  482A 0058  
 931  482C 0222         AI      R2,256                  
 931  482E 0100  
 932  4830 0429 H056    BLWP    @>005A(R9)              set VDP to read
 932  4832 005A  
 933  4834 0022         DATA    >0022                   address in R1 (ptr to filename)
 934  4836 D02F         MOVB    @-1026(R15),R0          get 1 char
 934  4838 FBFE  
 935  483A 0240         ANDI    R0,>7FFF                clear flag (on drive #)
 935  483C 7FFF  
 936  483E 0429         BLWP    @>005A(R9)              set VDP to read
 936  4840 005A  
 937  4842 0042         DATA    >0042                   address in R2 (filename compare buffer)
 938  4844 D0EF         MOVB    @-1026(R15),R3          get 1 char
 938  4846 FBFE  
 939  4848 90C0         CB      R0,R3                   compare chars
 940  484A 1604         JNE     H057                    mismatch
 941  484C 0581         INC     R1                      match: increment pointers
 942  484E 0582         INC     R2                      
 943  4850 0604         DEC     R4                      
 944  4852 16EE         JNE     H056                    next char
 945  4854 045B H057    B       *R11                    if complete match: ret with EQ set
 946            *                                       
 947  4856 C229 PABR2B  MOV     @>0054(R9),R8           get two bytes from PAB
 947  4858 0054  
 948  485A 1002         JMP     FDR2B2                  
 949            *                                       
 950  485C C229 FDR2B1  MOV     @>0056(R9),R8           get two bytes from FDR
 950  485E 0056  
 951  4860 A23B FDR2B2  A       *R11+,R8                offset in data word
 952            *                                       
 953  4862 0429 VDPR2B  BLWP    @>005A(R9)              get two byte from VDP at R8
 953  4864 005A  
 954  4866 0102         DATA    >0102                   set VDP to read at R8
 955  4868 D02F         MOVB    @-1026(R15),R0          get two bytes of data
 955  486A FBFE  
 956  486C 06C0         SWPB    R0                      
 957  486E D02F         MOVB    @-1026(R15),R0                  
 957  4870 FBFE  
 958  4872 0B80         SRC     R0,8                    why not swpb ?
 959  4874 045B         B       *R11                    
 960            *                       
 961  4876 C069 FDSKDR  MOV     @>0058(R9),R1           find disk from name (ptr in R3)
 961  4878 0058  
 962  487A 0221         AI      R1,256                  
 962  487C 0100  
 963  487E 06A0         BL      @CPCKFN                 copy filename from VDP at R3 to compare buffer
 963  4880 4900  
 964  4882 0429         BLWP    @>005A(R9)              save R2 + R3
 964  4884 005A  
 965  4886 3000         DATA    >3000                   
 966  4888 C000         MOV     R0,R0                   last char copied
 967  488A 1101         JLT     H058                    flagged
 968  488C 1005         JMP     H059                    
 969  488E C180 H058    MOV     R0,R6                   
 970  4890 0246         ANDI    R6,>0300                        
 970  4892 0300  
 971  4894 1337         JEQ     ERROR7                  return with file error
 972  4896 102F         JMP     H062                    return to caller
 973  4898 04C6 H059    CLR     R6                      don't read any drive
 974  489A 06A0         BL      @CALSUB                 call subroutine
 974  489C 433C  
 975  489E 49BE         DATA    RWVIB                   save current VIB
 976  48A0 0226 H060    AI      R6,>0100                next drive
 976  48A2 0100  
 977  48A4 0707         SETO    R7                      error flags
 978  48A6 0702         SETO    R2                      code for read
 979  48A8 04C4         CLR     R4                      sector 0
 980  48AA 06A0         BL      @CALSUB                 call subroutine
 980  48AC 433C  
 981  48AE 4A3C         DATA    RWSECA                  read sector 0
 982  48B0 C1C7         MOV     R7,R7                   ok?
 983  48B2 161D         JNE     H061                    no: try next drive
 984  48B4 0204         LI      R4,10                   yes: diskname size
 984  48B6 000A  
 985  48B8 C069         MOV     @>0058(R9),R1           VIB ptr
 985  48BA 0058  
 986  48BC 0429         BLWP    @>005A(R9)              save R1-R3
 986  48BE 005A  
 987  48C0 7000         DATA    >7000                   
 988  48C2 06A0         BL      @CMPFN                  compare names (ptr in R1 + compare buffer)
 988  48C4 4828  
 989  48C6 0429         BLWP    @>005A(R9)                      
 989  48C8 005A  
 990  48CA 7001         DATA    >7001                   retrieve R1-R3
 991  48CC C104         MOV     R4,R4                   name matched?
 992  48CE 160F         JNE     H061                    no: try next drive
 993  48D0 C006         MOV     R6,R0                   drive #
 994  48D2 0260         ORI     R0,>8000                add update flag
 994  48D4 8000  
 995  48D6 0429         BLWP    @>005A(R9)              set VDP to write
 995  48D8 005A  
 996  48DA 0063         DATA    >0063                   address in R3
 997  48DC DBC0         MOVB    R0,@-2(R15)             copy drive+flag before diskname in source
 997  48DE FFFE  
 998  48E0 0605         DEC     R5                      before sector 0 copy
 999  48E2 0429         BLWP    @>005A(R9)              set VDP to write
 999  48E4 005A  
1000  48E6 00A3         DATA    >00A3                   address in R5
1001  48E8 DBC6         MOVB    R6,@-2(R15)             copy drive # before VIB
1001  48EA FFFE  
1002  48EC 1004         JMP     H062                    done
1003            *                               
1004  48EE 0286 H061    CI      R6,>0300                did we do all drives?
1004  48F0 0300  
1005  48F2 16D6         JNE     H060                    no: try next on
1006  48F4 1007         JMP     ERROR7                  return with file error
1007            *                                       
1008  48F6 0429 H062    BLWP    @>005A(R9)              retrieve R2 + R3
1008  48F8 005A  
1009  48FA 3001         DATA    >3001                   
1010  48FC 0460         B       @RTURN1                 return to caller
1010  48FE 435A  
1011            *                               
1012  4900 0602 CPCKFN  DEC     R2                      
1013  4902 1B03         JH      H063                    
1014  4904 06A0 ERROR7  BL      @RETERR                 return with error
1014  4906 498A  
1015  4908 E000         DATA    >E000                   file error
1016            *                                       
1017  490A 0200 H063    LI      R0,>2000                copy (+check) filename in VDP from R3 to R1 (space)
1017  490C 2000  
1018  490E 0429         BLWP    @>005A(R9)              set VDP to write
1018  4910 005A  
1019  4912 0023         DATA    >0023                   address in R1
1020  4914 0208         LI      R8,10                   10 chars per filename
1020  4916 000A  
1021  4918 DBC0 H064    MOVB    R0,@-2(R15)             fill filename with spaces
1021  491A FFFE  
1022  491C 0608         DEC     R8                      
1023  491E 16FC         JNE     H064                    
1024  4920 0208         LI      R8,11                   11 chars countring drive #
1024  4922 000B  
1025  4924 0583 H065    INC     R3                      increment source ptr
1026  4926 0429         BLWP    @>005A(R9)              set VDP to read
1026  4928 005A  
1027  492A 0062         DATA    >0062                   address in R3
1028  492C D02F         MOVB    @-1026(R15),R0          get a char
1028  492E FBFE  
1029  4930 13E9         JEQ     ERROR7                  >00: return with file error
1030  4932 1110         JLT     H066                    flag bit set
1031  4934 0280         CI      R0,>2E00                        
1031  4936 2E00  
1032  4938 130D         JEQ     H066                    '.'
1033  493A 0608         DEC     R8                      
1034  493C 13E3         JEQ     ERROR7                  name to long: return with file error
1035  493E 0280         CI      R0,>2000                        
1035  4940 2000  
1036  4942 13E0         JEQ     ERROR7                  name can't contain spaces: file error again
1037  4944 0429         BLWP    @>005A(R9)              set VDP to write
1037  4946 005A  
1038  4948 0023         DATA    >0023                   address in R1
1039  494A DBC0         MOVB    R0,@-2(R15)             copy 1 char
1039  494C FFFE  
1040  494E 0581         INC     R1                      increment destination pointer
1041  4950 0602         DEC     R2                      more?
1042  4952 16E8         JNE     H065                    yes
1043  4954 0288 H066    CI      R8,>000B                name can't be 0 chars long
1043  4956 000B  
1044  4958 13D5         JEQ     ERROR7                  else return with file error
1045  495A 045B         B       *R11                    
1046            *                                       
1047  495C AA00 K014    DATA    >AA00                   
1048            *                               
1049  495E C00B ERROR5  MOV     R11,R0                  update data, then error
1050  4960 C0E9         MOV     @>0056(R9),R3           
1050  4962 0056  
1051  4964 0603         DEC     R3                      see what >8356 is pointing at
1052  4966 0429         BLWP    @>005A(R9)              set VDP to read
1052  4968 005A  
1053  496A 0062         DATA    >0062                   address in R3
1054  496C D0AF         MOVB    @-1026(R15),R2          get 1 byte
1054  496E FBFE  
1055  4970 9802         CB      R2,@K014                is it >AA (disk buffer area mark)
1055  4972 495C  
1056  4974 1309         JEQ     H067                    yes: announce error (code in data word)
1057  4976 0429         BLWP    @>005A(R9)              no: >8356 points to a FDR. Save R0
1057  4978 005A  
1058  497A 8000         DATA    >8000                   
1059  497C 06A0         BL      @CALSUB                 call subroutine
1059  497E 433C  
1060  4980 4562         DATA    UPDFDR                  update FRD and data buffer if needed
1061  4982 0429         BLWP    @>005A(R9)              retrieve R0
1061  4984 005A  
1062  4986 8001         DATA    >8001                   
1063  4988 C2C0 H067    MOV     R0,R11                  
1064            *                               
1065  498A C069 RETERR  MOV     @>0054(R9),R1           annouce error
1065  498C 0054  
1066  498E 130D         JEQ     H068                    no PAB
1067  4990 0581         INC     R1                      for DSRs: ptr to status byte
1068  4992 0429         BLWP    @>005A(R9)              set VDP to read
1068  4994 005A  
1069  4996 0022         DATA    >0022                   address in R2
1070  4998 D0AF         MOVB    @-1026(R15),R2          get file status byte
1070  499A FBFE  
1071  499C E0BB         SOC     *R11+,R2                add error code
1072  499E 0429         BLWP    @>005A(R9)              set VDP to write
1072  49A0 005A  
1073  49A2 0023         DATA    >0023                   address in R2
1074  49A4 DBC2         MOVB    R2,@-2(R15)             write back status byte
1074  49A6 FFFE  
1075  49A8 1002         JMP     H069                    
1076  49AA CA7B H068    MOV     *R11+,@>0050(R9)        for subs: error code in >8350
1076  49AC 0050  
1077  49AE C229 H069    MOV     @>0058(R9),R8           get stack ptr
1077  49B0 0058  
1078  49B2 0228         AI      R8,-12                  point back to initial caller
1078  49B4 FFF4  
1079  49B6 CA48         MOV     R8,@>0066(R9)           update pointer
1079  49B8 0066  
1080  49BA 0460         B       @RTURN1                 return to caller
1080  49BC 435A  
1081            *                               
1082  49BE 0429 RWVIB   BLWP    @>005A(R9)              read VIB (drive # in R6)
1082  49C0 005A  
1083  49C2 3000         DATA    >3000                   save R2 + R3
1084  49C4 C169         MOV     @>0058(R9),R5           pointer to VIB in ctrl block
1084  49C6 0058  
1085  49C8 0605         DEC     R5                      ptr to drive #
1086  49CA 0429         BLWP    @>005A(R9)              set VDP for read
1086  49CC 005A  
1087  49CE 00A2         DATA    >00A2                   address in R5
1088  49D0 D0AF         MOVB    @-1026(R15),R2          get drive #
1088  49D2 FBFE  
1089  49D4 C0C2         MOV     R2,R3                   
1090  49D6 04C4         CLR     R4                      sector 0 for VIB
1091  49D8 0242         ANDI    R2,>0300                clear flag (>80 = update data)
1091  49DA 0300  
1092  49DC 9182         CB      R2,R6                   wanted drive?
1093  49DE 131A         JEQ     H073                    yes: return
1094  49E0 C0C3         MOV     R3,R3                   no: shall we update VIB?
1095  49E2 1101         JLT     H070                    yes
1096  49E4 100A         JMP     H071                    no
1097  49E6 0429 H070    BLWP    @>005A(R9)              set VDP to write
1097  49E8 005A  
1098  49EA 00A3         DATA    >00A3                   address in R5
1099  49EC DBC4         MOVB    R4,@-2(R15)             clr drive #
1099  49EE FFFE  
1100  49F0 0585         INC     R5                      point back to VIB buffer
1101  49F2 06A0         BL      @CALSUB                 call subroutine
1101  49F4 433C  
1102  49F6 4A3E         DATA    RWSECB                  write sector 0 to old drive (in R2)
1103  49F8 0605         DEC     R5                      point to drive #
1104  49FA 0702 H071    SETO    R2                      flag for read
1105  49FC D086         MOVB    R6,R2                   APEDSK99: error in original disassembly (was R5)
1106  49FE 1305         JEQ     H072                    none
1107  4A00 0585         INC     R5                      point at VIB buffer
1108  4A02 06A0         BL      @CALSUB                 call subroutine
1108  4A04 433C  
1109  4A06 4A3C         DATA    RWSECA                  read sector (in R4) to buffer (in R5)
1110  4A08 0605         DEC     R5                      point at drive #
1111  4A0A 0429 H072    BLWP    @>005A(R9)              set VDP to write
1111  4A0C 005A  
1112  4A0E 00A3         DATA    >00A3                   address in R5
1113  4A10 DBC6         MOVB    R6,@-2(R15)             write drive # in control block, before FDR
1113  4A12 FFFE  
1114  4A14 0585 H073    INC     R5                      point back to FDR
1115  4A16 0429         BLWP    @>005A(R9)                      
1115  4A18 005A  
1116  4A1A 3001         DATA    >3001                   retrieve R2 + R3 from stack
1117  4A1C 0460         B       @RTURN1                 branch to address on stack
1117  4A1E 435A  
1118            *                               
1119  4A20 0702 RDSEC1  SETO    R2                      read sector 1
1120  4A22 0204 WRSEC1  LI      R4,1
1120  4A24 0001  
1121  4A26 0205         LI      R5,>0100                into data buffer area of current ctrl block
1121  4A28 0100  
1122  4A2A 1005         JMP     RDFDR1                  
1123            *                               
1124  4A2C 06A0 WRFDR   BL      @FDR2B1                 read FDR
1124  4A2E 485C  
1125  4A30 FFFC         DATA    -4                      get sector # of FDR from control block
1126            *                               
1127  4A32 C100 RDFDR2  MOV     R0,R4                   sector read/write
1128  4A34 04C5         CLR     R5
1129  4A36 A169 RDFDR1  A       @>0056(R9),R5           point to FDR or data buffer
1129  4A38 0056  
1130  4A3A 04C7 RWSEC   CLR     R7                      
1131  4A3C D086 RWSECA  MOVB    R6,R2                   add drive # for r/w flag
1132  4A3E 0429 RWSECB  BLWP    @>005A(R9)              save R0-R8
1132  4A40 005A  
1133  4A42 FF80         DATA    >FF80                   
1134  4A44 CA44         MOV     R4,@>004A(R9)           sector #
1134  4A46 004A  
1135  4A48 CA42         MOV     R2,@>004C(R9)           drive | r/w flag
1135  4A4A 004C  
1136  4A4C CA45         MOV     R5,@>004E(R9)           buffer ptr
1136  4A4E 004E  
1137  4A50 06A0         BL      @CALSUB                 call subroutine
1137  4A52 433C  
1138  4A54 4192         DATA    SECRW1                  sector read/write
1139  4A56 0429         BLWP    @>005A(R9)              retrieve R0-R8
1139  4A58 005A  
1140  4A5A FF81         DATA    >FF81                   
1141  4A5C D1E9         MOVB    @>0050(R9),R7           get error code | flags
1141  4A5E 0050  
1142  4A60 06C7         SWPB    R7                      
1143  4A62 1312         JEQ     H077                    
1144  4A64 C1C7         MOV     R7,R7                   
1145  4A66 1501         JGT     H074                    
1146  4A68 100B         JMP     H076                    
1147  4A6A 0247 H074    ANDI    R7,>00FF                        
1147  4A6C 00FF  
1148  4A6E 0287         CI      R7,>0034                        
1148  4A70 0034  
1149  4A72 1603         JNE     H075                    
1150  4A74 06A0         BL      @ERROR5                 
1150  4A76 495E  
1151  4A78 2000         DATA    >2000                   write protected
1152  4A7A 06A0 H075    BL      @ERROR5                 
1152  4A7C 495E  
1153  4A7E C000         DATA    >C000                   device error
1154  4A80 DA69 H076    MOVB    @>004D(R9),@>004D(R9)   read or write?
1154  4A82 004D  
1154  4A84 004D  
1155  4A86 13F1         JEQ     H074                    write
1156  4A88 0247 H077    ANDI    R7,>00FF                        
1156  4A8A 00FF  
1157  4A8C 0460         B       @RTURN1                 return to caller
1157  4A8E 435A  
1158            *                               
1159  4A90 C069 FFFDRV  MOV     @>0058(R9),R1           save filename in compare buffer and find its FDR
1159  4A92 0058  
1160  4A94 0221         AI      R1,256                  
1160  4A96 0100  
1161  4A98 0429         BLWP    @>005A(R9)              set VDP to write
1161  4A9A 005A  
1162  4A9C 0023         DATA    >0023                   address in R1: filename compare buffer
1163  4A9E DBC6         MOVB    R6,@-2(R15)             write drive #
1163  4AA0 FFFE  
1164  4AA2 0581         INC     R1                      
1165  4AA4 06A0         BL      @CPCKFN                 copy (+ check) filename from R3 to R1
1165  4AA6 4900  
1166  4AA8 C082         MOV     R2,R2                   all chars copied (or was there a . or a >00
1167  4AAA 1302         JEQ     FFDRVB                  
1168  4AAC 0460 H078    B       @ERROR7                 return with file error
1168  4AAE 4904  
1169            *                                       
1170  4AB0 C069 FFDRVB  MOV     @>0056(R9),R1           find filename in buffered FDRs
1170  4AB2 0056  
1171  4AB4 0221         AI      R1,3                    
1171  4AB6 0003  
1172  4AB8 0429         BLWP    @>005A(R9)              set VDP to read
1172  4ABA 005A  
1173  4ABC 0022         DATA    >0022                   address in R1
1174  4ABE D0AF         MOVB    @-1026(R15),R2          get # of files
1174  4AC0 FBFE  
1175  4AC2 0982         SRL     R2,8                    make it a word
1176  4AC4 C0C2         MOV     R2,R3                   save it
1177  4AC6 0221         AI      R1,6                    ptr to drive #
1177  4AC8 0006  
1178  4ACA 0204 H079    LI      R4,11                   compare 11 bytes (drive + filename)
1178  4ACC 000B  
1179  4ACE 0429         BLWP    @>005A(R9)              save R1-R3
1179  4AD0 005A  
1180  4AD2 7000         DATA    >7000                   
1181  4AD4 06A0         BL      @CMPFN                  compare with name in compare buffer
1181  4AD6 4828  
1182  4AD8 0429         BLWP    @>005A(R9)              retrieve R1-R3
1182  4ADA 005A  
1183  4ADC 7001         DATA    >7001                   
1184  4ADE C104         MOV     R4,R4                   fully compared?
1185  4AE0 1304         JEQ     H080                    yes: done
1186  4AE2 0221         AI      R1,518                  move to next FDR in VDP mem
1186  4AE4 0206  
1187  4AE6 0602         DEC     R2                      
1188  4AE8 16F0         JNE     H079                    next file
1189  4AEA 0460 H080    B       @RTURN1                 return to caller (R4=0 if successfull)
1189  4AEC 435A  
1190            *                               
1191  4AEE 06A0 FNDFDR  BL      @CALSUB                 
1191  4AF0 433C  
1192  4AF2 4A90         DATA    FFFDRV                  save name in comp buffer, find FDR in VDP buffers
1193            *                                       
1194  4AF4 C104 FFDROD  MOV     R4,R4                   find FDR on disk (from filename)
1195  4AF6 13DA         JEQ     H078                    file error
1196  4AF8 C169 FFDRDK  MOV     @>0056(R9),R5           ptr to top of disk buffer in VDP mem
1196  4AFA 0056  
1197  4AFC 0225         AI      R5,10                   ptr to drive # in first file control block
1197  4AFE 000A  
1198  4B00 0429 H081    BLWP    @>005A(R9)              set VDP to read
1198  4B02 005A  
1199  4B04 00A2         DATA    >00A2                   address in R5
1200  4B06 D0AF         MOVB    @-1026(R15),R2          get drive #
1200  4B08 FBFE  
1201  4B0A 1307         JEQ     H082                    free control block found
1202  4B0C 0225         AI      R5,518                  ptr to file control block
1202  4B0E 0206  
1203  4B10 0603         DEC     R3                      
1204  4B12 16F6         JNE     H081                    more files ?
1205  4B14 06A0 ERROR6  BL      @ERROR5                 no:
1205  4B16 495E  
1206  4B18 8000         DATA    >8000                   memory full
1207            *                               
1208  4B1A CA45 H082    MOV     R5,@>0056(R9)           save ptr to free ctrl block (drive #)
1208  4B1C 0056  
1209  4B1E 06A0         BL      @CALSUB                 call subroutine
1209  4B20 433C  
1210  4B22 4A20         DATA    RDSEC1                  read sector 1
1211  4B24 C229 FFDRFN  MOV     @>0056(R9),R8           entry point if sector 1 already read
1211  4B26 0056  
1212  4B28 0228         AI      R8,382                  point to middle of sector 1
1212  4B2A 017E  
1213  4B2C 0202         LI      R2,64                   distance: start with 1/4 sector
1213  4B2E 0040  
1214  4B30 0704 H083    SETO    R4                      
1215  4B32 06A0         BL      @VDPR2B                 read 2 bytes in R0 from VDP address in R8
1215  4B34 4862  
1216  4B36 C000         MOV     R0,R0                   
1217  4B38 132E         JEQ     H085                    no file here: move up
1218  4B3A 0429         BLWP    @>005A(R9)              save R2
1218  4B3C 005A  
1219  4B3E 2000         DATA    >2000                   
1220  4B40 0702         SETO    R2                      code for read
1221  4B42 06A0         BL      @CALSUB                 call subroutine
1221  4B44 433C  
1222  4B46 4A32         DATA    RDFDR2                  read FDR, sector # in R0
1223  4B48 C045         MOV     R5,R1                   RDFDR2 sets R5 as FDR ptr
1224  4B4A 0225         AI      R5,-4                   point to sector # of FDR in ctrl block
1224  4B4C FFFC  
1225  4B4E 0429         BLWP    @>005A(R9)              set VDP to write
1225  4B50 005A  
1226  4B52 00A3         DATA    >00A3                   address in R5
1227  4B54 DBC4         MOVB    R4,@-2(R15)             RDFDR2 puts sector # in R4
1227  4B56 FFFE  
1228  4B58 06C4         SWPB    R4                      copy it to ctrl block
1229  4B5A DBC4         MOVB    R4,@-2(R15)                     
1229  4B5C FFFE  
1230  4B5E C141         MOV     R1,R5                   FDR ptr
1231  4B60 0601         DEC     R1                      now point to drive #
1232  4B62 0429         BLWP    @>005A(R9)              set VDP to write
1232  4B64 005A  
1233  4B66 0023         DATA    >0023                   address in R1
1234  4B68 DBC6         MOVB    R6,@-2(R15)             save drive #
1234  4B6A FFFE  
1235  4B6C 0204         LI      R4,11                   size to compare (drive # + filename)
1235  4B6E 000B  
1236  4B70 06A0         BL      @CMPFN                  compare filenames
1236  4B72 4828  
1237  4B74 0429         BLWP    @>005A(R9)              retrieve R2
1237  4B76 005A  
1238  4B78 2001         DATA    >2001                   
1239  4B7A 130B         JEQ     H084                    compared ok: return
1240  4B7C 0429         BLWP    @>005A(R9)              set VDP to write
1240  4B7E 005A  
1241  4B80 00A3         DATA    >00A3                   address in R5
1242  4B82 DBC4         MOVB    R4,@-2(R15)             remaining chars to compare
1242  4B84 FFFE  
1243  4B86 80C0         C       R0,R3                   what kind of mismatch occured?
1244  4B88 1B06         JH      H085                    too far down the alphabet
1245  4B8A A202         A       R2,R8                   too far up: move half-way down
1246  4B8C C082         MOV     R2,R2                   
1247  4B8E 1606         JNE     H086                    then divide distance by 2
1248  4B90 05C8         INCT    R8                      already checked: reset EQ
1249  4B92 0460 H084    B       @RTURN1                 return (from stack)
1249  4B94 435A  
1250            *                               
1251  4B96 6202 H085    S       R2,R8                   move half-way up
1252  4B98 C082         MOV     R2,R2                   
1253  4B9A 13FB         JEQ     H084                    can't: already checked
1254  4B9C 0922 H086    SRL     R2,2                    divide distance by 2
1255  4B9E A082         A       R2,R2                   but keep it even
1256  4BA0 10C7         JMP     H083                    
1257            *
1258            * The cluster info list is located in the FDR, bytes >1C to >FF
1259            * A cluster info consists in 3 bytes, i.e 6 nibbles
1260            * 3 nibbles specify the beginning sector for that cluster, and
1261            * 3 nibbles specify the total file offset in sectors, including this cluster.
1262            * The nibbles are arranged as EG SB OF, to be combined as BEG OFS
1263            *
1264  4BA2 C28B DECDCI  MOV     R11,R10                 decode cluster info
1265  4BA4 06A0         BL      @VDPR2B                 read 2 bytes VDP at R8 in R0
1265  4BA6 4862  
1266  4BA8 06C0         SWPB    R0                      
1267  4BAA D0AF         MOVB    @-1026(R15),R2          get third byte from cluster list
1267  4BAC FBFE  
1268  4BAE C040         MOV     R0,R1                   
1269  4BB0 0241         ANDI    R1,>0FFF                start sector in R1
1269  4BB2 0FFF  
1270  4BB4 4001         SZC     R1,R0                   remove it from R0
1271  4BB6 0982         SRL     R2,8                    
1272  4BB8 E080         SOC     R0,R2                   combine offset nibbles
1273  4BBA 0BC2         SRC     R2,12                   offset in R2
1274  4BBC 045A         B       *R10                    
1275            *                               
1276  4BBE 0B42 UPDCLI  SRC     R2,4                    write info for 1 cluster
1277  4BC0 C002         MOV     R2,R0                   
1278  4BC2 0240         ANDI    R0,>F000                sector in R1, offset in R2
1278  4BC4 F000  
1279  4BC6 E040         SOC     R0,R1                   copy nibble 3 of offset before nibble 1 of sector
1280  4BC8 0429         BLWP    @>005A(R9)              set VDP to write
1280  4BCA 005A  
1281  4BCC 0103         DATA    >0103                   address in R8
1282  4BCE 06C1         SWPB    R1                      write cluster info
1283  4BD0 DBC1         MOVB    R1,@-2(R15)             as 3 bytes
1283  4BD2 FFFE  
1284  4BD4 06C1         SWPB    R1                      
1285  4BD6 DBC1         MOVB    R1,@-2(R15)                     
1285  4BD8 FFFE  
1286  4BDA 06C2         SWPB    R2                      
1287  4BDC DBC2         MOVB    R2,@-2(R15)                     
1287  4BDE FFFE  
1288  4BE0 045B         B       *R11                    
1289            *
1290            * The sector bitmap is located in the VIB (i.e. sector 0) at bytes >38 to >FF
1291            * In each byte a bit defines a sector, from right to left: "0"=free, "1"=used                                   
1292            *
1293  4BE2 0429 FFSBMP  BLWP    @>005A(R9)              find a free sector in bitmap
1293  4BE4 005A  
1294  4BE6 7800         DATA    >7800                   
1295  4BE8 06A0         BL      @CALSUB                 call subroutine
1295  4BEA 433C  
1296  4BEC 49BE         DATA    RWVIB                   load VIB for drive in R6
1297  4BEE C041         MOV     R1,R1                   first sector specified in R1 ?
1298  4BF0 1602         JNE     H087                    yes
1299  4BF2 0201         LI      R1,33                   no: start with sector 34
1299  4BF4 0021  
1300  4BF6 0581 H087    INC     R1                      
1301  4BF8 C001         MOV     R1,R0                   
1302  4BFA 0931         SRL     R1,3                    div by 8 since 8 sect/byte in bitmap
1303  4BFC 0202         LI      R2,>00FF                        
1303  4BFE 00FF  
1304  4C00 0240         ANDI    R0,>0007                bit number in bitmap byte
1304  4C02 0007  
1305  4C04 1301         JEQ     H088                    
1306  4C06 0A02         SLA     R2,0                    get that bit
1307  4C08 C0C1 H088    MOV     R1,R3                   byte #
1308  4C0A A0C5         A       R5,R3                   add VIB ptr
1309  4C0C 0223         AI      R3,56                   ptr to sector in bitmap
1309  4C0E 0038  
1310  4C10 0281         CI      R1,>00C8                end of VIB?
1310  4C12 00C8  
1311  4C14 1101         JLT     H089                    no
1312  4C16 04C1         CLR     R1                      yes: top of bitmap
1313  4C18 A045 H089    A       R5,R1                   
1314  4C1A 0221         AI      R1,56                   make another bitmap ptr
1314  4C1C 0038  
1315  4C1E 0429         BLWP    @>005A(R9)              set VDP to read
1315  4C20 005A  
1316  4C22 0022         DATA    >0022                   address in R1
1317  4C24 0700 H090    SETO    R0                      
1318  4C26 D02F         MOVB    @-1026(R15),R0          get bitmap byte
1318  4C28 FBFE  
1319  4C2A C100         MOV     R0,R4                   save it
1320  4C2C E002         SOC     R2,R0                   mask previous sectors
1321  4C2E 04C2         CLR     R2                      
1322  4C30 0580         INC     R0                      get 1 more sector
1323  4C32 1610         JNE     H092                    ok
1324  4C34 0581         INC     R1                      byte full: try next
1325  4C36 C001         MOV     R1,R0                   
1326  4C38 0220         AI      R0,-256                 won't change if byte # became >100
1326  4C3A FF00  
1327  4C3C 8140         C       R0,R5                   still in VIB?
1328  4C3E 1605         JNE     H091                    yes
1329  4C40 0221         AI      R1,-200                 no: to top of bitmap
1329  4C42 FF38  
1330  4C44 0429         BLWP    @>005A(R9)              set VDP to read
1330  4C46 005A  
1331  4C48 0022         DATA    >0022                   address in R1
1332  4C4A 80C1 H091    C       R1,R3                   are we back to where we started?
1333  4C4C 16EB         JNE     H090                    no: seach that byte for a free sector
1334  4C4E C004         MOV     R4,R0                   get original byte
1335  4C50 0580         INC     R0                      try sectors just before ours (no mask this time)
1336  4C52 1325         JEQ     H095                    full: return with EQ
1337  4C54 0600 H092    DEC     R0                      restore original byte
1338  4C56 C080         MOV     R0,R2                   
1339  4C58 04C0         CLR     R0                      bit counter
1340  4C5A 06C2         SWPB    R2                      
1341  4C5C 0580 H093    INC     R0                      increment bit count
1342  4C5E 0B12         SRC     R2,1                    find first 0 bit from the right
1343  4C60 18FD         JOC     H093                    not yet
1344  4C62 0202         LI      R2,>0080                        
1344  4C64 0080  
1345  4C66 0A02         SLA     R2,0                    make a mask for that bit
1346  4C68 0600         DEC     R0                      bit # (0-7)
1347  4C6A E102         SOC     R2,R4                   mark sector as used in bitmap byte
1348  4C6C 0429         BLWP    @>005A(R9)              set VDP to write
1348  4C6E 005A  
1349  4C70 0023         DATA    >0023                   address in R1
1350  4C72 DBC4         MOVB    R4,@-2(R15)             update bitmap
1350  4C74 FFFE  
1351  4C76 0221         AI      R1,-56                  
1351  4C78 FFC8  
1352  4C7A 6045         S       R5,R1                   byte # in bitmap
1353  4C7C 0A31         SLA     R1,3                    times 8 (8 sect per byte)
1354  4C7E E040         SOC     R0,R1                   add bit #: = sector #
1355  4C80 C001         MOV     R1,R0                   save it
1356            *                               
1357  4C82 0605 H094    DEC     R5                      point to drive #
1358  4C84 0429         BLWP    @>005A(R9)              set VDP to read
1358  4C86 005A  
1359  4C88 00A2         DATA    >00A2                   address in R5
1360  4C8A D06F         MOVB    @-1026(R15),R1          get drive #
1360  4C8C FBFE  
1361  4C8E 0261         ORI     R1,>8000                add flag: update VIB
1361  4C90 8000  
1362  4C92 0429         BLWP    @>005A(R9)              set VDP to write
1362  4C94 005A  
1363  4C96 00A3         DATA    >00A3                   address in R5
1364  4C98 DBC1         MOVB    R1,@-2(R15)             write back flagged drive #
1364  4C9A FFFE  
1365  4C9C 0585         INC     R5                      point to VIB (& return with NEQ)
1366  4C9E 0429 H095    BLWP    @>005A(R9)              retrieve R1-R4
1366  4CA0 005A  
1367  4CA2 7801         DATA    >7801                   
1368  4CA4 0460         B       @RTURN1                 return to caller
1368  4CA6 435A  
1369            *                               
1370  4CA8 C040 FFSBM   MOV     R0,R1                   free sector(s) in bitmap
1371  4CAA 0202         LI      R2,1                    1 sector only
1371  4CAC 0001  
1372  4CAE 0429 FRSCB1  BLWP    @>005A(R9)              entry point if more than 1 sector
1372  4CB0 005A  
1373  4CB2 7800         DATA    >7800                   save R1-R4
1374  4CB4 06A0         BL      @CALSUB                 call subroutine
1374  4CB6 433C  
1375  4CB8 49BE         DATA    RWVIB                   load VIB for drive in R6
1376  4CBA C001         MOV     R1,R0                   sector #
1377  4CBC 0240         ANDI    R0,>0007                bit in bitmap byte (8 per byte)
1377  4CBE 0007  
1378  4CC0 0931         SRL     R1,3                    byte in bitmap
1379  4CC2 A045         A       R5,R1                   add VIB buffer
1380  4CC4 0221         AI      R1,56                   add bitmap offset in VIB
1380  4CC6 0038  
1381  4CC8 C0C0         MOV     R0,R3                   
1382  4CCA 0500         NEG     R0                      
1383  4CCC 0220         AI      R0,8                    change 0-7 into 8-1
1383  4CCE 0008  
1384  4CD0 0204         LI      R4,>00FF                mask to erase
1384  4CD2 00FF  
1385  4CD4 8002         C       R2,R0                   how many to erase?
1386  4CD6 1101         JLT     H096                    less than in that byte
1387  4CD8 100A         JMP     H099                    
1388            *                               
1389  4CDA 0200 H096    LI      R0,8                    free sectors in first byte
1389  4CDC 0008  
1390  4CDE 6002         S       R2,R0                   
1391  4CE0 0B04         SRC     R4,0                    adjust mask
1392  4CE2 C003         MOV     R3,R0                   original bit # of starting sector
1393  4CE4 1301         JEQ     H097                    
1394  4CE6 0A04         SLA     R4,0                    don't erase before starting sector
1395  4CE8 1000 H097    JMP     H098                    
1396            *                               
1397  4CEA 06C4 H098    SWPB    R4                      
1398  4CEC 1019         JMP     H102                    goto erase last byte
1399            *                                       
1400  4CEE 0B04 H099    SRC     R4,0                    adjust mask
1401  4CF0 6080 H100    S       R0,R2                   that many will be freed
1402  4CF2 0429         BLWP    @>005A(R9)              set VDP to read
1402  4CF4 005A  
1403  4CF6 0022         DATA    >0022                   address in R1
1404  4CF8 D02F         MOVB    @-1026(R15),R0          get bitmap byte
1404  4CFA FBFE  
1405  4CFC 4004         SZC     R4,R0                   mark sectors as free
1406  4CFE 0429         BLWP    @>005A(R9)              set VDP to write
1406  4D00 005A  
1407  4D02 0023         DATA    >0023                   address in R1
1408  4D04 DBC0         MOVB    R0,@-2(R15)             write it back
1408  4D06 FFFE  
1409  4D08 0204         LI      R4,>FF00                clear full byte
1409  4D0A FF00  
1410  4D0C 0581         INC     R1                      next byte
1411  4D0E 0200         LI      R0,8                    i.e. 8 sectors
1411  4D10 0008  
1412  4D12 8002         C       R2,R0                   how many more sectors?
1413  4D14 1101         JLT     H101                    less than 8
1414  4D16 10EC         JMP     H100                    8 or more: next byte
1415            *                                       
1416  4D18 C002 H101    MOV     R2,R0                   remaining sectors
1417  4D1A 0204         LI      R4,>00FF                        
1417  4D1C 00FF  
1418  4D1E 0A04         SLA     R4,0                    coin mask
1419  4D20 0429 H102    BLWP    @>005A(R9)              set VDP to read
1419  4D22 005A  
1420  4D24 0022         DATA    >0022                   address in R1
1421  4D26 D02F         MOVB    @-1026(R15),R0          get bitmap byte
1421  4D28 FBFE  
1422  4D2A 4004         SZC     R4,R0                   mark sectors as free
1423  4D2C 0429         BLWP    @>005A(R9)              set VDP to write
1423  4D2E 005A  
1424  4D30 0023         DATA    >0023                   address in R1
1425  4D32 DBC0         MOVB    R0,@-2(R15)             write it back
1425  4D34 FFFE  
1426  4D36 10A5         JMP     H094                    done: flag drive # and return
1427            *
1428            *===================================
1429            * DSR entry points
1430            *===================================                                    
1431            *
1432  4D38 C1CB EDSR01  MOV     R11,R7                  DSK
1433  4D3A 06A0         BL      @PRPFDO                 --- prepare file operations
1433  4D3C 4410  
1434  4D3E 06A0         BL      @CALSUB                 call subroutine
1434  4D40 433C  
1435  4D42 4876         DATA    FDSKDR                  find disk in drive (name ptr in R3)
1436  4D44 100B         JMP     H104                    
1437            *                                       
1438  4D46 0206 EDSR02  LI      R6,>0100                DSK1
1438  4D48 0100  
1439  4D4A 1005         JMP     H103                    ----
1440            *                                       
1441  4D4C 0206 EDSR03  LI      R6,>0200                DSK2
1441  4D4E 0200  
1442  4D50 1002         JMP     H103                    ----
1443            *                                       
1444  4D52 0206 EDSR04  LI      R6,>0300                DSK3
1444  4D54 0300  
1445            *                                       
1446  4D56 C1CB H103    MOV     R11,R7                  save return address
1447  4D58 06A0         BL      @PRPFDO                 prepare file operations
1447  4D5A 4410  
1448  4D5C C029 H104    MOV     @>0054(R9),R0           PAB ptr
1448  4D5E 0054  
1449  4D60 0429         BLWP    @>005A(R9)              set VDP to read
1449  4D62 005A  
1450  4D64 0002         DATA    >0002                   address in R0
1451  4D66 D06F         MOVB    @-1026(R15),R1          get opcode
1451  4D68 FBFE  
1452  4D6A 0981         SRL     R1,8                    
1453  4D6C 0281         CI      R1,>0009                check range
1453  4D6E 0009  
1454  4D70 1B19         JH      ERROR8                  illegal opcode
1455  4D72 0282         CI      R2,>0001                filename lenght (including . )
1455  4D74 0001  
1456  4D76 1605         JNE     H105                    no filename: dir
1457  4D78 0221         AI      R1,10                   only allow open, close and read
1457  4D7A 000A  
1458  4D7C 0281         CI      R1,>000C                        
1458  4D7E 000C  
1459  4D80 1B11         JH      ERROR8                  others are illegal
1460  4D82 A041 H105    A       R1,R1                   make it a word ptr
1461  4D84 C061         MOV     @OPCVEC(R1),R1          get vector
1461  4D86 4D8A  
1462  4D88 0451         B       *R1                     branch to it
1463            *                                       
1464  4D8A 4DAA OPCVEC  DATA    OPEN                    open
1465  4D8C 4FBC         DATA    CLOSE                   close
1466  4D8E 4FC6         DATA    READ                    read
1467  4D90 50B0         DATA    WRITE                   write
1468  4D92 5364         DATA    RWIND1                  rewind
1469  4D94 53B8         DATA    LOAD                    load
1470  4D96 545A         DATA    SAVE                    save
1471  4D98 475A         DATA    DELETE                  delete
1472  4D9A 498A         DATA    RETERR                  scratch record: return with bad attribute error
1473  4D9C 54DE         DATA    STATUS                  status
1474            *                                       
1475  4D9E 559E         DATA    OPNDIR                  open directory
1476  4DA0 55FC         DATA    CLSDIR                  close directory
1477  4DA2 5612         DATA    RDDIR                   read directory
1478            *                                       
1479  4DA4 06A0 ERROR8  BL      @ERROR5                 return with error
1479  4DA6 495E  
1480  4DA8 6000         DATA    >6000                   illegal opcode
1481            *
1482            *---------------------------------
1483            * Opcode 0: Open
1484            * --------------
1485            * PAB 0: >00
1486            *     1: file type  <--- error code
1487            *   2-3:
1488            *     4: record length
1489            *     5:
1490            *   6-7: # of records (if output)
1491            *     8:
1492            *---------------------------------                                      
1493            *
1494  4DAA 04C0 OPEN    CLR     R0                      
1495  4DAC D02F         MOVB    @-1026(R15),R0          get file attributes
1495  4DAE FBFE  
1496  4DB0 0429         BLWP    @>005A(R9)                      
1496  4DB2 005A  
1497  4DB4 8000         DATA    >8000                   save R0
1498  4DB6 0240         ANDI    R0,>1600                keep fix/var and access mode
1498  4DB8 1600  
1499  4DBA 0280         CI      R0,>0600                        
1499  4DBC 0600  
1500  4DBE 1603         JNE     H106                    
1501  4DC0 06A0 ERROR9  BL      @ERROR5                 dis/fix, open as append: return with error
1501  4DC2 495E  
1502  4DC4 4000         DATA    >4000                   bad attribute
1503            *                                       
1504  4DC6 120A H106    JLE     H107                    
1505  4DC8 C040         MOV     R0,R1                   var
1506  4DCA 06A0         BL      @PABR2B                 get 2 bytes from PAB into R0
1506  4DCC 4856  
1507  4DCE 0004         DATA    4                       rec len and char count
1508  4DD0 0280         CI      R0,>FF00                is rec len 255?
1508  4DD2 FF00  
1509  4DD4 14F5         JHE     ERROR9                  yes: bad attribute
1510  4DD6 C001         MOV     R1,R0                   retrieve attributes
1511  4DD8 0240         ANDI    R0,>0600                keep only access mode
1511  4DDA 0600  
1512            *                                       
1513  4DDC 0280 H107    CI      R0,>0200                is it output?
1513  4DDE 0200  
1514  4DE0 1657         JNE     H113                    no
1515  4DE2 06A0         BL      @CALSUB                 call subroutine
1515  4DE4 433C  
1516  4DE6 447C         DATA    CRFIL1                  create file
1517  4DE8 06A0 H108    BL      @PRFDRS                 coin status byte in FDR style
1517  4DEA 4F6A  
1518  4DEC 0429         BLWP    @>005A(R9)              set VDP to write
1518  4DEE 005A  
1519  4DF0 0083         DATA    >0083                   address in R4: status byte in FDR buffer
1520  4DF2 DBC2         MOVB    R2,@-2(R15)             write file status in FDR
1520  4DF4 FFFE  
1521  4DF6 C0E9         MOV     @>0054(R9),R3           PAB ptr
1521  4DF8 0054  
1522  4DFA 0223         AI      R3,4                    ptr to rec len
1522  4DFC 0004  
1523  4DFE 04C5         CLR     R5                      
1524  4E00 0429         BLWP    @>005A(R9)              set VDP to read
1524  4E02 005A  
1525  4E04 0062         DATA    >0062                   address in R3
1526  4E06 D16F         MOVB    @-1026(R15),R5          get record length
1526  4E08 FBFE  
1527  4E0A 1607         JNE     H109                    
1528  4E0C 0205         LI      R5,>5000                >00: default it 80
1528  4E0E 5000  
1529  4E10 0429         BLWP    @>005A(R9)              set VDP to write
1529  4E12 005A  
1530  4E14 0063         DATA    >0063                   address in R3
1531  4E16 DBC5         MOVB    R5,@-2(R15)             write default rec len
1531  4E18 FFFE  
1532  4E1A 0224 H109    AI      R4,5                    point to rec len byte in FDR
1532  4E1C 0005  
1533  4E1E 0429         BLWP    @>005A(R9)              set VDP to write
1533  4E20 005A  
1534  4E22 0083         DATA    >0083                   address in R4
1535  4E24 DBC5         MOVB    R5,@-2(R15)             write rec len in FDR buffer
1535  4E26 FFFE  
1536  4E28 0201         LI      R1,256                  256 bytes/sector
1536  4E2A 0100  
1537  4E2C C082         MOV     R2,R2                   var or dis?
1538  4E2E 1101         JLT     H110                    var
1539  4E30 1002         JMP     H111                    dis
1540  4E32 A141 H110    A       R1,R5                   var: rec len +1
1541  4E34 0601         DEC     R1                      254 bytes only (needs size byte)
1542  4E36 06C5 H111    SWPB    R5                      make it a word
1543  4E38 04C0         CLR     R0                      
1544  4E3A 3C05         DIV     R5,R0                   how many times in 254/255 bytes?
1545  4E3C 0224         AI      R4,-4                   point to # of rec/sect in FDR
1545  4E3E FFFC  
1546  4E40 C040         MOV     R0,R1                   save result for later
1547  4E42 06C0         SWPB    R0                      
1548  4E44 0429         BLWP    @>005A(R9)              set VDP to write
1548  4E46 005A  
1549  4E48 0083         DATA    >0083                   address in R4
1550  4E4A DBC0         MOVB    R0,@-2(R15)             write # of rec/sect in FDR
1550  4E4C FFFE  
1551  4E4E C229         MOV     @>0056(R9),R8           point to filename in FDR
1551  4E50 0056  
1552  4E52 0429         BLWP    @>005A(R9)              set VDP to read
1552  4E54 005A  
1553  4E56 0102         DATA    >0102                   address in R8
1554  4E58 D02F         MOVB    @-1026(R15),R0          get first char
1554  4E5A FBFE  
1555  4E5C 0260         ORI     R0,>8000                flag it: update FDR before leaving
1555  4E5E 8000  
1556  4E60 0429         BLWP    @>005A(R9)              set VDP to write
1556  4E62 005A  
1557  4E64 0103         DATA    >0103                   address in R8
1558  4E66 DBC0         MOVB    R0,@-2(R15)             write it back
1558  4E68 FFFE  
1559  4E6A 0429         BLWP    @>005A(R9)                      
1559  4E6C 005A  
1560  4E6E 8001         DATA    >8001                   retrieve R0 (access mode)
1561  4E70 06A0         BL      @PABR2B                 get 2 bytes from PAB into R0
1561  4E72 4856  
1562  4E74 0006         DATA    6                       required size in records
1563  4E76 C100         MOV     R0,R4                   
1564  4E78 1309         JEQ     H112                    no size specified
1565  4E7A 11A2         JLT     ERROR9                  return with bad attribute error
1566  4E7C A101         A       R1,R4                   round up to record size
1567  4E7E 0604         DEC     R4                      
1568  4E80 04C3         CLR     R3                      
1569  4E82 3CC1         DIV     R1,R3                   how many sectors will this be?
1570  4E84 0603         DEC     R3                      offset start from 0
1571  4E86 06A0         BL      @CALSUB                 call subroutine
1571  4E88 433C  
1572  4E8A 464C         DATA    APSCTS                  add sectors to FDR to match offset in R3
1573  4E8C 0460 H112    B       @RWIND2                 initialise file control block and return to caller
1573  4E8E 5392  
1574            *                                       
1575  4E90 0429 H113    BLWP    @>005A(R9)              not output
1575  4E92 005A  
1576  4E94 8000         DATA    >8000                   save R0
1577  4E96 06A0         BL      @CALSUB                 call subroutine
1577  4E98 433C  
1578  4E9A 4AEE         DATA    FNDFDR                  find FDR on disk
1579  4E9C 0429         BLWP    @>005A(R9)                      
1579  4E9E 005A  
1580  4EA0 8001         DATA    >8001                   retrieve R0 (access mode)
1581  4EA2 C104         MOV     R4,R4                   found FDR?
1582  4EA4 1309         JEQ     H115                    yes
1583  4EA6 0280         CI      R0,>0400                no: is file open as input?
1583  4EA8 0400  
1584  4EAA 1304         JEQ     H114                    yes: must exist
1585  4EAC 06A0         BL      @CALSUB                 no: call subroutine
1585  4EAE 433C  
1586  4EB0 448E         DATA    CRFIL3                  create file
1587  4EB2 109A         JMP     H108                    
1588            *                                       
1589  4EB4 0460 H114    B       @ERROR9                 return with bad attribute error
1589  4EB6 4DC0  
1590            *                                       
1591  4EB8 C1C0 H115    MOV     R0,R7                   save access mode
1592  4EBA 06A0         BL      @PRFDRS                 prepare status byte for FDR
1592  4EBC 4F6A  
1593  4EBE 0429         BLWP    @>005A(R9)              set VDP to read
1593  4EC0 005A  
1594  4EC2 0082         DATA    >0082                   address in R4 (status byte in FDR)
1595  4EC4 D02F         MOVB    @-1026(R15),R0          get current file status
1595  4EC6 FBFE  
1596  4EC8 C0C0         MOV     R0,R3                   save it
1597  4ECA 0243         ANDI    R3,>0800                is file write protected?
1597  4ECC 0800  
1598  4ECE 1306         JEQ     H116                    no
1599  4ED0 0287         CI      R7,>0400                yes: is it open as input?
1599  4ED2 0400  
1600  4ED4 1303         JEQ     H116                    no
1601  4ED6 06A0         BL      @ERROR5                 yes: return with error
1601  4ED8 495E  
1602  4EDA 2000         DATA    >2000                   write protected
1603            *                                       
1604  4EDC 0240 H116    ANDI    R0,>8300                keep only file type bits (V/F, D/I, Prg/Data)
1604  4EDE 8300  
1605  4EE0 2802         XOR     R2,R0                   compare with new (coined by PRFDRS)
1606  4EE2 16E8         JNE     H114                    different: bad attribute
1607  4EE4 C0E9         MOV     @>0054(R9),R3           PAB ptr
1607  4EE6 0054  
1608  4EE8 0223         AI      R3,4                    ptr to rec len in PAB
1608  4EEA 0004  
1609  4EEC 0224         AI      R4,5                    ptr to rec len in FDR
1609  4EEE 0005  
1610  4EF0 0429         BLWP    @>005A(R9)              set VDP to read
1610  4EF2 005A  
1611  4EF4 0082         DATA    >0082                   address in R4
1612  4EF6 D02F         MOVB    @-1026(R15),R0          get rec len from FDR
1612  4EF8 FBFE  
1613  4EFA 0429         BLWP    @>005A(R9)              set VDP to read
1613  4EFC 005A  
1614  4EFE 0062         DATA    >0062                   address in R3
1615  4F00 D0AF         MOVB    @-1026(R15),R2          get rec len from PAB
1615  4F02 FBFE  
1616  4F04 1302         JEQ     H117                    0 = keep current one
1617  4F06 9080         CB      R0,R2                   are they identical?
1618  4F08 16D5         JNE     H114                    no: bad attribute
1619  4F0A 0429 H117    BLWP    @>005A(R9)              set VDP to write
1619  4F0C 005A  
1620  4F0E 0063         DATA    >0063                   address in R3
1621  4F10 DBC0         MOVB    R0,@-2(R15)             update rec len in PAB (in case it was 0)
1621  4F12 FFFE  
1622  4F14 0429         BLWP    @>005A(R9)              retrieve R0 (open mode)
1622  4F16 005A  
1623  4F18 8001         DATA    >8001                   
1624  4F1A 0240         ANDI    R0,>0600                keep only access mode
1624  4F1C 0600  
1625  4F1E 04C2         CLR     R2                      
1626  4F20 0703         SETO    R3                      
1627  4F22 0280         CI      R0,>0600                is it append
1627  4F24 0600  
1628  4F26 161D         JNE     H118                    no
1629  4F28 C129         MOV     @>0056(R9),R4           yes: get FDR ptr
1629  4F2A 0056  
1630  4F2C C1C4         MOV     R4,R7                   save it
1631  4F2E 0224         AI      R4,14                   ptr to # of sectors
1631  4F30 000E  
1632  4F32 0429         BLWP    @>005A(R9)              set VDP to read
1632  4F34 005A  
1633  4F36 0082         DATA    >0082                   address in R4
1634  4F38 D0EF         MOVB    @-1026(R15),R3          get # of sectors in file
1634  4F3A FBFE  
1635  4F3C 06C3         SWPB    R3                      
1636  4F3E D0EF         MOVB    @-1026(R15),R3                  
1636  4F40 FBFE  
1637  4F42 06C3         SWPB    R3                      
1638  4F44 D0AF         MOVB    @-1026(R15),R2          get eof offset
1638  4F46 FBFE  
1639  4F48 0603         DEC     R3                      offset starts from 0
1640  4F4A 110B         JLT     H118                    file is empty (0 sectors)
1641  4F4C 0429         BLWP    @>005A(R9)                      
1641  4F4E 005A  
1642  4F50 3000         DATA    >3000                   save R2 + R3
1643  4F52 0227         AI      R7,256                  ptr to data buffer area for this file
1643  4F54 0100  
1644  4F56 06A0         BL      @CALSUB                 call subroutine
1644  4F58 433C  
1645  4F5A 4616         DATA    RDOFSC                  read a sector, from offset in R3
1646  4F5C 0429         BLWP    @>005A(R9)                      
1646  4F5E 005A  
1647  4F60 3001         DATA    >3001                   retrieve R2 + R3
1648  4F62 06A0 H118    BL      @UPDFCB                 update current record offset in file ctrl block
1648  4F64 4F94  
1649  4F66 0460         B       @RTURN1                 return to caller
1649  4F68 435A  
1650            *                                       
1651  4F6A 0429 PRFDRS  BLWP    @>005A(R9)              prepare file status byte for FDR
1651  4F6C 005A  
1652  4F6E 8001         DATA    >8001                   access mode in R0
1653  4F70 0429         BLWP    @>005A(R9)                      
1653  4F72 005A  
1654  4F74 8000         DATA    >8000                   save it back
1655  4F76 0202         LI      R2,2                    int in FDR status byte
1655  4F78 0002  
1656  4F7A C129         MOV     @>0056(R9),R4           FDR pointer
1656  4F7C 0056  
1657  4F7E 0A40         SLA     R0,4                    fix or var?
1658  4F80 1703         JNC     H119                    fix
1659  4F82 0202         LI      R2,>0082                int var in FDR
1659  4F84 0082  
1660  4F86 C000         MOV     R0,R0                   dis or int?
1661  4F88 1101 H119    JLT     H120                    int
1662  4F8A 0642         DECT    R2                      dis: remove the int from FDR status
1663  4F8C 0224 H120    AI      R4,12                   point at file status byte in FDR
1663  4F8E 000C  
1664  4F90 06C2         SWPB    R2                      
1665  4F92 045B         B       *R11                    
1666            *                                       
1667  4F94 C129 UPDFCB  MOV     @>0056(R9),R4           update sect + rec offsets in file control block
1667  4F96 0056  
1668  4F98 0224         AI      R4,-6                   
1668  4F9A FFFA  
1669  4F9C 0429         BLWP    @>005A(R9)              set VDP to write
1669  4F9E 005A  
1670  4FA0 0083         DATA    >0083                   address in R4
1671  4FA2 DBC3         MOVB    R3,@-2(R15)             write current sect offset
1671  4FA4 FFFE  
1672  4FA6 06C3         SWPB    R3                      
1673  4FA8 DBC3         MOVB    R3,@-2(R15)                     
1673  4FAA FFFE  
1674  4FAC 0224         AI      R4,4                    point to logical rec offset (for var files)
1674  4FAE 0004  
1675  4FB0 0429         BLWP    @>005A(R9)              set VDP to write
1675  4FB2 005A  
1676  4FB4 0083         DATA    >0083                   address in R4
1677  4FB6 DBC2         MOVB    R2,@-2(R15)             write record offset
1677  4FB8 FFFE  
1678  4FBA 045B         B       *R11                    
1679            *
1680            *----------------------------------
1681            * Opcode 1: Close
1682            * --------------
1683            * PAB 0: >01
1684            *     1:           <--- error code
1685            *   2-3:
1686            *     4:
1687            *     5:
1688            *   6-7:
1689            *     8:
1690            *----------------------------------                                     
1691            *
1692  4FBC 06A0 CLOSE   BL      @CALSUB                 call subroutine
1692  4FBE 433C  
1693  4FC0 51BA         DATA    FFDRVP                  find file FDR
1694  4FC2 0460         B       @UPDFDR                 update FDR + data area, get VIB, return to caller
1694  4FC4 4562  
1695            *
1696            *----------------------------------
1697            * Opcode 2: Read
1698            * --------------
1699            * PAB 0: >02
1700            *     1: file type <--- error code
1701            *   2-3: data buffer address in VDP mem
1702            *     4:
1703            *     5: bytes read
1704            *   6-7: record #
1705            *     8:
1706            *
1707            * Logical records organisation whithin sectors
1708            *
1709            * Fixed records (e.g. rec length = 6)
1710            * 11 11 11 11 11 11 22 22 22 22 22 22 33 33 33 33 33 33 xx xx xx
1711            * Where 11=data for record 1, 22=record 2, 33=record 3, xx=junk bytes
1712            *
1713            * Variable records:
1714            * sz 11 11 11 11 11 11 11 sz 22 22 22 22 22 sz 33 33 FF xx xx xx
1715            * Where sz=record size, 11,22,33=record data, FF=end-of-sector mark, xx=junk
1716            *----------------------------------                                     
1717            *
1718  4FC6 06A0 READ    BL      @CALSUB                 call subroutine
1718  4FC8 433C  
1719  4FCA 51BA         DATA    FFDRVP                  find FDR in VDP buffers, get status from PAB
1720  4FCC 0240         ANDI    R0,>0200                what type of access?
1720  4FCE 0200  
1721  4FD0 1302         JEQ     H122                    update or input: ok
1722  4FD2 0460 H121    B       @ERROR8                 append or output: error illegal opcode
1722  4FD4 4DA4  
1723  4FD6 06A0 H122    BL      @RFDRST                 get status byte in R0, from FDR
1723  4FD8 51E6  
1724  4FDA 110A         JLT     H125                    var
1725  4FDC 06A0         BL      @RRNPAB                 fix: get rec # compare to # of recs/file
1725  4FDE 51FA  
1726  4FE0 1A03         JL      H124                    ok: in file
1727  4FE2 06A0 H123    BL      @ERROR5                 update data and return with error
1727  4FE4 495E  
1728  4FE6 A000         DATA    >A000                   eof reached
1729  4FE8 06A0 H124    BL      @CALSUB                 call subroutine
1729  4FEA 433C  
1730  4FEC 5260         DATA    RRFDR                   load record from disk into FDR data buffer area
1731  4FEE 1011         JMP     H126                    
1732            *                                       
1733  4FF0 06A0 H125    BL      @CALSUB                 var: call subroutine
1733  4FF2 433C  
1734  4FF4 504C         DATA    RRSEC                   load proper sector, point to rec in it
1735  4FF6 10F5         JMP     H123                    skipped if ok: return with eof reached
1736            *                                       
1737  4FF8 0582         INC     R2                      next byte in data buffer
1738  4FFA A004         A       R4,R0                   add rec size to offset
1739  4FFC 0580         INC     R0                      room for end-of-sector mark
1740  4FFE C169         MOV     @>0056(R9),R5           FDR ptr
1740  5000 0056  
1741  5002 0645         DECT    R5                      point to var record offset in sector
1742  5004 06C0         SWPB    R0                      
1743  5006 0429         BLWP    @>005A(R9)              set VDP to write
1743  5008 005A  
1744  500A 00A3         DATA    >00A3                   address in R5
1745  500C DBC0         MOVB    R0,@-2(R15)             update var record offset in sector
1745  500E FFFE  
1746  5010 C004         MOV     R4,R0                   save # of bytes to be read
1747  5012 C129 H126    MOV     @>0054(R9),R4           PAB ptr
1747  5014 0054  
1748  5016 0224         AI      R4,5                    point to char count
1748  5018 0005  
1749  501A 06C0         SWPB    R0                      
1750  501C 0429         BLWP    @>005A(R9)              set VDP to write
1750  501E 005A  
1751  5020 0083         DATA    >0083                   address in R4
1752  5022 DBC0         MOVB    R0,@-2(R15)             write # of char to be read
1752  5024 FFFE  
1753  5026 06C0         SWPB    R0                      make it a word
1754            *                                       
1755  5028 C000 WFDRPB  MOV     R0,R0                   check it
1756  502A 130E         JEQ     H128                    none: return
1757  502C 0429 H127    BLWP    @>005A(R9)              set VDP to read
1757  502E 005A  
1758  5030 0042         DATA    >0042                   address in R2
1759  5032 D0EF         MOVB    @-1026(R15),R3          read 1 byte from FDR data buffer area
1759  5034 FBFE  
1760  5036 0582         INC     R2                      increment source ptr
1761  5038 0429         BLWP    @>005A(R9)              set VDP to write
1761  503A 005A  
1762  503C 0023         DATA    >0023                   address in R1
1763  503E DBC3         MOVB    R3,@-2(R15)             write the byte in PAB data buffer
1763  5040 FFFE  
1764  5042 0581         INC     R1                      increment destination ptr
1765  5044 0600         DEC     R0                      more to read?
1766  5046 16F2         JNE     H127                    yes
1767  5048 0460 H128    B       @RTURN1                 return to caller
1767  504A 435A  
1768            *                                       
1769  504C 06A0 RRSEC   BL      @RCOFCB                 load sector, point to record in it
1769  504E 533A  
1770  5050 C0C3         MOV     R3,R3                   sector offset
1771  5052 1101         JLT     H129                    -1: top of file
1772  5054 1012         JMP     H130                    in file
1773  5056 C003 H129    MOV     R3,R0                   
1774  5058 0580         INC     R0                      next sector
1775  505A 8080         C       R0,R2                   compare to # of sect/file
1776  505C 13F5         JEQ     H128                    end-of-file reached: return to caller (JMP to err)
1777  505E 06A0         BL      @CALSUB                 call subroutine
1777  5060 433C  
1778  5062 4582         DATA    UPDBF                   update data buffer, if needed
1779  5064 C0C0         MOV     R0,R3                   desired offset
1780  5066 04C5         CLR     R5                      
1781  5068 06A0         BL      @UCOFCB                 update sect + rec offsets in control block
1781  506A 52D8  
1782  506C 0227         AI      R7,256                  point to data buffer area (R7 set by UCOFCB)
1782  506E 0100  
1783  5070 06A0         BL      @CALSUB                 call subroutine
1783  5072 433C  
1784  5074 4616         DATA    RDOFSC                  read a sector, from offset in file (in R3)
1785  5076 04C0         CLR     R0                      
1786  5078 1004         JMP     H131                    
1787            *                                       
1788  507A C000 H130    MOV     R0,R0                   in file: test var rec offset (from RCOFCB)
1789  507C 1602         JNE     H131                    inside sector
1790  507E 8080         C       R0,R2                   at beg of sector
1791  5080 13E3         JEQ     H128                    file is empty: return
1792  5082 C080 H131    MOV     R0,R2                   FDR data buffer will be added to R2 by AFDRPT
1793  5084 06A0         BL      @CALSUB                 call subroutine
1793  5086 433C  
1794  5088 52B4         DATA    AFDRPT                  R2=byte in FDR data buf, R1=top of PAB data buf
1795  508A 0429         BLWP    @>005A(R9)              set VDP to read
1795  508C 005A  
1796  508E 0042         DATA    >0042                   address in R2
1797  5090 D12F         MOVB    @-1026(R15),R4          get first byte (rec length)
1797  5092 FBFE  
1798  5094 0984         SRL     R4,8                    make it a word
1799  5096 C000         MOV     R0,R0                   var rec offset
1800  5098 1306         JEQ     H132                    
1801  509A 0284         CI      R4,>00FF                is it >FF (end of sector mark) ?
1801  509C 00FF  
1802  509E 1603         JNE     H132                    no
1803  50A0 06A0         BL      @RCOFCB                 yes: get sect + rec offsets from control block
1803  50A2 533A  
1804  50A4 10D8         JMP     H129                    try again with next sector
1805            *                                       
1806  50A6 0429 H132    BLWP    @>005A(R9)                      
1806  50A8 005A  
1807  50AA 0011         DATA    >0011                   retrieve return address from stack in R11
1808  50AC 05CB         INCT    R11                     skip the JMP to eof reached error
1809  50AE 045B         B       *R11                    
1810            *
1811            *------------------------------------
1812            * Opcode 3: Write
1813            * --------------
1814            * PAB 0: >03
1815            *     1: file type <--- error code
1816            *   2-3: data buffer address in VDP mem
1817            *     4:
1818            *     5: bytes to write
1819            *   6-7: record #
1820            *     8:
1821            *------------------------------------                                   
1822            *
1823  50B0 06A0 WRITE   BL      @CALSUB                 call subroutine
1823  50B2 433C  
1824  50B4 51BA         DATA    FFDRVP                  find FDR in VDP buffers
1825  50B6 0240         ANDI    R0,>0600                keep only access mode
1825  50B8 0600  
1826  50BA 0280         CI      R0,>0400                is it input
1826  50BC 0400  
1827  50BE 1389         JEQ     H121                    yes: return with error illegal opcode
1828  50C0 06A0         BL      @RFDRST                 get file status byte from FDR
1828  50C2 51E6  
1829  50C4 1113         JLT     H134                    var                     
1830  50C6 06A0         BL      @RRNPAB                 fix: get rec # from PAB, sect # in R0
1830  50C8 51FA  
1831  50CA 1A0C         JL      H133                    less that total rec/file
1832  50CC 0429         BLWP    @>005A(R9)              past eof: expand file
1832  50CE 005A  
1833  50D0 D800         DATA    >D800                   save R0, R1, R3, R4
1834  50D2 C0C0         MOV     R0,R3                   desired sector offset
1835  50D4 06A0         BL      @CALSUB                 call subroutine
1835  50D6 433C  
1836  50D8 464C         DATA    APSCTS                  append enough sectors to reach offset in R3
1837  50DA 0429         BLWP    @>005A(R9)                      
1837  50DC 005A  
1838  50DE D801         DATA    >D801                   restore R0, R1, R3, R4
1839  50E0 06A0         BL      @URFFDR                 update # of rec/file in FDR
1839  50E2 5304  
1840            *                                       
1841  50E4 06A0 H133    BL      @CALSUB                 in file: call subroutine
1841  50E6 433C  
1842  50E8 5260         DATA    RRFDR                   fetch rec from disk into FDR data buffer area
1843  50EA 1053         JMP     H138                    set update data flag, write data, return
1844            *                                       
1845  50EC 06A0 H134    BL      @RCOFCB                 var: R2=sect/file R3=sect offset R0=rec offset
1845  50EE 533A  
1846  50F0 C0C3         MOV     R3,R3                   sector offset in file
1847  50F2 1101         JLT     H135                    -1: top of file
1848  50F4 100B         JMP     H136                    in file
1849  50F6 0429 H135    BLWP    @>005A(R9)              next sector loop
1849  50F8 005A  
1850  50FA 3000         DATA    >3000                   save R2 + R3
1851  50FC 06A0         BL      @CALSUB                 call subroutine
1851  50FE 433C  
1852  5100 4582         DATA    UPDBF                   update data buffer if needed
1853  5102 0429         BLWP    @>005A(R9)                      
1853  5104 005A  
1854  5106 3001         DATA    >3001                   retrieve R2 + R3
1855  5108 0583         INC     R3                      next sector
1856  510A 04C0         CLR     R0                      init char offset in sector
1857            *                                       
1858  510C 8083 H136    C       R3,R2                   did we reach last sector?
1859  510E 1609         JNE     H137                    no
1860  5110 0429         BLWP    @>005A(R9)              yes: expand file
1860  5112 005A  
1861  5114 9000         DATA    >9000                   save R0 + R4
1862  5116 06A0         BL      @CALSUB                 call subroutine
1862  5118 433C  
1863  511A 464C         DATA    APSCTS                  get last sector then append sectors to reach R3
1864  511C 0429         BLWP    @>005A(R9)                      
1864  511E 005A  
1865  5120 9001         DATA    >9001                   retrieve R0 + R4
1866            *                                       
1867  5122 C169 H137    MOV     @>0054(R9),R5           PAB ptr
1867  5124 0054  
1868  5126 0225         AI      R5,5                    point to char count
1868  5128 0005  
1869  512A 0429         BLWP    @>005A(R9)              set VDP to read
1869  512C 005A  
1870  512E 00A2         DATA    >00A2                   address in R5
1871  5130 D12F         MOVB    @-1026(R15),R4          get # of chars to write
1871  5132 FBFE  
1872  5134 0984         SRL     R4,8                    make it a word
1873  5136 C144         MOV     R4,R5                   
1874  5138 A140         A       R0,R5                   add current char offset in sector
1875  513A 0585         INC     R5                      make room for size byte
1876  513C 0285         CI      R5,>00FF                past end of sector?
1876  513E 00FF  
1877  5140 1BDA         JH      H135                    yes: not enough room, try next sector
1878  5142 0702         SETO    R2                      ok: rec will fit in sector
1879  5144 C069         MOV     @>0056(R9),R1           FDR ptr
1879  5146 0056  
1880  5148 A045         A       R5,R1                   past-last-byte offset
1881  514A 0221         AI      R1,256                  ptr to data buffer area
1881  514C 0100  
1882  514E 0429         BLWP    @>005A(R9)              set VDP to write
1882  5150 005A  
1883  5152 0023         DATA    >0023                   address in R1
1884  5154 DBC2         MOVB    R2,@-2(R15)             write end-of-sect mark to FDR data buffer area
1884  5156 FFFE  
1885  5158 0429         BLWP    @>005A(R9)                      
1885  515A 005A  
1886  515C 8000         DATA    >8000                   save R0 (current byte offset in sector)
1887  515E C003         MOV     R3,R0                   
1888  5160 06A0         BL      @UCOFCB                 update sect + rec offsets in control block
1888  5162 52D8  
1889  5164 0221         AI      R1,18                   point to eof offset in FDR (R1 modified by UCOFCB)
1889  5166 0012  
1890  5168 0429         BLWP    @>005A(R9)              set VDP to write
1890  516A 005A  
1891  516C 0023         DATA    >0023                   address in R1
1892  516E DBC5         MOVB    R5,@-2(R15)             update eof offset in last sector, in FDR
1892  5170 FFFE  
1893  5172 06A0         BL      @URFFDR                 update # of rec/file in FDR
1893  5174 5304  
1894  5176 0429         BLWP    @>005A(R9)                      
1894  5178 005A  
1895  517A 2001         DATA    >2001                   retrieve old R0 in R2 (current byte offset)
1896  517C C004         MOV     R4,R0                   record size
1897  517E 06A0         BL      @CALSUB                 call subroutine
1897  5180 433C  
1898  5182 52B4         DATA    AFDRPT                  get FDR data buffer in R2, PAB data buffer in R1
1899  5184 06C4         SWPB    R4                      
1900  5186 0429         BLWP    @>005A(R9)              set VDP to write
1900  5188 005A  
1901  518A 0043         DATA    >0043                   address in R2
1902  518C DBC4         MOVB    R4,@-2(R15)             write size byte to FDR data buffer
1902  518E FFFE  
1903  5190 0582         INC     R2                      increment dest pointer
1904            *                                       
1905  5192 C0C2 H138    MOV     R2,R3                   invert source and dest
1906  5194 C081         MOV     R1,R2                   so we can use the same read-write loop
1907  5196 C043         MOV     R3,R1                   than the read opcode
1908  5198 C129         MOV     @>0056(R9),R4           FDR ptr
1908  519A 0056  
1909  519C 0604         DEC     R4                      pointer to drive # for that file
1910  519E 0429         BLWP    @>005A(R9)              set VDP to read
1910  51A0 005A  
1911  51A2 0082         DATA    >0082                   address in R4
1912  51A4 D16F         MOVB    @-1026(R15),R5          get drive #
1912  51A6 FBFE  
1913  51A8 0265         ORI     R5,>8000                add update data area flag
1913  51AA 8000  
1914  51AC 0429         BLWP    @>005A(R9)              set VDP to write
1914  51AE 005A  
1915  51B0 0083         DATA    >0083                   address in R4
1916  51B2 DBC5         MOVB    R5,@-2(R15)             write back flagged byte
1916  51B4 FFFE  
1917  51B6 0460         B       @WFDRPB                 to read-write loop
1917  51B8 5028  
1918            *                                       
1919  51BA 06A0 FFDRVP  BL      @CALSUB                 find FDR in VDP buffer
1919  51BC 433C  
1920  51BE 4A90         DATA    FFFDRV                  find file FDR
1921  51C0 C104         MOV     R4,R4                   found?
1922  51C2 1303         JEQ     AFPGPF                  yes
1923  51C4 06A0         BL      @ERROR5                 no: return with error
1923  51C6 495E  
1924  51C8 E000         DATA    >E000                   file error
1925  51CA 0581 AFPGPF  INC     R1                      point to filename in FDR
1926  51CC CA41         MOV     R1,@>0056(R9)           new FDR ptr
1926  51CE 0056  
1927  51D0 C129         MOV     @>0054(R9),R4           get PAB ptr
1927  51D2 0054  
1928  51D4 0584         INC     R4                      point to status byte
1929  51D6 04C0         CLR     R0                      
1930  51D8 0429         BLWP    @>005A(R9)              set VDP to read
1930  51DA 005A  
1931  51DC 0082         DATA    >0082                   address in R4
1932  51DE D02F         MOVB    @-1026(R15),R0          get file status
1932  51E0 FBFE  
1933  51E2 0460         B       @RTURN1                 return to caller
1933  51E4 435A  
1934            *                                       
1935  51E6 C129 RFDRST  MOV     @>0056(R9),R4           get status byte from FDR
1935  51E8 0056  
1936  51EA 0224         AI      R4,12                   point to status byte
1936  51EC 000C  
1937  51EE 0429         BLWP    @>005A(R9)              set VDP to read
1937  51F0 005A  
1938  51F2 0082         DATA    >0082                   address in R4
1939  51F4 D02F         MOVB    @-1026(R15),R0          read status byte
1939  51F6 FBFE  
1940  51F8 045B         B       *R11                    
1941            *                                       
1942  51FA D16F RRNPAB  MOVB    @-1026(R15),R5          get record # from PAB, check if valid
1942  51FC FBFE  
1943  51FE 0985         SRL     R5,8                    
1944  5200 1602         JNE     H139                    get # of rec/sector from FDR
1945  5202 0205         LI      R5,256                  0: default to 256
1945  5204 0100  
1946  5206 C0E9 H139    MOV     @>0054(R9),R3           PAB ptr
1946  5208 0054  
1947  520A 0223         AI      R3,6                    point to rec #
1947  520C 0006  
1948  520E 0429         BLWP    @>005A(R9)              set VDP to read
1948  5210 005A  
1949  5212 0062         DATA    >0062                   address in R3
1950  5214 D06F         MOVB    @-1026(R15),R1          get record # from PAB
1950  5216 FBFE  
1951  5218 06C1         SWPB    R1                      
1952  521A D06F         MOVB    @-1026(R15),R1                  
1952  521C FBFE  
1953  521E 06C1         SWPB    R1                      
1954  5220 C001         MOV     R1,R0                   save it
1955  5222 1101         JLT     H140                    too big
1956  5224 1003         JMP     H141                    ok
1957  5226 06A0 H140    BL      @ERROR5                 update data then return with error
1957  5228 495E  
1958  522A 8000         DATA    >8000                   memory full
1959  522C 0580 H141    INC     R0                      next record
1960  522E 0429         BLWP    @>005A(R9)              set VDP to write
1960  5230 005A  
1961  5232 0063         DATA    >0063                   address in R3
1962  5234 DBC0         MOVB    R0,@-2(R15)             write back # of future record
1962  5236 FFFE  
1963  5238 06C0         SWPB    R0                      
1964  523A DBC0         MOVB    R0,@-2(R15)                     
1964  523C FFFE  
1965  523E 04C0         CLR     R0                      
1966  5240 C0C1         MOV     R1,R3                   save # of desired rec
1967  5242 3C05         DIV     R5,R0                   divide by # of rec/sector = sect # in R0
1968  5244 C0A9 RNFISE  MOV     @>0056(R9),R2           FDR ptr
1968  5246 0056  
1969  5248 0222         AI      R2,18                   point to total # of rec (# of sectors for var)
1969  524A 0012  
1970  524C 0429         BLWP    @>005A(R9)              set VDP to read
1970  524E 005A  
1971  5250 0042         DATA    >0042                   address in R2
1972  5252 D0AF         MOVB    @-1026(R15),R2          get total # of recs/file (sect/file for var)
1972  5254 FBFE  
1973  5256 06C2         SWPB    R2                      
1974  5258 D0AF         MOVB    @-1026(R15),R2          remember: bytes are swapped
1974  525A FBFE  
1975  525C 8083         C       R3,R2                   compare with desired record (ignored by var)
1976  525E 045B         B       *R11                    
1977            *                                       
1978  5260 0429 RRFDR   BLWP    @>005A(R9)              fetch record into FDR data buffer area
1978  5262 005A  
1979  5264 4000         DATA    >4000                   save R1
1980  5266 0224         AI      R4,-18                  ptr to top of control block
1980  5268 FFEE  
1981  526A 0429         BLWP    @>005A(R9)              set VDP to read
1981  526C 005A  
1982  526E 0082         DATA    >0082                   address in R4
1983  5270 D16F         MOVB    @-1026(R15),R5          get current sector offset in file
1983  5272 FBFE  
1984  5274 06C5         SWPB    R5                      
1985  5276 D16F         MOVB    @-1026(R15),R5                  
1985  5278 FBFE  
1986  527A 0B85         SRC     R5,8                    
1987  527C 1105         JLT     H142                    -1: top of file
1988  527E 8005         C       R5,R0                   compare with desired offset (from RRNPAB)
1989  5280 130B         JEQ     H143                    same
1990  5282 06A0         BL      @CALSUB                 call subroutine
1990  5284 433C  
1991  5286 4582         DATA    UPDBF                   update data buffer if needed
1992  5288 C0C0 H142    MOV     R0,R3                   desired sector offset in file
1993  528A 06A0         BL      @UCOFCB                 update sect + rec offsets in control block
1993  528C 52D8  
1994  528E 0227         AI      R7,256                  point to data buffer area (R7 set by UCOFCB)
1994  5290 0100  
1995  5292 06A0         BL      @CALSUB                 call subroutine
1995  5294 433C  
1996  5296 4616         DATA    RDOFSC                  read a sector from offset in file (in R3)
1997  5298 0429 H143    BLWP    @>005A(R9)                      
1997  529A 005A  
1998  529C 4001         DATA    >4001                   retrieve R1
1999  529E C0E9         MOV     @>0056(R9),R3           FDR ptr
1999  52A0 0056  
2000  52A2 0223         AI      R3,17                   point to record length
2000  52A4 0011  
2001  52A6 0429         BLWP    @>005A(R9)              set VDP to read
2001  52A8 005A  
2002  52AA 0062         DATA    >0062                   address in R3
2003  52AC D02F         MOVB    @-1026(R15),R0          get rec length in bytes
2003  52AE FBFE  
2004  52B0 0980         SRL     R0,8                    make it a word
2005  52B2 3840         MPY     R0,R1                   calc file offset in bytes
2006  52B4 A0A9 AFDRPT  A       @>0056(R9),R2           add FDR ptr
2006  52B6 0056  
2007  52B8 0222         AI      R2,256                  point inside data buffer area
2007  52BA 0100  
2008  52BC C0E9         MOV     @>0054(R9),R3           PAB ptr
2008  52BE 0054  
2009  52C0 05C3         INCT    R3                      point to data buffer address
2010  52C2 0429         BLWP    @>005A(R9)              set VDP to read
2010  52C4 005A  
2011  52C6 0062         DATA    >0062                   address in R3
2012  52C8 D06F         MOVB    @-1026(R15),R1          get PAB data buffer address
2012  52CA FBFE  
2013  52CC 06C1         SWPB    R1                      
2014  52CE D06F         MOVB    @-1026(R15),R1                  
2014  52D0 FBFE  
2015  52D2 06C1         SWPB    R1                      
2016  52D4 0460         B       @RTURN1                 return
2016  52D6 435A  
2017            *                               
2018  52D8 C1E9 UCOFCB  MOV     @>0056(R9),R7           update sect + rec offsets in control block
2018  52DA 0056  
2019  52DC C047         MOV     R7,R1                   FDR ptr
2020  52DE 0221         AI      R1,-6                   top of file control block
2020  52E0 FFFA  
2021  52E2 0429         BLWP    @>005A(R9)              set VDP to write
2021  52E4 005A  
2022  52E6 0023         DATA    >0023                   address in R1
2023  52E8 DBC0         MOVB    R0,@-2(R15)             current sector offset in file
2023  52EA FFFE  
2024  52EC 06C0         SWPB    R0                      
2025  52EE DBC0         MOVB    R0,@-2(R15)                     
2025  52F0 FFFE  
2026  52F2 0221         AI      R1,4                    point to var rec offset in sector
2026  52F4 0004  
2027  52F6 06C5         SWPB    R5                      
2028  52F8 0429         BLWP    @>005A(R9)              set VDP to write
2028  52FA 005A  
2029  52FC 0023         DATA    >0023                   address in R1
2030  52FE DBC5         MOVB    R5,@-2(R15)             first free byte in current sector
2030  5300 FFFE  
2031  5302 045B         B       *R11                    
2032            *                                       
2033  5304 C0A9 URFFDR  MOV     @>0056(R9),R2           update # of rec/file in FDR
2033  5306 0056  
2034  5308 0429         BLWP    @>005A(R9)              set VDP to read
2034  530A 005A  
2035  530C 0042         DATA    >0042                   address in R2 (FDR ptr)
2036  530E D2AF         MOVB    @-1026(R15),R10         get first char of filename
2036  5310 FBFE  
2037  5312 026A         ORI     R10,>8000               set was modified flag
2037  5314 8000  
2038  5316 0429         BLWP    @>005A(R9)              set VDP to write
2038  5318 005A  
2039  531A 0043         DATA    >0043                   address in R2
2040  531C DBCA         MOVB    R10,@-2(R15)            write flagged char back
2040  531E FFFE  
2041  5320 0222         AI      R2,18                   point to # of recs/file in FDR
2041  5322 0012  
2042  5324 0583         INC     R3                      one more
2043  5326 0429         BLWP    @>005A(R9)              set VDP to write
2043  5328 005A  
2044  532A 0043         DATA    >0043                   address in R2
2045  532C 06C3         SWPB    R3                      update # of recs/file
2046  532E DBC3         MOVB    R3,@-2(R15)                     
2046  5330 FFFE  
2047  5332 06C3         SWPB    R3                      
2048  5334 DBC3         MOVB    R3,@-2(R15)                     
2048  5336 FFFE  
2049  5338 045B         B       *R11                    
2050            *                                       
2051  533A C229 RCOFCB  MOV     @>0056(R9),R8           get rec offset, compare sect with total
2051  533C 0056  
2052  533E C108         MOV     R8,R4                   FDR ptr
2053  5340 0224         AI      R4,256                  point to data buffer area
2053  5342 0100  
2054  5344 0648         DECT    R8                      point to var record offset
2055  5346 0429         BLWP    @>005A(R9)              set VDP to read
2055  5348 005A  
2056  534A 0102         DATA    >0102                   address in R8
2057  534C D0AF         MOVB    @-1026(R15),R2          get var rec offset in current sector
2057  534E FBFE  
2058  5350 0982         SRL     R2,8                    make it a word
2059  5352 C28B         MOV     R11,R10                 save return point
2060  5354 06A0         BL      @FDR2B2                 get 2 bytes from FDR (at R8-4) into R0
2060  5356 4860  
2061  5358 FFFC         DATA    -4                      current sector offset in file
2062  535A C0C0         MOV     R0,R3                   save it
2063  535C C2CA         MOV     R10,R11                 restore return point
2064  535E C002         MOV     R2,R0                   var record offset
2065  5360 0460         B       @RNFISE                 get # of sect/file from FDR, return
2065  5362 5244  
2066            *
2067            *------------------------------------
2068            * Opcode 4: Rewind
2069            * --------------
2070            * PAB 0: >04
2071            *     1: file type <--- error code
2072            *   2-3:
2073            *     4:
2074            *     5:
2075            *   6-7: record #  <--- >0000 if sequential
2076            *     8:
2077            *------------------------------------                                   
2078            *
2079  5364 06A0 RWIND1  BL      @CALSUB                 call subroutine
2079  5366 433C  
2080  5368 51BA         DATA    FFDRVP                  find FDR in VDP buffers, read status from PAB
2081  536A 0429         BLWP    @>005A(R9)                      
2081  536C 005A  
2082  536E 8000         DATA    >8000                   save R0 (status from PAB)
2083  5370 0240         ANDI    R0,>0600                keep only access mode
2083  5372 0600  
2084  5374 1305         JEQ     H144                    update is ok
2085  5376 0280         CI      R0,>0400                is it input?
2085  5378 0400  
2086  537A 1302         JEQ     H144                    yes: ok
2087  537C 0460         B       @ERROR8                 output or append: return with illegal opcode
2087  537E 4DA4  
2088  5380 06A0 H144    BL      @CALSUB                 call subroutine
2088  5382 433C  
2089  5384 4582         DATA    UPDBF                   update data buffer if needed
2090  5386 0429         BLWP    @>005A(R9)                      
2090  5388 005A  
2091  538A 8001         DATA    >8001                   retrieve R0 (status from PAB)
2092  538C 0240         ANDI    R0,>0100                sequential or reloc?
2092  538E 0100  
2093  5390 1611         JNE     H145                    reloc: don't do anything, return
2094            *                                       
2095  5392 04C2 RWIND2  CLR     R2                      rewind file: record offset = 0
2096  5394 0703         SETO    R3                      current record = -1 (none)
2097  5396 06A0         BL      @UPDFCB                 update file control block
2097  5398 4F94  
2098  539A 04C0         CLR     R0                      record 0
2099  539C C229         MOV     @>0054(R9),R8           get PAB ptr
2099  539E 0054  
2100  53A0 0228         AI      R8,6                    point to record #
2100  53A2 0006  
2101  53A4 0429         BLWP    @>005A(R9)              set VDP to write
2101  53A6 005A  
2102  53A8 0103         DATA    >0103                   address in R8
2103  53AA DBC0         MOVB    R0,@-2(R15)             write record #
2103  53AC FFFE  
2104  53AE 1000         NOP                             
2105  53B0 DBC0         MOVB    R0,@-2(R15)                     
2105  53B2 FFFE  
2106  53B4 0460 H145    B       @RTURN1                 return to caller
2106  53B6 435A  
2107            *
2108            *------------------------------------
2109            * Opcode 5: Load
2110            * --------------
2111            * PAB 0: >05
2112            *     1: file type  <--- error code
2113            *   2-3: data buffer address in VDP mem
2114            *     4:
2115            *     5:
2116            *   6-7: maximum # of bytes (size of buffer)
2117            *     8:
2118            *------------------------------------                                   
2119            *
2120  53B8 06A0 LOAD    BL      @CALSUB                 call subroutine
2120  53BA 433C  
2121  53BC 4AEE         DATA    FNDFDR                  find FDR on disk
2122  53BE C104         MOV     R4,R4                   found?
2123  53C0 1303         JEQ     H147                    yes
2124  53C2 06A0 H146    BL      @ERROR5                 no: return with error
2124  53C4 495E  
2125  53C6 E000         DATA    >E000                   file error
2126  53C8 06A0 H147    BL      @FDR2B1                 get 2 bytes from FDR into R0
2126  53CA 485C  
2127  53CC 000C         DATA    12                      file status byte
2128  53CE 0240         ANDI    R0,>0100                is it program?
2128  53D0 0100  
2129  53D2 13F7         JEQ     H146                    no: file error
2130  53D4 05C8         INCT    R8                      point to # of sect/file in FDR
2131  53D6 0429         BLWP    @>005A(R9)              set VDP to read
2131  53D8 005A  
2132  53DA 0102         DATA    >0102                   address in R8
2133  53DC D06F         MOVB    @-1026(R15),R1          get # of sectors in file
2133  53DE FBFE  
2134  53E0 06C1         SWPB    R1                      
2135  53E2 D06F         MOVB    @-1026(R15),R1                  
2135  53E4 FBFE  
2136  53E6 0B81         SRC     R1,8                    
2137  53E8 13EC         JEQ     H146                    0=empty file: return with file error
2138  53EA 06A0         BL      @RBANB                  get data buffer address in R7, # of sectors in R2
2138  53EC 54AA  
2139  53EE 05C8         INCT    R8                      point to eof offset in FDR
2140  53F0 04C4         CLR     R4                      
2141  53F2 0429         BLWP    @>005A(R9)              set VDP to read
2141  53F4 005A  
2142  53F6 0102         DATA    >0102                   address in R8
2143  53F8 D12F         MOVB    @-1026(R15),R4          get # of bytes in last sector
2143  53FA FBFE  
2144  53FC 8081         C       R1,R2                   compare # of sect with max in PAB
2145  53FE 1BE1         JH      H146                    file is too big: return with file error
2146  5400 1602         JNE     H148                    file is smaller
2147  5402 8100         C       R0,R4                   same # of sect: check bytes in last sector
2148  5404 1ADE         JL      H146                    file is too big: file error
2149  5406 04C3 H148    CLR     R3                      sector offset in file
2150  5408 06C4         SWPB    R4                      
2151  540A 0601 H149    DEC     R1                      next sector
2152  540C 130D         JEQ     H150                    done
2153  540E 0429         BLWP    @>005A(R9)                      
2153  5410 005A  
2154  5412 D900         DATA    >D900                   save R0, R1, R3, R4, R7
2155  5414 06A0         BL      @CALSUB                 call subroutine
2155  5416 433C  
2156  5418 4616         DATA    RDOFSC                  read a sector from offset in R3
2157  541A 0429         BLWP    @>005A(R9)              restore R0, R1, R3, R4, R7
2157  541C 005A  
2158  541E D901         DATA    >D901                   
2159  5420 0583         INC     R3                      next sector
2160  5422 0227         AI      R7,256                  256 bytes further in PAB buffer
2160  5424 0100  
2161  5426 10F1         JMP     H149                    keep going
2162            *                                       
2163  5428 C104 H150    MOV     R4,R4                   
2164  542A 1604         JNE     H151                    
2165  542C 06A0         BL      @CALSUB                 call subroutine
2165  542E 433C  
2166  5430 4616         DATA    RDOFSC                  read a sector from offset in R3
2167  5432 1011         JMP     H152                    done
2168            *                                       
2169  5434 C147 H151    MOV     R7,R5                   save PAB data buffer ptr
2170  5436 C1E9         MOV     @>0056(R9),R7           FDR ptr
2170  5438 0056  
2171  543A 0227         AI      R7,256                  point to FDR data area
2171  543C 0100  
2172  543E 0429         BLWP    @>005A(R9)                      
2172  5440 005A  
2173  5442 0D00         DATA    >0D00                   save R4, R5, R7
2174  5444 06A0         BL      @CALSUB                 call subroutine
2174  5446 433C  
2175  5448 4616         DATA    RDOFSC                  read a sector from offset in R3
2176  544A 0429         BLWP    @>005A(R9)              restore R4 in R0, R5 in R1, R7 in R2
2176  544C 005A  
2177  544E E001         DATA    >E001                   
2178  5450 06A0         BL      @CALSUB                 call subroutine
2178  5452 433C  
2179  5454 5028         DATA    WFDRPB                  write bytes from FDR data buffer to PAB data buf
2180  5456 0460 H152    B       @UPDFDR                 update FDR, data buffer, VIB and return to caller
2180  5458 4562  
2181            *
2182            *------------------------------------
2183            * Opcode 6: Save
2184            * --------------
2185            * PAB 0: >06
2186            *     1: file type  <--- error code
2187            *   2-3: data buffer address in VDP mem
2188            *     4:
2189            *     5:
2190            *   6-7: # of bytes to save
2191            *     8:
2192            *------------------------------------                                   
2193            *
2194  545A 06A0 SAVE    BL      @CALSUB                 call subroutine
2194  545C 433C  
2195  545E 447C         DATA    CRFIL1                  create file
2196  5460 06A0         BL      @RBANB                  get PAB buffer ptr + # of bytes
2196  5462 54AA  
2197  5464 04C3         CLR     R3                      sector offset 0
2198  5466 0429 H153    BLWP    @>005A(R9)                      
2198  5468 005A  
2199  546A B100         DATA    >B100                   save R0, R2, R3, R7
2200  546C 06A0         BL      @CALSUB                 call subroutine
2200  546E 433C  
2201  5470 4636         DATA    WROFSC                  write sector to offset in R3
2202  5472 0429         BLWP    @>005A(R9)                      
2202  5474 005A  
2203  5476 B101         DATA    >B101                   retrieve R0, R2, R3, R7
2204  5478 0583         INC     R3                      next sector
2205  547A 0227         AI      R7,256                  256 bytes further in PAB data buffer
2205  547C 0100  
2206  547E 0602         DEC     R2                      next sector
2207  5480 16F2         JNE     H153                    more to do
2208            *                                       
2209  5482 C069         MOV     @>0056(R9),R1           FDR ptr
2209  5484 0056  
2210  5486 0221         AI      R1,12                   point to file status byte
2210  5488 000C  
2211  548A 0202         LI      R2,>0100                value for program file
2211  548C 0100  
2212  548E 0429         BLWP    @>005A(R9)              set VDP to write
2212  5490 005A  
2213  5492 0023         DATA    >0023                   address in R1
2214  5494 DBC2         MOVB    R2,@-2(R15)             write file status byte in FDR
2214  5496 FFFE  
2215  5498 0221         AI      R1,4                    point to eof offset byte in FDR
2215  549A 0004  
2216  549C 0429         BLWP    @>005A(R9)              set VDP to write
2216  549E 005A  
2217  54A0 0023         DATA    >0023                   address in R1
2218  54A2 DBC0         MOVB    R0,@-2(R15)             # of bytes in last sector
2218  54A4 FFFE  
2219  54A6 0460         B       @UPDFDR                 update FDR, data buffer, VIB then return to caller
2219  54A8 4562  
2220            *                                       
2221  54AA C029 RBANB   MOV     @>0054(R9),R0           get buffer address + # of bytes
2221  54AC 0054  
2222  54AE 05C0         INCT    R0                      data buffer in PAB
2223  54B0 0429         BLWP    @>005A(R9)              set VDP to read
2223  54B2 005A  
2224  54B4 0002         DATA    >0002                   address in R0
2225  54B6 D1EF         MOVB    @-1026(R15),R7          get data buffer address
2225  54B8 FBFE  
2226  54BA 06C7         SWPB    R7                      
2227  54BC D1EF         MOVB    @-1026(R15),R7                  
2227  54BE FBFE  
2228  54C0 06C7         SWPB    R7                      
2229  54C2 0220         AI      R0,4                    point to # of bytes to transfer
2229  54C4 0004  
2230  54C6 0429         BLWP    @>005A(R9)              set VDP to read
2230  54C8 005A  
2231  54CA 0002         DATA    >0002                   address in R0
2232  54CC D0AF         MOVB    @-1026(R15),R2          get # of bytes to be transfered
2232  54CE FBFE  
2233  54D0 0982         SRL     R2,8                    make it # of sectors (256 bytes each)
2234  54D2 04C0         CLR     R0                      
2235  54D4 D02F         MOVB    @-1026(R15),R0          see if one more is needed
2235  54D6 FBFE  
2236  54D8 1301         JEQ     H154                    no
2237  54DA 0582         INC     R2                      yes: one more sector
2238  54DC 045B H154    B       *R11                    
2239            *
2240            *-------------------------------------
2241            * Opcode 9: Status
2242            * --------------
2243            * PAB 0: >09
2244            *     1:
2245            *   2-3:
2246            *     4:
2247            *     5:
2248            *   6-7: record #
2249            *     8:           <--- file status
2250            *
2251            * Status bits, returned in PAB byte 8:
2252            * >80: file not found
2253            * >40: file is protected
2254            * >20:
2255            * >10: internal (else display or program)
2256            * >08: program file
2257            * >04: variable (else fixed or program)
2258            * >02: memory full
2259            * >01: end-of-file reached
2260            *-------------------------------------                                  
2261            *
2262  54DE 06A0 STATUS  BL      @CALSUB                 call subroutine
2262  54E0 433C  
2263  54E2 4A90         DATA    FFFDRV                  save filename in comp buf, then find FDR in VDP
2264  54E4 C104         MOV     R4,R4                   found?
2265  54E6 1310         JEQ     H155                    yes
2266            *                                       
2267  54E8 06A0         BL      @CALSUB                 no: call subroutine
2267  54EA 433C  
2268  54EC 4AF8         DATA    FFDRDK                  find FDR on disk
2269  54EE 0200         LI      R0,>8000                value for file not found
2269  54F0 8000  
2270  54F2 C104         MOV     R4,R4                   found?
2271  54F4 1649         JNE     H164                    no: return with that value
2272  54F6 C069         MOV     @>0056(R9),R1           yes: ptr to FDR
2272  54F8 0056  
2273  54FA 04C2         CLR     R2                      
2274  54FC 0429         BLWP    @>005A(R9)              set VDP to write
2274  54FE 005A  
2275  5500 0023         DATA    >0023                   address in R1
2276  5502 DBC2         MOVB    R2,@-2(R15)             invalidate that FDR (file not open)
2276  5504 FFFE  
2277  5506 1036         JMP     H162                    transfer FDR status to PAB status byte
2278            *                                       
2279  5508 06A0 H155    BL      @CALSUB                 file is open: call subroutine
2279  550A 433C  
2280  550C 51CA         DATA    AFPGPF                  adjust FDR ptr, get PAB file type into R4
2281  550E 06A0         BL      @RFDRST                 get status byte from FDR
2281  5510 51E6  
2282  5512 1101         JLT     H156                    var
2283  5514 1006         JMP     H157                    fix
2284            *                                       
2285  5516 06A0 H156    BL      @CALSUB                 var: call subroutine
2285  5518 433C  
2286  551A 504C         DATA    RRSEC                   load wanted sector, point to wanted rec in buffer
2287  551C 1013         JMP     H159                    out of range
2288  551E 04C2         CLR     R2                      ok: clear flag
2289  5520 1029         JMP     H162                    copy status byte from FDR into PAB, return
2290            *                                       
2291  5522 D16F H157    MOVB    @-1026(R15),R5          fix: get rec/sect byte
2291  5524 FBFE  
2292  5526 0985         SRL     R5,8                    make it a word
2293  5528 1602         JNE     H158                    
2294  552A 0205         LI      R5,>0100                00 (program files) means 256
2294  552C 0100  
2295  552E 06A0 H158    BL      @PABR2B                 get 2 bytes from PAB into R0
2295  5530 4856  
2296  5532 0006         DATA    6                       # of wanted record
2297  5534 C0C0         MOV     R0,R3                   save it
2298  5536 111C         JLT     H161                    too big: set memory full bit in PAB status byte
2299  5538 06A0         BL      @RNFISE                 get # recs/file into R2, comp with R3
2299  553A 5244  
2300  553C 04C2         CLR     R2                      
2301  553E 1A1A         JL      H162                    in file: copy file type bits, return
2302  5540 3C85         DIV     R5,R2                   how many sectors do we need?
2303  5542 C0C2         MOV     R2,R3                   save result
2304            *                                       
2305  5544 06A0 H159    BL      @FDR2B1                 get 2 bytes from FDR into R0
2305  5546 485C  
2306  5548 000E         DATA    14                      # of sectors/file
2307  554A 0583         INC     R3                      plus 1 sector for FDR
2308  554C 0202         LI      R2,>0100                value for eof reached in PAB status
2308  554E 0100  
2309  5550 60C0         S       R0,R3                   are there enough sectors in file for these recs?
2310  5552 1501         JGT     H160                    
2311  5554 100F         JMP     H162                    yes: we reached the eof
2312  5556 06A0 H160    BL      @CALSUB                 call subroutine
2312  5558 433C  
2313  555A 49BE         DATA    RWVIB                   load VIB (sector 0)
2314  555C C103         MOV     R3,R4                   number of sectors that will be needed
2315  555E C205         MOV     R5,R8                   VIB ptr
2316  5560 0228         AI      R8,10                   skip 10 bytes (required by CFSVIB)
2316  5562 000A  
2317  5564 06A0         BL      @CFSVIB                 count free sectors in bitmap, into R3
2317  5566 5752  
2318  5568 0202         LI      R2,>0100                value for eof reached
2318  556A 0100  
2319  556C 8103         C       R3,R4                   are there that many free sectors?
2320  556E 1402         JHE     H162                    yes
2321  5570 0202 H161    LI      R2,>0200                value for memory full
2321  5572 0200  
2322            *                                       
2323  5574 06A0 H162    BL      @FDR2B1                 get 2 bytes from FDR into R0
2323  5576 485C  
2324  5578 000C         DATA    12                      file status byte
2325  557A 0240         ANDI    R0,>8F00                mask irrelevant bits
2325  557C 8F00  
2326  557E 1502         JGT     H163                    
2327  5580 0260         ORI     R0,>0080                var: put var bit in PAB status style
2327  5582 0080  
2328  5584 0A30 H163    SLA     R0,3                    get rid of var bit in FDR style
2329  5586 F002         SOCB    R2,R0                   add eof and mem full bits
2330            *                                       
2331  5588 C069 H164    MOV     @>0054(R9),R1           PAB ptr
2331  558A 0054  
2332  558C 0221         AI      R1,8                    point to bias/status return byte
2332  558E 0008  
2333  5590 0429         BLWP    @>005A(R9)              set VDP to write
2333  5592 005A  
2334  5594 0023         DATA    >0023                   address in R1
2335  5596 DBC0         MOVB    R0,@-2(R15)             write file status to PAB
2335  5598 FFFE  
2336  559A 0460         B       @RTURN1                 return to caller
2336  559C 435A  
2337            *
2338            *---------------------------------
2339            * Disk directory access
2340            * ---------------------
2341            * The directory is accessed by omiting the filename in the DSR name: "DSK1."
2342            * It must be opened for input only, as an Int/Fix 38 file.
2343            * It consists in upto 128 records, the first one contains the disk informations,
2344            * the others the informations for upto 127 files (in alphabetical order).
2345            * Each record consists in an ascii string and three floating point numbers.
2346            *
2347            * Record 0 contains:
2348            * - Diskname (an ascii string of upto 10 chars).
2349            * - The number zero.
2350            * - The number of sectors on disk.
2351            * - The number of free sectors on disk.
2352            *
2353            * Other records contain:
2354            * - Filename (an ascii string of upto 10 chars).
2355            * - Filetype: 1=D/F, 2=D/V, 3=I/F, 4=I/V, 5=Prog, 0=end of directory.
2356            *   If the file is protected, this number is negative (-1=D/F, etc).
2357            * - File size in sectors (including the FDR itself).
2358            * - File record length (0 for programs).
2359            *---------------------------------
2360             
2361            *---------------------------------
2362            * Open disk directory pseudo-file
2363            *---------------------------------                                      
2364            *
2365  559E D02F OPNDIR  MOVB    @-1026(R15),R0          get file type from PAB
2365  55A0 FBFE  
2366  55A2 0240         ANDI    R0,>1E00                mask irrelavant bits (rel/seq)
2366  55A4 1E00  
2367  55A6 0280         CI      R0,>0C00                is it int/fix in output mode?
2367  55A8 0C00  
2368  55AA 1303         JEQ     H166                    yes
2369  55AC 06A0 H165    BL      @RETERR                 return with error
2369  55AE 498A  
2370  55B0 4000         DATA    >4000                   bad attributes
2371  55B2 06A0 H166    BL      @PABR2B                 get 2 bytes from PAB into R0
2371  55B4 4856  
2372  55B6 0004         DATA    4                       rec length
2373  55B8 0980         SRL     R0,8                    make it a word
2374  55BA 1303         JEQ     H167                    >00= default: set it to 38
2375  55BC 0280         CI      R0,>0026                is it 38?
2375  55BE 0026  
2376  55C0 16F5         JNE     H165                    no: return with bad attributes error
2377  55C2 0200 H167    LI      R0,>2600                set rec len to 38
2377  55C4 2600  
2378  55C6 0429         BLWP    @>005A(R9)              set VDP to write
2378  55C8 005A  
2379  55CA 0103         DATA    >0103                   address in R8 (from PABR2B)
2380  55CC DBC0         MOVB    R0,@-2(R15)             write rec len to PAB
2380  55CE FFFE  
2381            *                                       
2382  55D0 04C7         CLR     R7                      
2383  55D2 06A0         BL      @FNDRV                  find matching drive in file control blocks
2383  55D4 578C  
2384  55D6 55DE         DATA    H168                    go there if not found
2385  55D8 06A0 ERRR10  BL      @ERROR5                 update data then return with error
2385  55DA 495E  
2386  55DC E000         DATA    >E000                   file error
2387  55DE C1C7 H168    MOV     R7,R7                   did we find a free slot?
2388  55E0 1603         JNE     H169                    yes
2389  55E2 06A0         BL      @RETERR                 no: return with error
2389  55E4 498A  
2390  55E6 8000         DATA    >8000                   memory full
2391  55E8 0429 H169    BLWP    @>005A(R9)              set VDP to write
2391  55EA 005A  
2392  55EC 00E3         DATA    >00E3                   address in R7
2393  55EE DBC3         MOVB    R3,@-2(R15)             write drive #
2393  55F0 FFFE  
2394  55F2 06C3         SWPB    R3                      
2395  55F4 DBC3         MOVB    R3,@-2(R15)             and a space as filename (illegal, indicates dir)
2395  55F6 FFFE  
2396  55F8 0460         B       @RTURN1                 return to caller
2396  55FA 435A  
2397            *
2398            *---------------------------------
2399            * Close disk directory
2400            *---------------------------------                                      
2401  55FC 06A0 CLSDIR  BL      @FNDRV                  find matching drive in file control blocks
2401  55FE 578C  
2402  5600 55D8         DATA    ERRR10                  go there if not found: return with file error
2403  5602 04C0         CLR     R0                      
2404  5604 0429         BLWP    @>005A(R9)              set VDP to write
2404  5606 005A  
2405  5608 0103         DATA    >0103                   address in R8
2406  560A DBC0         MOVB    R0,@-2(R15)             clear drive #
2406  560C FFFE  
2407  560E 0460         B       @RTURN1                 return to caller
2407  5610 435A  
2408            *
2409            *---------------------------------
2410            * Read a record from disk directory
2411            *---------------------------------                                      
2412            *
2413  5612 06A0 RDDIR   BL      @FNDRV                  find matching drive in file control blocks
2413  5614 578C  
2414  5616 55D8         DATA    ERRR10                  go ther it not found: return with file error
2415  5618 0588         INC     R8                      
2416  561A C148         MOV     R8,R5                   save ptr to FDR
2417  561C 06A0         BL      @PABR2B                 get 2 bytes from PAB into R0
2417  561E 4856  
2418  5620 0006         DATA    6                       record #
2419  5622 C080         MOV     R0,R2                   save it
2420  5624 0582         INC     R2                      
2421  5626 0429         BLWP    @>005A(R9)              set VDP to write
2421  5628 005A  
2422  562A 0103         DATA    >0103                   address in R8
2423  562C DBC2         MOVB    R2,@-2(R15)             write record number in FDR
2423  562E FFFE  
2424  5630 06C2         SWPB    R2                      after first char of filename!
2425  5632 DBC2         MOVB    R2,@-2(R15)                     
2425  5634 FFFE  
2426  5636 0A10         SLA     R0,1                    since two byte per file ptr
2427  5638 D000         MOVB    R0,R0                   is rec # greater than 128?
2428  563A 1303         JEQ     H170                    no
2429  563C 06A0         BL      @ERROR5                 yes: update data then return with error
2429  563E 495E  
2430  5640 A000         DATA    >A000                   past eof
2431  5642 0702 H170    SETO    R2                      code for read
2432  5644 C100         MOV     R0,R4                   record #
2433  5646 133B         JEQ     H175                    0=disk parameters
2434  5648 0204         LI      R4,1                    sector #1
2434  564A 0001  
2435  564C 06A0         BL      @CALSUB                 call subroutine
2435  564E 433C  
2436  5650 4A3A         DATA    RWSEC                   read sector into buffer in R5
2437  5652 C205         MOV     R5,R8                   buffer ptr
2438  5654 0225         AI      R5,255                  point to data buffer area in this ctrl block
2438  5656 00FF  
2439  5658 0640         DECT    R0                      don't count record 0
2440  565A A200         A       R0,R8                   point to desired file ptr
2441  565C 06A0         BL      @VDPR2B                 get two byte from VDP at R8 into R0
2441  565E 4862  
2442  5660 C100         MOV     R0,R4                   sector where that FDR is to be found
2443  5662 1328         JEQ     H173                    no more
2444  5664 06A0         BL      @CALSUB                 call subroutine
2444  5666 433C  
2445  5668 4A3A         DATA    RWSEC                   read FDR sector into data buffer area
2446  566A 06A0         BL      @FDR2B1                 get 2 bytes from FDR into R0
2446  566C 485C  
2447  566E 010E         DATA    270                     # of sect/file
2448  5670 C180         MOV     R0,R6                   save it to output file size
2449  5672 0586         INC     R6                      include the FDR itself
2450  5674 D0EF         MOVB    @-1026(R15),R3          ignore eof offset
2450  5676 FBFE  
2451  5678 0202         LI      R2,>0A00                10 chars per filename
2451  567A 0A00  
2452  567C D0EF         MOVB    @-1026(R15),R3          get rec length
2452  567E FBFE  
2453  5680 0983         SRL     R3,8                    make it a word
2454  5682 0648         DECT    R8                      point to status byte in FDR
2455  5684 0429         BLWP    @>005A(R9)              set VDP to read
2455  5686 005A  
2456  5688 0102         DATA    >0102                   address in R8
2457  568A D02F         MOVB    @-1026(R15),R0          get file status byte
2457  568C FBFE  
2458  568E C1C0         MOV     R0,R7                   
2459  5690 0240         ANDI    R0,>0800                keep only write protected bit
2459  5692 0800  
2460  5694 51C0         SZCB    R0,R7                   clear write protected bit (if it was set)
2461  5696 0987         SRL     R7,8                    make it a word
2462  5698 0587         INC     R7                      types are numbered from 1
2463  569A 0287         CI      R7,>0002                is it a program file?
2463  569C 0002  
2464  569E 1602         JNE     H171                    no
2465  56A0 0227         AI      R7,3                    yes: make it type 5
2465  56A2 0003  
2466  56A4 0287 H171    CI      R7,>0008                is it var?
2466  56A6 0008  
2467  56A8 1A02         JL      H172                    no
2468  56AA 0227         AI      R7,-127                 yes: add 1 and clear var bit
2468  56AC FF81  
2469  56AE 0A40 H172    SLA     R0,4                    write protect bit will be >80
2470  56B0 E1C0         SOC     R0,R7                   add it to file type
2471  56B2 1004         JMP     H174                    
2472            *                                       
2473  56B4 04C2 H173    CLR     R2                      no more files: filename size = 0
2474  56B6 04C6         CLR     R6                      file size = 0
2475  56B8 04C3         CLR     R3                      rec length = 0
2476  56BA 04C7         CLR     R7                      type = 0
2477  56BC 100F H174    JMP     H176                    output that
2478            *                                       
2479  56BE 0225 H175    AI      R5,255                  disk info: point to data buffer area in ctrl block
2479  56C0 00FF  
2480  56C2 06A0         BL      @CALSUB                 call subroutine
2480  56C4 433C  
2481  56C6 4A3A         DATA    RWSEC                   read sector 0
2482  56C8 06A0         BL      @FDR2B1                 get 2 bytes from FDR into R0
2482  56CA 485C  
2483  56CC 010A         DATA    266                     # of sectors on disk
2484  56CE C180         MOV     R0,R6                   duplicate it
2485  56D0 0646         DECT    R6                      minus directory itself (sect 0 + 1)
2486  56D2 06A0         BL      @CFSVIB                 count free sectors in bitmap, result in R3
2486  56D4 5752  
2487  56D6 04C7         CLR     R7                      filetype is not used
2488  56D8 0202         LI      R2,>0A00                diskname is 10 chars
2488  56DA 0A00  
2489            *                                       
2490  56DC 06A0 H176    BL      @PABR2B                 get 2 bytes from PAB into R0
2490  56DE 4856  
2491  56E0 0002         DATA    2                       APEDSK99: error in source listing (was R2)
2492  56E2 C200         MOV     R0,R8                   duplicate it
2493  56E4 0588         INC     R8                      skip first byte
2494  56E6 0982         SRL     R2,8                    filename length (or diskname)
2495  56E8 1316         JEQ     H179                    0: skip filename copying
2496  56EA 04C1         CLR     R1                      
2497  56EC 0429 H177    BLWP    @>005A(R9)              set VDP to read
2497  56EE 005A  
2498  56F0 00A2         DATA    >00A2                   address in R5 (FDR ptr)
2499  56F2 D06F         MOVB    @-1026(R15),R1          get 1 char from filename in FDR
2499  56F4 FBFE  
2500  56F6 0281         CI      R1,>2000                is it a space?
2500  56F8 2000  
2501  56FA 1309         JEQ     H178                    yes: end of name
2502  56FC 0429         BLWP    @>005A(R9)              no: set VDP to write
2502  56FE 005A  
2503  5700 0103         DATA    >0103                   address in R8 (PAB data buffer ptr)
2504  5702 DBC1         MOVB    R1,@-2(R15)             copy char in PAB data buffer
2504  5704 FFFE  
2505  5706 0585         INC     R5                      increment source ptr
2506  5708 0588         INC     R8                      increment destination ptr
2507  570A 0602         DEC     R2                      next char
2508  570C 16EF         JNE     H177                    
2509  570E 0502 H178    NEG     R2                      number of trailing spaces
2510  5710 0222         AI      R2,10                   number of chars in filename
2510  5712 000A  
2511  5714 06C2         SWPB    R2                      
2512  5716 0429 H179    BLWP    @>005A(R9)              set VDP to write
2512  5718 005A  
2513  571A 0003         DATA    >0003                   address in R0 (beg of PAB data buffer)
2514  571C DBC2         MOVB    R2,@-2(R15)             write string length byte
2514  571E FFFE  
2515            *                                       
2516  5720 0429         BLWP    @>005A(R9)              set VDP to write
2516  5722 005A  
2517  5724 0103         DATA    >0103                   address in R8
2518  5726 C047         MOV     R7,R1                   file type + protection
2519  5728 06A0         BL      @INT2FP                 make it a float number
2519  572A 57D0  
2520  572C C046         MOV     R6,R1                   file size in sectors, including FDR
2521  572E 06A0         BL      @INT2FP                 make it a float number
2521  5730 57D0  
2522  5732 C043         MOV     R3,R1                   record length
2523  5734 06A0         BL      @INT2FP                 make it a float number
2523  5736 57D0  
2524  5738 C229         MOV     @>0054(R9),R8           get PAB ptr
2524  573A 0054  
2525  573C 0228         AI      R8,5                    point to character count
2525  573E 0005  
2526  5740 0200         LI      R0,>2600                always 38 bytes
2526  5742 2600  
2527  5744 0429         BLWP    @>005A(R9)              set VDP to write
2527  5746 005A  
2528  5748 0103         DATA    >0103                   address in R8
2529  574A DBC0         MOVB    R0,@-2(R15)             write # of characters in record
2529  574C FFFE  
2530  574E 0460         B       @RTURN1                 return to caller
2530  5750 435A  
2531            *                                       
2532  5752 0228 CFSVIB  AI      R8,46                   count free sectors in VIB bitmap
2532  5754 002E  
2533  5756 0202         LI      R2,200                  bitmap size
2533  5758 00C8  
2534  575A 04C3         CLR     R3                      free sectors counter
2535  575C 0429         BLWP    @>005A(R9)              set VDP to read
2535  575E 005A  
2536  5760 0102         DATA    >0102                   address in R8
2537  5762 D06F H180    MOVB    @-1026(R15),R1          get a byte from bitmap
2537  5764 FBFE  
2538  5766 0221         AI      R1,256                  
2538  5768 0100  
2539  576A 0981         SRL     R1,8                    
2540  576C 130C         JEQ     H184                    was >FF: no free sectors, next byte
2541  576E 0601         DEC     R1                      was it >00?
2542  5770 1603         JNE     H181                    no: count bits
2543  5772 0223         AI      R3,8                    yes: 8 more free sectors
2543  5774 0008  
2544  5776 1007         JMP     H184                    next byte
2545  5778 0200 H181    LI      R0,8                    8 bits per byte
2545  577A 0008  
2546  577C 0911 H182    SRL     R1,1                    test a bit
2547  577E 1801         JOC     H183                    was 1: sector is used
2548  5780 0583         INC     R3                      was 0: one more free sector
2549  5782 0600 H183    DEC     R0                      next bit in byte
2550  5784 16FB         JNE     H182                    more to come
2551  5786 0602 H184    DEC     R2                      next bitmap byte
2552  5788 16EC         JNE     H180                    more to come
2553  578A 045B         B       *R11                    
2554            *                                       
2555  578C C2BB FNDRV   MOV     *R11+,R10               find drive in file control blocks
2556  578E C14B         MOV     R11,R5                  save 2 returns
2557  5790 C229         MOV     @>0056(R9),R8           top of mem word in VDP buffers header
2557  5792 0056  
2558  5794 0228         AI      R8,3                    point to max # of files
2558  5796 0003  
2559  5798 0429         BLWP    @>005A(R9)              set VDP to read
2559  579A 005A  
2560  579C 0102         DATA    >0102                   address in R8
2561  579E D0AF         MOVB    @-1026(R15),R2          get # of files
2561  57A0 FBFE  
2562  57A2 0882         SRA     R2,8                    make it a word
2563  57A4 0228         AI      R8,6                    point to drive # in file ctrl block
2563  57A6 0006  
2564  57A8 0203         LI      R3,>0020                filename begin with space (illegal: flag for dir)
2564  57AA 0020  
2565  57AC D0C6         MOVB    R6,R3                   APEDSK99: error in original disassembly (was R5)
2566  57AE 06A0 H185    BL      @VDPR2B                 read 2 bytes from VDP at R8 into R0
2566  57B0 4862  
2567  57B2 8003         C       R3,R0                   match with that control block?
2568  57B4 1309         JEQ     H187                    yes
2569  57B6 0240         ANDI    R0,>00FF                keep only first char of filename
2569  57B8 00FF  
2570  57BA 1601         JNE     H186                    valid filename: a FDR is loaded here
2571  57BC C1C8         MOV     R8,R7                   this space is free: save ptr
2572  57BE 0228 H186    AI      R8,518                  point to next file control block
2572  57C0 0206  
2573  57C2 0602         DEC     R2                      next file
2574  57C4 16F4         JNE     H185                    more to come
2575  57C6 045A         B       *R10                    not found: return to address passed in data word
2576  57C8 0588 H187    INC     R8                      drive matches: point to FDR
2577  57CA CA48         MOV     R8,@>0056(R9)           save ptr
2577  57CC 0056  
2578  57CE 0455         B       *R5                     return to caller after data word
2579            *
2580            *--------------------------------------
2581            * Floating point format
2582            * ---------------------
2583            * Float numbers are 8 bytes long: EE 12 34 56 78 9A BC
2584            * EE is the exponent in radix 100 (not in radix 10 as usual!). It is biased
2585            * by 64: >40=0, 41=1 (i.e *100), >42=2 (i.e * 10,000) >3F= -1 (i.e /100), etc
2586            *
2587            * 12 ... BC are the mantissa in binary coded decimal: each byte encodes two
2588            * decimal digits from 00 to 99
2589            *
2590            * For negative numbers, the first word is negated
2591            * For zero, the first word is >0000 the others are irrelevant
2592            *
2593            * Examples: 40 08 00 00 00 00 00 00 is 8.0
2594            *           41 02 37 00 00 00 00 00 is 255.0 (>37 hex = 55 decimal)
2595            *           BF F8 00 00 00 00 00 00 is -8.0
2596            *           43 01 02 03 04 05 06 07 is 1020304.050607
2597            *--------------------------------------                                 
2598            *
2599  57D0 0202 INT2FP  LI      R2,>0800                write an integer in floating point format
2599  57D2 0800  
2600  57D4 DBC2         MOVB    R2,@-2(R15)             size=8
2600  57D6 FFFE  
2601  57D8 C141         MOV     R1,R5                   integer is in R1: save it for sign processing
2602  57DA 0241         ANDI    R1,>7FFF                clear sign bit
2602  57DC 7FFF  
2603  57DE 0281         CI      R1,100                  is it less than 100?
2603  57E0 0064  
2604  57E2 1A07         JL      H188                    yes
2605  57E4 04C0         CLR     R0                      100 or over
2606  57E6 0204         LI      R4,100                  
2606  57E8 0064  
2607  57EA 3C04         DIV     R4,R0                   divide by 100
2608  57EC 0260         ORI     R0,>4100                add exponent 2 to hundreths
2608  57EE 4100  
2609  57F0 1005         JMP     H190                    
2610            *                                       
2611  57F2 C001 H188    MOV     R1,R0                   is it 0?
2612  57F4 1302         JEQ     H189                    yes: exponent is 0
2613  57F6 0260         ORI     R0,>4000                no: add exponent 1
2613  57F8 4000  
2614  57FA 04C1 H189    CLR     R1                      next digits will be 0
2615            *                                       
2616  57FC C145 H190    MOV     R5,R5                   test sign bit
2617  57FE 1101         JLT     H191                    negative
2618  5800 1001         JMP     H192                    positive or zero
2619  5802 0500 H191    NEG     R0                      negate first word
2620  5804 DBC0 H192    MOVB    R0,@-2(R15)             write exponent to VDP at preset address
2620  5806 FFFE  
2621  5808 06C0         SWPB    R0                      
2622  580A DBC0         MOVB    R0,@-2(R15)             write first first 2 digits (or hundreths)
2622  580C FFFE  
2623  580E 06C1         SWPB    R1                      
2624  5810 DBC1         MOVB    R1,@-2(R15)             write last 2 digits (if any)
2624  5812 FFFE  
2625  5814 0202         LI      R2,5                    the remaining bytes are all 0 with integers
2625  5816 0005  
2626  5818 DBC2 H193    MOVB    R2,@-2(R15)             write 0 to VDP
2626  581A FFFE  
2627  581C 0602         DEC     R2                      next byte
2628  581E 16FC         JNE     H193                    more to do
2629  5820 045B         B       *R11                    
2630            *
2631            *---------------------------------------
2632            * Subprogram >10: sector R/W
2633            * --------------
2634            * >834A: (n/a)      <--- sector #
2635            * >834C: drive #
2636            * >834D: R/W code (write if >00)
2637            * >834E: VDP buffer
2638            * >8350: sector #   <--- error code
2639            *---------------------------------------                                        
2640            *
2641  5822 C1CB ESUB01  MOV     R11,R7                  
2642  5824 06A0         BL      @PRPFDO                 prepare disk operations
2642  5826 4410  
2643  5828 CA69         MOV     @>0050(R9),@>004A(R9)   copy sector #
2643  582A 0050  
2643  582C 004A  
2644  582E 0460         B       @SECRW1                 
2644  5830 4192  
2645            *
2646            *---------------------------------------
2647            * Subprogram >11: format disk
2648            * --------------                                        
2649            *
2650  5832 C1CB ESUB02  MOV     R11,R7                  
2651  5834 06A0         BL      @PRPFDO                 prepare disk operations
2651  5836 4410  
2652  5838 0460         B       @FMTDSK                 
2652  583A 4210  
2653            *
2654            *---------------------------------------
2655            * Subprogram >12: file (un)protect
2656            * --------------
2657            * >834C: drive #
2658            * >834D: protect code (>00 unprotect)
2659            * >834E: ptr to filename
2660            * >8350: (n/a)      <--- error code
2661            *---------------------------------------                                
2662            *
2663  583C C1CB ESUB03  MOV     R11,R7                  
2664  583E 06A0         BL      @PRPFDO                 prepare disk operations
2664  5840 4410  
2665  5842 D029         MOVB    @>004D(R9),R0           get protection code
2665  5844 004D  
2666  5846 0240         ANDI    R0,>0800                keep the bit that will be needed
2666  5848 0800  
2667  584A 0429         BLWP    @>005A(R9)              save R0 on stack
2667  584C 005A  
2668  584E 8000         DATA    >8000                   
2669  5850 C029         MOV     @>004E(R9),R0           get pointer to filename
2669  5852 004E  
2670  5854 06A0         BL      @CALSUB                 call subroutine
2670  5856 433C  
2671  5858 593E         DATA    RFDRVB                  load FDR in VDP buffer
2672  585A 0429         BLWP    @>005A(R9)              retrieve old R0, in R2
2672  585C 005A  
2673  585E 2001         DATA    >2001                   
2674  5860 06A0         BL      @FDR2B1                 read two bytes in R0 from top of FDR + offset
2674  5862 485C  
2675  5864 000C         DATA    12                      file status byte
2676  5866 0240         ANDI    R0,>F700                clear protection flag
2676  5868 F700  
2677  586A F002         SOCB    R2,R0                   set it if needed
2678  586C 0429         BLWP    @>005A(R9)              set VDP for write
2678  586E 005A  
2679  5870 0103         DATA    >0103                   address in R8
2680  5872 DBC0         MOVB    R0,@-2(R15)             write back file status to FDR
2680  5874 FFFE  
2681            *                                       
2682  5876 C229 UWFLVB  MOV     @>0056(R9),R8           FDR address in VDP mem
2682  5878 0056  
2683  587A 0429         BLWP    @>005A(R9)              set VDP for read
2683  587C 005A  
2684  587E 0102         DATA    >0102                   address in R8
2685  5880 D02F         MOVB    @-1026(R15),R0          get drive # in ctrl block
2685  5882 FBFE  
2686  5884 0260         ORI     R0,>8000                flag it
2686  5886 8000  
2687  5888 0429         BLWP    @>005A(R9)              set VDP for write
2687  588A 005A  
2688  588C 0103         DATA    >0103                   address in R8
2689  588E DBC0         MOVB    R0,@-2(R15)             write it back
2689  5890 FFFE  
2690  5892 0460         B       @UPDFDR                 update FDR, load VIB
2690  5894 4562  
2691            *
2692            *---------------------------------
2693            * Subprogram >13: file rename
2694            * --------------
2695            * >834C: drive #
2696            * >834E: ptr to new name
2697            * >8350: ptr to old name <--- error code
2698            *---------------------------------                                      
2699            *
2700  5896 C1CB ESUB04  MOV     R11,R7                  
2701  5898 06A0         BL      @PRPFDO                 prepare disk operations
2701  589A 4410  
2702  589C C029         MOV     @>004E(R9),R0           get ptr to new filename
2702  589E 004E  
2703  58A0 0429         BLWP    @>005A(R9)              save R0 on stack
2703  58A2 005A  
2704  58A4 8000         DATA    >8000                   
2705  58A6 C029         MOV     @>0050(R9),R0           get ptr to old filename
2705  58A8 0050  
2706  58AA 06A0         BL      @CALSUB                 call subroutine
2706  58AC 433C  
2707  58AE 593E         DATA    RFDRVB                  put FDR in VDP buffer
2708  58B0 06A0         BL      @RMFPTR                 remove FDR ptr from sector 1
2708  58B2 47C6  
2709  58B4 06A0         BL      @FDR2B1                 get 2 bytes from FDR
2709  58B6 485C  
2710  58B8 000C         DATA    12                      file status byte
2711  58BA 0240         ANDI    R0,>0800                protected?
2711  58BC 0800  
2712  58BE 1303         JEQ     H194                    no
2713  58C0 06A0         BL      @ERROR5                 yes: return with error
2713  58C2 495E  
2714  58C4 2000         DATA    >2000                   write protected
2715  58C6 06A0 H194    BL      @FDR2B1                 get 2 bytes from FDR
2715  58C8 485C  
2716  58CA FFFC         DATA    -4                      sector # of FDR
2717  58CC C040         MOV     R0,R1                   
2718  58CE 0429         BLWP    @>005A(R9)              retrieve R0 from stack
2718  58D0 005A  
2719  58D2 8001         DATA    >8001                   ptr to new filename
2720  58D4 0429         BLWP    @>005A(R9)              save R1 on stack
2720  58D6 005A  
2721  58D8 4000         DATA    >4000                   sector # of FDR
2722  58DA 06A0         BL      @UFNCB                  write drive # and filename in compare buffer
2722  58DC 5B60  
2723  58DE 06A0         BL      @CALSUB                 call subroutine
2723  58E0 433C  
2724  58E2 4B24         DATA    FFDRFN                  find FDR from filename
2725  58E4 C104         MOV     R4,R4                   found?
2726  58E6 1338         JEQ     H195                    yes: return with file error (name already exist)
2727  58E8 06A0         BL      @INSFDR                 insert a FDR in sector 1
2727  58EA 47F6  
2728  58EC 0429         BLWP    @>005A(R9)              retrieve sect # of FDR in R4
2728  58EE 005A  
2729  58F0 0801         DATA    >0801                   
2730  58F2 0429         BLWP    @>005A(R9)              set VDP to write
2730  58F4 005A  
2731  58F6 0103         DATA    >0103                   address in R8
2732  58F8 DBC4         MOVB    R4,@-2(R15)             write sector # of FDR
2732  58FA FFFE  
2733  58FC 06C4         SWPB    R4                      
2734  58FE DBC4         MOVB    R4,@-2(R15)                     
2734  5900 FFFE  
2735  5902 06C4         SWPB    R4                      sector #
2736  5904 0702         SETO    R2                      code for read
2737  5906 04C5         CLR     R5                      buffer offset: VDP at >8356
2738  5908 06A0         BL      @CALSUB                 call subroutine
2738  590A 433C  
2739  590C 4A36         DATA    RDFDR1                  read FDR
2740  590E C045         MOV     R5,R1                   
2741  5910 C029         MOV     @>0058(R9),R0                   
2741  5912 0058  
2742  5914 0220         AI      R0,257                  
2742  5916 0101  
2743  5918 0601         DEC     R1                      
2744  591A 06A0         BL      @CFNFDR                 copy filename in compare buffer to FDR
2744  591C 5B76  
2745  591E 04C2         CLR     R2                      code for write
2746  5920 06A0         BL      @CALSUB                 call subroutine
2746  5922 433C  
2747  5924 4A3A         DATA    RWSEC                   write FDR (with new name in it)
2748  5926 06A0         BL      @CALSUB                 call subroutine
2748  5928 433C  
2749  592A 4A22         DATA    WRSEC1                  write sector 1 (with new FDR ptr in it)
2750  592C C069         MOV     @>0056(R9),R1           FDR ptr
2750  592E 0056  
2751  5930 0429         BLWP    @>005A(R9)              prepare VDP to write
2751  5932 005A  
2752  5934 0023         DATA    >0023                   address in R1
2753  5936 DBC4         MOVB    R4,@-2(R15)             clear first char of FDR in buffer
2753  5938 FFFE  
2754  593A 0460         B       @RTURN1                 return to caller
2754  593C 435A  
2755            *                               
2756  593E 04C6 RFDRVB  CLR     R6                      put FDR in VDP buffer
2757  5940 D1A9         MOVB    @>004C(R9),R6           get drive #
2757  5942 004C  
2758  5944 06A0         BL      @UFNCB                  update filename compare buffer
2758  5946 5B60  
2759  5948 06A0         BL      @CALSUB                 call subroutine
2759  594A 433C  
2760  594C 4AB0         DATA    FFDRVB                  look if FDR already in VDP buffer
2761  594E 06A0         BL      @CALSUB                 call subroutine
2761  5950 433C  
2762  5952 4AF4         DATA    FFDROD                  file FDR on disk
2763  5954 C104         MOV     R4,R4                   found?
2764  5956 1303         JEQ     H196                    yes
2765  5958 06A0 H195    BL      @RETERR                 no: return with error code in >8350
2765  595A 498A  
2766  595C E000         DATA    >E000                   file error
2767  595E 0460 H196    B       @RTURN1                 return to caller
2767  5960 435A  
2768            *
2769            *-------------------------------------
2770            * Subprogram >14: file raw read
2771            * --------------
2772            * >834C: drive #                          <--- >00
2773            * >834D: # of sectors (>00=get file info) <--- sectors read
2774            * >834E: ptr to filename
2775            * >8350: file info buffer (>83xx)         <--- error code
2776            *                              |
2777            * >83xx  : VDP buffer       <--'
2778            * >83xx+2: first sector # (total # of sect when get file info)
2779            * >83xx+4: status flag
2780            * >83xx+5: recs/sector
2781            * >83xx+6: eof offset
2782            * >83xx+7: rec size
2783            * >83xx+8: # of recs
2784            *-------------------------------------                                  
2785            *
2786  5962 C1CB ESUB05  MOV     R11,R7                  
2787  5964 06A0         BL      @PRPFDO                 prepare disk operations
2787  5966 4410  
2788  5968 06A0         BL      @RFNPTR                 load filename and ptrs
2788  596A 5B98  
2789  596C 06A0         BL      @FFFDR                  find file FDR, load some info
2789  596E 5BBE  
2790  5970 C082         MOV     R2,R2                   # of sectors to read
2791  5972 131E         JEQ     H202                    >00: get file info
2792  5974 6003         S       R3,R0                   sectors in file - first sector to read
2793  5976 1502         JGT     H197                    in file
2794  5978 04C2         CLR     R2                      past eof
2795  597A 1017         JMP     H201                    
2796  597C 8002 H197    C       R2,R0                   sectors past first one vs sectors to load
2797  597E 1A01         JL      H198                    
2798  5980 C080         MOV     R0,R2                   load what's left
2799  5982 0429 H198    BLWP    @>005A(R9)                      
2799  5984 005A  
2800  5986 2000         DATA    >2000                   save R2
2801  5988 0429 H199    BLWP    @>005A(R9)                      
2801  598A 005A  
2802  598C 3100         DATA    >3100                   save R2, R3, R7
2803  598E 06A0         BL      @CALSUB                 call subroutine
2803  5990 433C  
2804  5992 4616         DATA    RDOFSC                  read sector from offset in file
2805  5994 0429         BLWP    @>005A(R9)                      
2805  5996 005A  
2806  5998 3101         DATA    >3101                   retrieve R2, R3, R7
2807  599A 0583         INC     R3                      next sector
2808  599C 0227         AI      R7,256                  increment VDP buffer ptr by 256 bytes
2808  599E 0100  
2809  59A0 0602         DEC     R2                      more to do?
2810  59A2 16F2         JNE     H199                    yes
2811  59A4 0429 H200    BLWP    @>005A(R9)                      
2811  59A6 005A  
2812  59A8 2001         DATA    >2001                   retrieve R2 (# of sectors read)
2813  59AA CA42 H201    MOV     R2,@>004C(R9)           update # of sectors in parameters
2813  59AC 004C  
2814  59AE 100A         JMP     H203                    
2815            *                                       
2816  59B0 CD00 H202    MOV     R0,*R4+                 get file info: sectors in file
2817  59B2 0648         DECT    R8                      
2818  59B4 05C2         INCT    R2                      copy 2 bytes (status + recs/sector)
2819  59B6 06A0         BL      @VDP2SP                 from VDP at R8 to file info structure
2819  59B8 5BF2  
2820  59BA 0202         LI      R2,4                    copy 4 bytes
2820  59BC 0004  
2821  59BE A202         A       R2,R8                   
2822  59C0 06A0         BL      @VDP2SP                 eof offset, rec len, # of recs (or # of sect)
2822  59C2 5BF2  
2823  59C4 06A0 H203    BL      @CALSUB                 call subroutine
2823  59C6 433C  
2824  59C8 4562         DATA    UPDFDR                  updata FDR (+ data) if needed, read VIB
2825  59CA 04E9         CLR     @>0050(R9)              clear error flag
2825  59CC 0050  
2826  59CE 0460         B       @RTURN1                 return to caller
2826  59D0 435A  
2827            *
2828            *--------------------------------------
2829            * Subprogram >15: file raw write
2830            * --------------
2831            * >834C: drive #                                  <--- >00
2832            * >834D: # of sectors (>00=create file from info) <--- # of sectors written
2833            * >834E: ptr to filename
2834            * >8350: file info buffer (>83xx)                 <--- error code
2835            *                              |
2836            * >83xx  : VDP buffer       <--'
2837            * >83xx+2: first sector # (total # of sectors when creating file)
2838            * >83xx+4: status flag
2839            * >83xx+5: recs/sector
2840            * >83xx+6: eof offset
2841            * >83xx+7: rec size
2842            * >83xx+8: # of recs
2843            *--------------------------------------                                 
2844            *
2845  59D2 C1CB ESUB06  MOV     R11,R7                  
2846  59D4 06A0         BL      @PRPFDO                 prepare disk operations
2846  59D6 4410  
2847  59D8 06A0         BL      @RFNPTR                 load drive + filename, + a few info
2847  59DA 5B98  
2848  59DC 1314         JEQ     H205                    sectors to write=0: create file
2849  59DE 06A0         BL      @FFFDR                  find file FDR
2849  59E0 5BBE  
2850  59E2 0429         BLWP    @>005A(R9)                      
2850  59E4 005A  
2851  59E6 2000         DATA    >2000                   save R2 (# of sectors to write)
2852  59E8 0429 H204    BLWP    @>005A(R9)                      
2852  59EA 005A  
2853  59EC 3100         DATA    >3100                   save R2, R3, R7
2854  59EE 06A0         BL      @CALSUB                 call subroutine
2854  59F0 433C  
2855  59F2 4636         DATA    WROFSC                  write sector from offset in file
2856  59F4 0429         BLWP    @>005A(R9)                      
2856  59F6 005A  
2857  59F8 3101         DATA    >3101                   retrieve R2, R3, R7
2858  59FA 0583         INC     R3                      next sector
2859  59FC 0227         AI      R7,256                  increment VDP ptr by 256 bytes
2859  59FE 0100  
2860  5A00 0602         DEC     R2                      more to do?
2861  5A02 16F2         JNE     H204                    yes
2862  5A04 10CF         JMP     H200                    update # of sectors written, in param. Then return
2863            *                               
2864  5A06 06A0 H205    BL      @CALSUB                 create file
2864  5A08 433C  
2865  5A0A 4AB0         DATA    FFDRVB                  find file FDR in VDP buffers
2866  5A0C 06A0         BL      @CALSUB                 call subroutine
2866  5A0E 433C  
2867  5A10 4AF4         DATA    FFDROD                  find file FDR on disk
2868  5A12 06A0         BL      @CALSUB                 call subroutine
2868  5A14 433C  
2869  5A16 4482         DATA    CRFIL2                  create file
2870  5A18 0429         BLWP    @>005A(R9)                      
2870  5A1A 005A  
2871  5A1C 0801         DATA    >0801                   retrieve R4 (file info ptr)
2872  5A1E C229         MOV     @>0056(R9),R8           FDR ptr
2872  5A20 0056  
2873  5A22 05C4         INCT    R4                      skip 2 bytes
2874  5A24 C0F4         MOV     *R4+,R3                 # of sector to create
2875  5A26 0228         AI      R8,10                   skip filename
2875  5A28 000A  
2876  5A2A 06A0         BL      @SP2VDP                 write 2 bytes in VDP at R8+2
2876  5A2C 5C02  
2877  5A2E 0002         DATA    2                       i.e. status + recs/sector
2878  5A30 06A0         BL      @SP2VDP                 write 4 bytes in VDP at new R8+4
2878  5A32 5C02  
2879  5A34 0004         DATA    4                       i.e. eof offset, rec len, # of recs (or # of
2880  5A36 0603         DEC     R3                      offset = # of sectors-1 (starts from 0)
2881  5A38 1103         JLT     H206                    create an empty file, FDR only
2882  5A3A 06A0         BL      @CALSUB                 
2882  5A3C 433C  
2883  5A3E 464C         DATA    APSCTS                  append enough sectors to reach offset
2884  5A40 0460 H206    B       @UWFLVB                 modify FDR, write it, load VIB, return
2884  5A42 5876  
2885            *
2886            *---------------------------------------
2887            * Subprogram FILES: number of files
2888            *---------------------------------------                                        
2889  5A44 C1CB ESUB08  MOV     R11,R7                  
2890  5A46 06A0         BL      @PRPFDO                 prepare disk operation
2890  5A48 4410  
2891  5A4A C229         MOV     @>002C(R9),R8           ptr to next basic token
2891  5A4C 002C  
2892  5A4E 0228         AI      R8,7                    skip FILES
2892  5A50 0007  
2893  5A52 06A0         BL      @VDPR2B                 get next two bytes in R0
2893  5A54 4862  
2894  5A56 0280         CI      R0,>C801                >C8=unquoted string, size=1 char
2894  5A58 C801  
2895  5A5A 161C         JNE     H207                    return (with error) if different
2896  5A5C 05C8         INCT    R8                      increment pointer
2897  5A5E 06A0         BL      @VDPR2B                 get next two bytes
2897  5A60 4862  
2898  5A62 06C0         SWPB    R0                      
2899  5A64 0220         AI      R0,>49D0                substact >B630: # of files >B6=closed parenthesis
2899  5A66 49D0  
2900  5A68 0280         CI      R0,>0009                only 9 files allowed in Basic !
2900  5A6A 0009  
2901  5A6C 1B13         JH      H207                    return with error if more
2902  5A6E 06C0         SWPB    R0                      
2903  5A70 DA40         MOVB    R0,@>004C(R9)           put new # of files in scratch-pad memory
2903  5A72 004C  
2904  5A74 06A0         BL      @CALSUB                 call subroutine
2904  5A76 433C  
2905  5A78 5A9E         DATA    PESB07                  subprogram >16 (private entry point)
2906  5A7A DA69         MOVB    @>0050(R9),@>0050(R9)   test result
2906  5A7C 0050  
2906  5A7E 0050  
2907  5A80 1609         JNE     H207                    error
2908  5A82 C229         MOV     @>002C(R9),R8           ok: get ptr to Basic token
2908  5A84 002C  
2909  5A86 0228         AI      R8,12                   skip the whole statement
2909  5A88 000C  
2910  5A8A CA48         MOV     R8,@>002C(R9)           update ptr
2910  5A8C 002C  
2911  5A8E 5A69         SZCB    @>0042(R9),@>0042(R9)   clear current token
2911  5A90 0042  
2911  5A92 0042  
2912  5A94 0460 H207    B       @RTURN1                 return to caller (i.e. Basic)
2912  5A96 435A  
2913            *
2914            *---------------------------------------
2915            * Subprogram >16: number of files
2916            * --------------
2917            * >834C: # of files
2918            * >8350: (n/a)      <--- error code
2919            *---------------------------------------                                        
2920            *
2921  5A98 C1CB ESUB07  MOV     R11,R7                  entry point from assembly
2922  5A9A 06A0         BL      @PRPFDO                 prepare disk operations
2922  5A9C 4410  
2923  5A9E 04C0 PESB07  CLR     R0                      entry point from call files
2924  5AA0 D029         MOVB    @>004C(R9),R0           get # of files
2924  5AA2 004C  
2925  5AA4 1359         JEQ     H214                    return with error
2926  5AA6 C229         MOV     @>0056(R9),R8           ptr to end of buffer word
2926  5AA8 0056  
2927  5AAA 0228         AI      R8,3                    point to # of files byte
2927  5AAC 0003  
2928  5AAE 04C3         CLR     R3                      
2929  5AB0 0429         BLWP    @>005A(R9)              set VDP to read
2929  5AB2 005A  
2930  5AB4 0102         DATA    >0102                   address in R8
2931  5AB6 D0EF         MOVB    @-1026(R15),R3          get current # of files
2931  5AB8 FBFE  
2932  5ABA 0205         LI      R5,518                  size of 1 file control block
2932  5ABC 0206  
2933  5ABE 90C0         CB      R0,R3                   compare required with current
2934  5AC0 1348         JEQ     H213                    same: return with no error
2935  5AC2 122B         JLE     H210                    less
2936  5AC4 C180         MOV     R0,R6                   more files needed
2937  5AC6 0280         CI      R0,>1000                maximum is 16
2937  5AC8 1000  
2938  5ACA 1B46         JH      H214                    return with error
2939  5ACC 6003         S       R3,R0                   how many to add
2940  5ACE 0980         SRL     R0,8                    make it a word
2941  5AD0 3805         MPY     R5,R0                   # of bytes to add
2942  5AD2 C101         MOV     R1,R4                   result in R0:R1
2943  5AD4 0504         NEG     R4                      
2944  5AD6 C0A9         MOV     @>0070(R9),R2           highest free address in VDP mem
2944  5AD8 0070  
2945  5ADA C002         MOV     R2,R0                   
2946  5ADC 6001         S       R1,R0                   what it would become
2947  5ADE 0280         CI      R0,>0800                is there room enough for VDP?
2947  5AE0 0800  
2948  5AE2 113A         JLT     H214                    no: return with error
2949  5AE4 C040         MOV     R0,R1                   ok: new base
2950  5AE6 0582 H208    INC     R2                      increment source ptr
2951  5AE8 0580         INC     R0                      increment destination ptr
2952  5AEA 0429         BLWP    @>005A(R9)              set VDP to read
2952  5AEC 005A  
2953  5AEE 0042         DATA    >0042                   address in R2
2954  5AF0 D0EF         MOVB    @-1026(R15),R3          get a byte
2954  5AF2 FBFE  
2955  5AF4 0429         BLWP    @>005A(R9)              set VDP to write
2955  5AF6 005A  
2956  5AF8 0003         DATA    >0003                   address in R0
2957  5AFA DBC3         MOVB    R3,@-2(R15)             copy a byte
2957  5AFC FFFE  
2958  5AFE 8202         C       R2,R8                   did we copy the whole header?
2959  5B00 16F2         JNE     H208                    not yet
2960  5B02 0429         BLWP    @>005A(R9)              set VDP to write
2960  5B04 005A  
2961  5B06 0003         DATA    >0003                   address in R0
2962  5B08 DBC6         MOVB    R6,@-2(R15)             new # of files
2962  5B0A FFFE  
2963  5B0C 04C6         CLR     R6                      
2964  5B0E 6080         S       R0,R2                   
2965  5B10 DBC6 H209    MOVB    R6,@-2(R15)             clear byte
2965  5B12 FFFE  
2966  5B14 0602         DEC     R2                      
2967  5B16 16FC         JNE     H209                    
2968  5B18 101A         JMP     H212                    
2969            *                                       
2970  5B1A 0429 H210    BLWP    @>005A(R9)              less files needed
2970  5B1C 005A  
2971  5B1E 0103         DATA    >0103                   set VDP to write to address in R8
2972  5B20 DBC0         MOVB    R0,@-2(R15)             new # of files in buffer header
2972  5B22 FFFE  
2973  5B24 60C0         S       R0,R3                   how many to remove
2974  5B26 0983         SRL     R3,8                    make it a word
2975  5B28 38C5         MPY     R5,R3                   # of bytes to remove
2976  5B2A C044         MOV     R4,R1                   result in R3:R4
2977  5B2C A048         A       R8,R1                   new address for buffer header
2978  5B2E C0A9         MOV     @>0070(R9),R2           highest free address in VDP mem
2978  5B30 0070  
2979  5B32 0429 H211    BLWP    @>005A(R9)              set VDP to read
2979  5B34 005A  
2980  5B36 0102         DATA    >0102                   address in R8
2981  5B38 D02F         MOVB    @-1026(R15),R0          read a byte
2981  5B3A FBFE  
2982  5B3C 0429         BLWP    @>005A(R9)              set VDP to write
2982  5B3E 005A  
2983  5B40 0023         DATA    >0023                   address in R1
2984  5B42 DBC0         MOVB    R0,@-2(R15)             write byte back
2984  5B44 FFFE  
2985  5B46 0601         DEC     R1                      decrement destination ptr
2986  5B48 0608         DEC     R8                      decrement source ptr
2987  5B4A 8088         C       R8,R2                   did we copy the whole header?
2988  5B4C 16F2         JNE     H211                    not yet
2989            *                                       
2990  5B4E CA41 H212    MOV     R1,@>0070(R9)           new first free address                                  
2990  5B50 0070  
2991  5B52 04E9 H213    CLR     @>0050(R9)              clear error flag
2991  5B54 0050  
2992  5B56 1002         JMP     H215                    
2993  5B58 0729 H214    SETO    @>0050(R9)              set error flag
2993  5B5A 0050  
2994  5B5C 0460 H215    B       @RTURN1                 return to caller
2994  5B5E 435A  
2995            *                                       
2996  5B60 04E9 UFNCB   CLR     @>0054(R9)              write drive # and filename in compare buffer
2996  5B62 0054  
2997  5B64 C069         MOV     @>0058(R9),R1           
2997  5B66 0058  
2998  5B68 0221         AI      R1,256                  ptr to filename compare buffer
2998  5B6A 0100  
2999  5B6C 0429         BLWP    @>005A(R9)              set VDP to write
2999  5B6E 005A  
3000  5B70 0023         DATA    >0023                   address in R1
3001  5B72 DBC6         MOVB    R6,@-2(R15)             write drive #
3001  5B74 FFFE  
3002  5B76 0202 CFNFDR  LI      R2,10                   filename must be exactly 10 chars
3002  5B78 000A  
3003  5B7A 0581 H216    INC     R1                      next char in compare buffer
3004  5B7C 0429         BLWP    @>005A(R9)              set VDP to read
3004  5B7E 005A  
3005  5B80 0002         DATA    >0002                   address in R0
3006  5B82 D0EF         MOVB    @-1026(R15),R3          get 1 char from filename
3006  5B84 FBFE  
3007  5B86 0580         INC     R0                      next char in provided filename
3008  5B88 0429         BLWP    @>005A(R9)              set VDP to write
3008  5B8A 005A  
3009  5B8C 0023         DATA    >0023                   address in R1
3010  5B8E DBC3         MOVB    R3,@-2(R15)             write 1 char to compare buffer
3010  5B90 FFFE  
3011  5B92 0602         DEC     R2                      
3012  5B94 16F2         JNE     H216                    next char
3013  5B96 045B         B       *R11                    
3014            *                                       
3015  5B98 C28B RFNPTR  MOV     R11,R10                 load compare buffer and ptrs
3016  5B9A 04C6         CLR     R6                      
3017  5B9C D1A9         MOVB    @>004C(R9),R6           drive #
3017  5B9E 004C  
3018  5BA0 C029         MOV     @>004E(R9),R0           ptr to filename
3018  5BA2 004E  
3019  5BA4 06A0         BL      @UFNCB                  write them in compare buffer
3019  5BA6 5B60  
3020  5BA8 D129         MOVB    @>0050(R9),R4           file info structure ptr
3020  5BAA 0050  
3021  5BAC 0984         SRL     R4,8                    
3022  5BAE A109         A       R9,R4                   make it a PAB address
3023  5BB0 D029         MOVB    @>004D(R9),R0           # of sectors (>00=get file info)
3023  5BB2 004D  
3024  5BB4 0429         BLWP    @>005A(R9)                      
3024  5BB6 005A  
3025  5BB8 0800         DATA    >0800                   save R4
3026  5BBA 0980         SRL     R0,8                    
3027  5BBC 045A         B       *R10                    EQ set for get file info
3028            *                                       
3029  5BBE 0429 FFFDR   BLWP    @>005A(R9)              find file FDR
3029  5BC0 005A  
3030  5BC2 8010         DATA    >8010                   save R0 + R11
3031  5BC4 06A0         BL      @CALSUB                 call subroutine
3031  5BC6 433C  
3032  5BC8 4AB0         DATA    FFDRVB                  find file FDR in VDP buffers
3033  5BCA 06A0         BL      @CALSUB                 call subroutine
3033  5BCC 433C  
3034  5BCE 4AF4         DATA    FFDROD                  find FDR on disk
3035  5BD0 C104         MOV     R4,R4                   found ?
3036  5BD2 1303         JEQ     H217                    yes
3037  5BD4 06A0         BL      @ERROR5                 no: return with error
3037  5BD6 495E  
3038  5BD8 E000         DATA    >E000                   file error
3039  5BDA 06A0 H217    BL      @FDR2B1                 get two bytes from FDR into R0
3039  5BDC 485C  
3040  5BDE 000E         DATA    14                      # of sectors in file
3041  5BE0 0429         BLWP    @>005A(R9)                      
3041  5BE2 005A  
3042  5BE4 2011         DATA    >2011                   retrieve R0 in R2 (# of sect to read), and R11
3043  5BE6 0429         BLWP    @>005A(R9)                      
3043  5BE8 005A  
3044  5BEA 0801         DATA    >0801                   retrieve R4 (ptr to file info structure)
3045  5BEC C1F4         MOV     *R4+,R7                 VDP buffer
3046  5BEE C0D4         MOV     *R4,R3                  first sector
3047  5BF0 045B         B       *R11                    
3048            *                                       
3049  5BF2 0429 VDP2SP  BLWP    @>005A(R9)              copy VDP bytes to scratch-pad
3049  5BF4 005A  
3050  5BF6 0102         DATA    >0102                   read from VDP at R8
3051  5BF8 DD2F H218    MOVB    @-1026(R15),*R4+        read bytes into scratch-pad at R4
3051  5BFA FBFE  
3052  5BFC 0602         DEC     R2                      # of byte in R2
3053  5BFE 16FC         JNE     H218                    next byte
3054  5C00 045B         B       *R11                    
3055            *                                       
3056  5C02 C0BB SP2VDP  MOV     *R11+,R2                copy scratch-pad bytes to VDP
3057  5C04 A202         A       R2,R8                   
3058  5C06 0429         BLWP    @>005A(R9)              set VDP to write
3058  5C08 005A  
3059  5C0A 0103         DATA    >0103                   address in R8 + offset in data word
3060  5C0C DBF4 H219    MOVB    *R4+,@-2(R15)           write byte from scratch-pad at R4
3060  5C0E FFFE  
3061  5C10 0602         DEC     R2                      # of bytes in R2, was in data word
3062  5C12 16FC         JNE     H219                    next byte
3063  5C14 045B         B       *R11    
3064            *
3065            * APEDSK99 CALL subprograms
3066            *
3067            * parameter is single digit -> 0x00
3068  5C16 0206 PDSK    LI      R6,>0100                Protect ACOMND 
3068  5C18 0100  
3069  5C1A 102F         JMP     ACLPRP                  generic prep
3070  5C1C 0206 UDSK    LI      R6,>0200                Unprotect ACOMND 
3070  5C1E 0200  
3071  5C20 102C         JMP     ACLPRP                  generic prep
3072  5C22 0206 LDSK    LI      R6,>0300                List Files on DSKx ACOMND 
3072  5C24 0300  
3073  5C26 1029         JMP     ACLPRP                  generic prep
3074            * parameters are single digit + character string -> 1x00; ! >1300 IS RESERVED (BL NTPDT+1) ! 
3075  5C28 0206 MDSK    LI      R6,>1000                Change DSK ACOMND
3075  5C2A 1000  
3076  5C2C 1026         JMP     ACLPRP                  generic prep
3077  5C2E 0206 NDSK    LI      R6,>1100                create new blank SS/SD DOAD image
3077  5C30 1100  
3078  5C32 1023         JMP     ACLPRP
3079            * parameter is a charachter string -> 2x00
3080  5C34 0206 RDSK    LI      R6,>2000                Remove DOAD from SD card ACOMND 
3080  5C36 2000  
3081  5C38 1020         JMP     ACLPRP                  generic prep
3082  5C3A 0206 FGET    LI      R6,>2100                get DOAD from FTP server ACOMND
3082  5C3C 2100  
3083  5C3E 101D         JMP     ACLPRP                  generic prep
3084  5C40 0206 FPUT    LI      R6,>2200                save DOAD to FTP server ACOMND 
3084  5C42 2200  
3085  5C44 101A         JMP     ACLPRP                  generic prep
3086  5C46 0206 ADSR    LI      R6,>2300                load DSR and reset ACOMND
3086  5C48 2300  
3087  5C4A 1017         JMP     ACLPRP                  generic prep
3088  5C4C 0206 CDIR    LI      R6,>2400                change root folder
3088  5C4E 2400  
3089  5C50 1014         JMP     ACLPRP                  generic prep
3090            * no parameters ->3x00
3091  5C52 0206 SMAP    LI      R6,>3000                Show DSKx mapping ACOMND
3091  5C54 3000  
3092  5C56 1011         JMP     ACLPRP                  generic prep
3093  5C58 0206 LDIR    LI      R6,>3100                List SD dir ACOMND
3093  5C5A 3100  
3094  5C5C 100E         JMP     ACLPRP                  generic prep
3095  5C5E 0206 AHLP    LI      R6,>3200                display APEDSK99 CALL()'s help screen
3095  5C60 3200  
3096  5C62 100B         JMP     ACLPRP                  generic prep
3097  5C64 0206 ACHR    LI      R6,>3300                load proper lowercase character set
3097  5C66 3300  
3098  5C68 1008         JMP     ACLPRP                  generic prep
3099  5C6A 0206 ARST    LI      R6,>3468                APEDSK99 reset ACOMND
3099  5C6C 3468  
3100  5C6E 1005         JMP     ACLPRP                  generic prep
3101  5C70 0206 TIME    LI      R6,>3500                show NTP time and date
3101  5C72 3500  
3102  5C74 1002         JMP     ACLPRP                  generic prep
3103  5C76 0206 ACFG    LI      R6,>3600                APEDSK99 configuration
3103  5C78 3600  
3104            *
3105            * Generic prep and return to TI BASIC for APEDSK99 CALL's
3106            *
3107  5C7A 04E0 ACLPRP  CLR     @XBASRT                 return to TI BASIC, not EXBAS
3107  5C7C 404A  
3108  5C7E 06C6         SWPB    R6                      get optional subcommand in MSB
3109  5C80 D806         MOVB    R6,@ASUBCM              save
3109  5C82 5FE9  
3110  5C84 06C6         SWPB    R6                      back to primary command
3111            *
3112  5C86 C1CB         MOV     R11,R7                  save return-to-TI BASIC address
3113  5C88 06A0         BL      @PRPFDO                 prepare TI Controller DSR operations
3113  5C8A 4410  
3114            *
3115  5C8C C229         MOV     @>002C(R9),R8           ptr to next basic token
3115  5C8E 002C  
3116  5C90 0228         AI      R8,4                    skip length byte and 3 chars of CALL name
3116  5C92 0004  
3117  5C94 06A0         BL      @VDPR2B                 get CALL last char and "(" or "0" in R0
3117  5C96 4862  
3118  5C98 0A80         SLA     R0,8                    only interested in LSB
3119  5C9A 130E         JEQ     NOPARM                  0 = no parameters? SMAP / LDIR / AHLP / ACHR / ARST / TIME / ACFG (and special guest LDSK)
3120            *
3121  5C9C 0228         AI      R8,2                    adjust token pointer
3121  5C9E 0002  
3122  5CA0 06A0         BL      @VDPR2B                 get next two bytes in R0
3122  5CA2 4862  
3123  5CA4 0280         CI      R0,>C801                >C8=unquoted string, size=1 char?
3123  5CA6 C801  
3124  5CA8 1331         JEQ     USTRNG                  yes: PDSK / UDSK / LDSK / MDSK / NDSK
3125            *
3126  5CAA 0280         CI      R0,>C701                >C7=quoted string, minimum 1 character?
3126  5CAC C701  
3127  5CAE 1A02         JL      ACLERR
3128  5CB0 0460         B       @QSTRNG                 yes: RDSK / FGET / FPUT / ADSR / CDIR
3128  5CB2 5DA8  
3129            *
3130  5CB4 0460 ACLERR  B       @RTURN1                 expect the unexpected                           
3130  5CB6 435A  
3131            *
3132            * SMAP / LDIR / AHLP / ACHR / ARST / TIME / ACFG (and special guest LDSK)
3133            *
3134  5CB8 0286 NOPARM  CI      R6,>0300                LDSK without parameters is handy (re-use last used DSK#)
3134  5CBA 0300  
3135  5CBC 1303         JEQ     NOPRM2
3136  5CBE 0286         CI      R6,>3000                catch other CALL's without parameters -> error
3136  5CC0 3000  
3137  5CC2 1AF8         JL      ACLERR
3138            *
3139  5CC4 D820 NOPRM2  MOVB    @LSTDRV,@CALLBF         get last drive accessed (LDSK without parameters)
3139  5CC6 5FC7  
3139  5CC8 5FC8  
3140  5CCA D806         MOVB    R6,@ACOMND              execute LDSK / ACHR / ARST / TIME / ACFG
3140  5CCC 5FE8  
3141  5CCE 0286         CI      R6,>3300                ACHR / ARST / TIME / ACFG?      
3141  5CD0 3300  
3142  5CD2 1A3C         JL      LDSK2                   no; SMAP / LDIR / AHLP use LDSK display routine
3143            *
3144  5CD4 0208 QNOPRM  LI      R8,9                    current CALL length
3144  5CD6 0009  
3145  5CD8 0286         CI      R6,>3300                ACHR?
3145  5CDA 3300  
3146  5CDC 1306         JEQ     ACHR2                   yes; get some real characters
3147  5CDE 0286         CI      R6,>0300                LDSK()?
3147  5CE0 0300  
3148  5CE2 1602         JNE     A9901                   nope; exit with CALL lenght 9 for SMAP / LDIR / AHLP / ARST / TIME / ACFG
3149  5CE4 0228         AI      R8,3                    yep;  exit with CALL length 12 for LDSK
3149  5CE6 0003  
3150            *
3151  5CE8 1030 A9901   JMP     A9904
3152            *
3153  5CEA 9820 ACHR2   CB      @INT2FP+2,@CALLST
3153  5CEC 57D2  
3153  5CEE 5FC6  
3154  5CF0 132C         JEQ     A9904                   >08; no char definition file found
3155            *
3156  5CF2 C0A0         MOV     @PATTBL,R2              get start of <SPACE> pattern table entry (default >0400 for TI BASIC)
3156  5CF4 4044  
3157  5CF6 06A0         BL      @VDPWRI                 set VPD address
3157  5CF8 431A  
3158            *                       
3159  5CFA 06A0 A9902   BL      @DISSTS                 use existing display routine to write 4 definitions at a time
3159  5CFC 5E52  
3160  5CFE 9820         CB      @K004,@CALLST           check Arduino ACHR return code
3160  5D00 4338  
3160  5D02 5FC6  
3161  5D04 1322         JEQ     A9904                   we're done
3162  5D06 05A0         INC     @RDINT                  generates interrupt for next lot
3162  5D08 5FEA  
3163  5D0A 10F7         JMP     A9902                   again
3164            *
3165            * PDSK / UDSK / LDSK / MDSK / NDSK
3166            *
3167  5D0C 0286 USTRNG  CI      R6,>2000                only PDSK / UDSK / LDSK / MDSK / NDSK?
3167  5D0E 2000  
3168  5D10 14D1         JHE     ACLERR                  no -> sneaky other commands don't belong here
3169  5D12 05C8         INCT    R8                      increment pointer
3170  5D14 06A0         BL      @VDPR2B                 get next two bytes              
3170  5D16 4862  
3171            *
3172  5D18 06C0         SWPB    R0
3173  5D1A 0220         AI      R0,>49D0                add 2's complement of >B630: MSB = >B3 / "," or >B6 / ")", LSB= # of files 
3173  5D1C 49D0  
3174  5D1E 1502         JGT     A9903                   >B6
3175  5D20 0220         AI      R0,768                  >B3, adjust R0 to positive range
3175  5D22 0300  
3176            *
3177  5D24 13C7 A9903   JEQ     ACLERR                  DSK0 not valid, * INCORRECT COMMAND
3178  5D26 0280         CI      R0,3                    only 3 DSK's allowed
3178  5D28 0003  
3179  5D2A 1BC4         JH      ACLERR                  DSK4+, * INCORRECT COMMAND
3180            *
3181  5D2C 06C0         SWPB    R0
3182  5D2E D800         MOVB    R0,@CALLBF              save DSKx
3182  5D30 5FC8  
3183  5D32 D800         MOVB    R0,@LSTDRV              remember last drive accessed for LDSK without parameter
3183  5D34 5FC7  
3184            *
3185  5D36 0286         CI      R6,>1000                MDSK or NDSK?
3185  5D38 1000  
3186  5D3A 1433         JHE     MNDSK2                  yep
3187            *
3188  5D3C D806         MOVB    R6,@ACOMND              send PDSK / UDSK / LDSK command to Arduino
3188  5D3E 5FE8  
3189            
3190  5D40 0286         CI      R6,>0300                LDSK?
3190  5D42 0300  
3191  5D44 1303         JEQ     LDSK2                   yep
3192            *
3193  5D46 0208 PUDSK2  LI      R8,12                   CALL length
3193  5D48 000C  
3194  5D4A 1054 A9904   JMP     ACLBAS                  return to BASIC         
3195            *                       
3196  5D4C 9820 LDSK2   CB      @K002,@CALLST
3196  5D4E 4336  
3196  5D50 5FC6  
3197  5D52 13C0         JEQ     QNOPRM                  LDSK: >00; no DOAD mapped
3198            *
3199  5D54 04C2 NXTSCR  CLR     R2                      clear screen; position 0
3200  5D56 06A0         BL      @VDPWRI
3200  5D58 431A  
3201            *
3202  5D5A 0200         LI      R0,>8000                space + TI BASIC bias
3202  5D5C 8000  
3203  5D5E 06A0         BL      @VDPRPW
3203  5D60 4262  
3204  5D62 02C0         DATA    704                     704 positions to clear
3205            *
3206  5D64 0202         LI      R2,32                   start 2nd screen line; 1st is lost due to BASIC scroll
3206  5D66 0020  
3207  5D68 06A0 A9905   BL      @VDPWRI                 
3207  5D6A 431A  
3208            *       
3209  5D6C 9820         CB      @K004,@CALLST           check Arduino LDSK / SDSK / LDIR / AHLP return code
3209  5D6E 4338  
3209  5D70 5FC6  
3210  5D72 13B0         JEQ     QNOPRM                  "More" (>F0); blank DSK or done last file / help txt
3211            *
3212  5D74 06A0         BL      @DISSTS                 LDSK / SDSK / LDIR / AHLP output to screen
3212  5D76 5E52  
3213            *
3214  5D78 0222         AI      R2,32                   next screen position
3214  5D7A 0020  
3215  5D7C 0282         CI      R2,640                  end of display area?
3215  5D7E 0280  
3216  5D80 1303         JEQ     NXTPRP                  yes; show "more" symbol
3217            *
3218  5D82 05A0         INC     @RDINT                  generates interrupt for next file / help txt
3218  5D84 5FEA  
3219  5D86 10F0         JMP     A9905   
3220            *       
3221  5D88 0202 NXTPRP  LI      R2,702
3221  5D8A 02BE  
3222  5D8C 06A0         BL      @VDPWRI
3222  5D8E 431A  
3223  5D90 0205         LI      R5,>9E00                show ">", more file / help txt to display
3223  5D92 9E00  
3224  5D94 DBC5         MOVB    R5,@-2(R15)
3224  5D96 FFFE  
3225            *
3226  5D98 06A0         BL      @CHKKEY
3226  5D9A 5E64  
3227            *
3228  5D9C 05A0         INC     @RDINT                  generates interrupt for next file / help txt
3228  5D9E 5FEA  
3229  5DA0 10D9         JMP     NXTSCR
3230            *
3231            * MDSK / NDSK / RDSK / FGET / FPUT / ADSR / CDIR
3232            *
3233  5DA2 05C8 MNDSK2  INCT    R8                      increment pointer
3234  5DA4 06A0         BL      @VDPR2B                 get next two digits
3234  5DA6 4862  
3235            *
3236  5DA8 0286 QSTRNG  CI      R6,>1000                further check on RDSK / FGET / FPUT / ADSR / CDIR
3236  5DAA 1000  
3237  5DAC 1A18         JL      A9907                   no -> sneaky PDSK / UDSK don't belong here      
3238  5DAE 0220         AI      R0,>3900                add 2's complement of >C700 =  only keep # of characters
3238  5DB0 3900  
3239  5DB2 1315         JEQ     A9907                   0 characters / empty string -> * INCORRECT COMMAND
3240  5DB4 0280         CI      R0,8                    max 8 characters?
3240  5DB6 0008  
3241  5DB8 1B12         JH      A9907                   no -> * INCORRECT COMMAND
3242            *
3243  5DBA C100         MOV     R0,R4                   save #characters
3244  5DBC 0205         LI      R5,CALLBF+2             buffer pointer to DOAD / DSR name       
3244  5DBE 5FCA  
3245  5DC0 05C8         INCT    R8                      increment pointer
3246  5DC2 C088         MOV     R8,R2                   for VDPRD, address must be in R2
3247  5DC4 06A0         BL      @VDPRD                  set VDP READ address
3247  5DC6 4324  
3248  5DC8 DD6F A9906   MOVB    @-1026(R15),*R5+        get character and save in CALL buffer
3248  5DCA FBFE  
3249  5DCC 0600         DEC     R0                      one less to go
3250  5DCE 16FC         JNE     A9906   
3251  5DD0 D560         MOVB    @K002,*R5               mark end of string with >00 (Arduino check for end of string)
3251  5DD2 4336  
3252            *
3253  5DD4 D02F         MOVB    @-1026(R15),R0          get next token
3253  5DD6 FBFE  
3254  5DD8 0280         CI      R0,>B600                is it a ")" ?
3254  5DDA B600  
3255  5DDC 1302         JEQ     A9908
3256  5DDE 0460 A9907   B       @ACLERR                 * INCORRECT COMMAND
3256  5DE0 5CB4  
3257            *
3258  5DE2 0208 A9908   LI      R8,13                   prep RDSK / FGET / FPUT / ADSR / CDIR CALL length ( CALL_XXXX("") )
3258  5DE4 000D  
3259  5DE6 A204         A       R4,R8                   add # of characters in string
3260                    
3261  5DE8 0286         CI      R6,>1100                MDSK or NDSK?
3261  5DEA 1100  
3262  5DEC 1B01         JH      A9909                   no; jump and execute RDSK / FGET / FPUT / ADSR / CDIR
3263  5DEE 05C8         INCT    R8                      adjust MDSK and NDSK CALL length
3264            *
3265  5DF0 D806 A9909   MOVB    R6,@ACOMND              command to Arduino
3265  5DF2 5FE8  
3266            *
3267  5DF4 9820 ACLBAS  CB      @CALLST,@K004           "More" or "AllGood" received from Arduino?      
3267  5DF6 5FC6  
3267  5DF8 4338  
3268  5DFA 1419         JHE     A9910                   yep
3269            *       
3270  5DFC 0205         LI      R5,GPLINT               no; GPL routine
3270  5DFE 006A  
3271  5E00 06A0         BL      @GPLXML                 
3271  5E02 5EF6  
3272  5E04 56CD         DATA    SCROLL                  scroll screen
3273  5E06 0202         LI      R2,736                  screen starting position for (error) message
3273  5E08 02E0  
3274  5E0A 06A0         BL      @VDPWRI                 set VDP address
3274  5E0C 431A  
3275  5E0E 06A0         BL      @DISSTS                 show (error) message
3275  5E10 5E52  
3276  5E12 0205         LI      R5,GPLINT               GPL routine
3276  5E14 006A  
3277  5E16 06A0         BL      @GPLXML 
3277  5E18 5EF6  
3278  5E1A 56CD         DATA    SCROLL                  scroll screen
3279            *
3280  5E1C 9820         CB      @CALLST,@K007           error (status code 0 - 9)?
3280  5E1E 5FC6  
3280  5E20 4337  
3281  5E22 1405         JHE     A9910                   no, informational; be silent    
3282            *
3283  5E24 0205         LI      R5,GPLINT               yes: let's make some noise
3283  5E26 006A  
3284  5E28 06A0         BL      @GPLXML
3284  5E2A 5EF6  
3285  5E2C 0036         DATA    HONK                    GPL routine"bad tone"
3286            *
3287  5E2E 0286 A9910   CI      R6,>3500                TIME() ?
3287  5E30 3500  
3288  5E32 132D         JEQ     TIME2                   yes; see if we can assign date/time to NTP$
3289            *
3290  5E34 04C6 A9911   CLR     R6
3291  5E36 D1A0         MOVB    @ASUBCM,R6              any subcommand to execute?
3291  5E38 5FE9  
3292  5E3A 1302         JEQ     A9912                   no
3293  5E3C D806         MOVB    R6,@ACOMND              yes; execute (currently only ARST)
3293  5E3E 5FE8  
3294            *
3295  5E40 04E9 A9912   CLR     @>0050(R9)              clear error flag                
3295  5E42 0050  
3296  5E44 AA48         A       R8, @>002C(R9)          add call length to token pointer                
3296  5E46 002C  
3297  5E48 5A69         SZCB    @>0042(R9),@>0042(R9)   clear current token
3297  5E4A 0042  
3297  5E4C 0042  
3298  5E4E 0460         B       @RTURN1                 return to caller (i.e. TI-BASIC)
3298  5E50 435A  
3299            *       
3300            * Display data, status messages and errors
3301            *
3302  5E52 0205 DISSTS  LI      R5,CALLBF               start of file name buffer
3302  5E54 5FC8  
3303  5E56 0206         LI      R6,32                   32 bytes / 1 screen row of data to display
3303  5E58 0020  
3304  5E5A DBF5 A9913   MOVB    *R5+,@-2(R15)           store character in VDP screen memory
3304  5E5C FFFE  
3305  5E5E 0606         DEC     R6
3306  5E60 16FC         JNE     A9913
3307  5E62 045B         B       *R11
3308            *
3309            * Quick key test to display next screen after ">"
3310            * Keyboard column 0 (= space enter <nc> fctn shift ctrl <nc>)
3311            * Code copy from Thierry's TI's Tech Pages site
3312            *
3313  5E64 C10C CHKKEY  MOV     R12,R4                  save R12
3314  5E66 04C1         CLR     R1                      test column 0
3315  5E68 020C         LI      R12,>0024               address for column selection
3315  5E6A 0024  
3316  5E6C 30C1 A9914   LDCR    R1,3                    select column
3317  5E6E 1FF2         TB      -14                     test R12 address >0008
3318  5E70 1607         JNE     A9915                   <SPACE>
3319  5E72 1FF3         TB      -13                     test R12 address >000A
3320  5E74 13FB         JEQ     A9914                   no key; test again
3321            *
3322  5E76 D820         MOVB    @K004,@CALLST           signal ENTER to LDIR() command
3322  5E78 4338  
3322  5E7A 5FC6  
3323  5E7C 020B         LI      R11,QNOPRM              leave without clearing screen
3323  5E7E 5CD4  
3324            *
3325  5E80 C304 A9915   MOV     R4,R12                  restore R12
3326  5E82 0A24         SLA     R4,2                    debounce delay
3327  5E84 0604 A9916   DEC     R4                      key debounce
3328  5E86 16FE         JNE     A9916                   debounce some more
3329            *
3330  5E88 045B         B       *R11                    we got one; return for next screen
3331            *
3332            * prep for calling XML >16 and update BASIC variable NTP$               
3333            *
3334  5E8A 4E54 VARINF  TEXT    'NTP$'
3334  5E8C 5024  
3335  5E8E 0204 TIME2   LI      R4,VARINF               variable name for XML >16 in FAC
3335  5E90 5E8A  
3336  5E92 C149         MOV     R9,R5                   get scratchpad start address
3337  5E94 D974 A9917   MOVB    *R4+,@>004A(R5)         variable name in FAC
3337  5E96 004A  
3338  5E98 0585         INC     R5
3339  5E9A 0284         CI      R4,VARINF+4             done all chars?
3339  5E9C 5E8E  
3340  5E9E 16FA         JNE     A9917                   
3341            *
3342  5EA0 0205         LI      R5,>0400                variable length for XML >16 in @>8359
3342  5EA2 0400  
3343  5EA4 DA45         MOVB    R5,@>0059(R9)           
3343  5EA6 0059  
3344  5EA8 04E9         CLR     @>0089(R9)      
3344  5EAA 0089  
3345            *
3346  5EAC 0205         LI      R5,XML16                ROM routine: find NTP$ in VDP symbol table (returns to GPL interpreter)
3346  5EAE 15D6  
3347  5EB0 06A0         BL      @GPLXML
3347  5EB2 5EF6  
3348  5EB4 2244         DATA    XMLRTN                  GPL "RTN", escaping GPL interpreter
3349            *
3350  5EB6 9A60         CB      @VARINF,@>004A(R9)      found NTP$ in VDP symbol table?
3350  5EB8 5E8A  
3350  5EBA 004A  
3351  5EBC 1318         JEQ     A9919                   no symbol table pointer; back to BASIC
3352            *
3353  5EBE 06A0         BL      @XML14                  ROM routine: get NTP$ VDP address and string length (returns through RT)
3353  5EC0 164E  
3354  5EC2 02A9         STWP    R9                      restore scratchpad pointer
3355  5EC4 0229         AI      R9,-224
3355  5EC6 FF20  
3356            *       
3357  5EC8 C169         MOV     @>0050(R9),R5           get string length
3357  5ECA 0050  
3358  5ECC 0285         CI      R5,16                   16 chars?
3358  5ECE 0010  
3359  5ED0 160E         JNE     A9919                   no NTP$ assignment for you
3360            *
3361  5ED2 C0A0         MOV     @>834E,R2               yes
3361  5ED4 834E  
3362  5ED6 06A0         BL      @VDPWRI                 set VDP write address
3362  5ED8 431A  
3363  5EDA 0205         LI      R5,CALLBF               CALL TIME data still in buffer
3363  5EDC 5FC8  
3364  5EDE D0B5 A9918   MOVB    *R5+,R2                 read character
3365  5EE0 0222         AI      R2,>A000                remove TI BASIC bias
3365  5EE2 A000  
3366  5EE4 DBC2         MOVB    R2,@-2(R15)             save to NTP$ value space
3366  5EE6 FFFE  
3367  5EE8 0285         CI      R5,CALLBF+16            done all 16 chars?
3367  5EEA 5FD8  
3368  5EEC 16F8         JNE     A9918                   no; one more
3369            *
3370  5EEE 10A2 A9919   JMP     A9911                   yes; back to BASIC
3371            *
3372            * execute GROM or XML routine (SCROLL, "bad sound" / HONK and XML >16)
3373            * DSR and GPL interpreter use same workspace (>83E0) so we need to save a few things
3374            *
3375  5EF0 0000 SAVGRA  BSS     2                       save current GROM address so we can return to BASIC
3376  5EF2 0000 SAVR11  BSS     2                       GPL interpreter uses R11
3377  5EF4 0000 SAVMEX  BSS     2                       save current >A018 value
3378            *
3379  5EF6 D820 GPLXML  MOVB    @>9802,@SAVGRA          save current GROM address
3379  5EF8 9802  
3379  5EFA 5EF0  
3380  5EFC 1000         NOP
3381  5EFE D820         MOVB    @>9802,@SAVGRA+1
3381  5F00 9802  
3381  5F02 5EF1  
3382  5F04 0620         DEC     @SAVGRA                 GRMWA returns address + 1; decrease for correct address
3382  5F06 5EF0  
3383            *
3384  5F08 D83B         MOVB    *R11+,@>9C02            set GPL routine address
3384  5F0A 9C02  
3385  5F0C 1000         NOP
3386  5F0E D83B         MOVB    *R11+,@>9C02
3386  5F10 9C02  
3387  5F12 C80B         MOV     R11,@SAVR11             save final DSR return address
3387  5F14 5EF2  
3388            *
3389  5F16 C820         MOV     @RTNBC,@SAVMEX          save >A018
3389  5F18 A018  
3389  5F1A 5EF4  
3390  5F1C 020B         LI      R11,GXRTN               DSR return address after GPL routine
3390  5F1E 5F38  
3391  5F20 C80B         MOV     R11,@RTNBC              @>A018 is where XML >BC returns to
3391  5F22 A018  
3392            *
3393  5F24 05E0         INCT    @>8373                  increase stack pointer
3393  5F26 8373  
3394  5F28 06C9         SWPB    R9                      
3395  5F2A D260         MOVB    @>8373,R9
3395  5F2C 8373  
3396  5F2E 06C9         SWPB    R9                      complete stack pointer in R9
3397  5F30 020B         LI      R11,XMLBC               GROM pointer to >0FBC (= XML >BC)
3397  5F32 4409  
3398  5F34 C64B         MOV     R11,*R9                 save GROM pointer on stack
3399            *
3400  5F36 0455         B       *R5                     execute GROM/ROM routine, return through GPL interpreter
3401            *
3402  5F38 D820 GXRTN   MOVB    @SAVGRA,@>9C02          and ... we're back; restore saved GROM address
3402  5F3A 5EF0  
3402  5F3C 9C02  
3403  5F3E 1000         NOP
3404  5F40 D820         MOVB    @SAVGRA+1,@>9C02
3404  5F42 5EF1  
3404  5F44 9C02  
3405            *
3406  5F46 C820         MOV     @SAVMEX,@RTNBC          restore original >A018 value
3406  5F48 5EF4  
3406  5F4A A018  
3407            *
3408  5F4C 02A9         STWP    R9                      restore scratchpad pointer
3409  5F4E 0229         AI      R9,-224
3409  5F50 FF20  
3410            *
3411  5F52 C2E0         MOV     @SAVR11,R11             restore R11
3411  5F54 5EF2  
3412  5F56 045B         B       *R11                    return to instruction after BL @GPLEXEC DATA statement
3413            *               
3414            * update FAT time/date for current DOAD after DSR Write / Format / Save
3415            *
3416  5F58 D820 NTPDT   MOVB    @NTPFAT+1,@ACOMND       "DSK NTP date/time update" command to Arduino           
3416  5F5A 4027  
3416  5F5C 5FE8  
3417  5F5E 045B         B       *R11                    return to Format / Close
3418            *
3419            *----------------------------------------------------------------------------------
3420            * >5F60 - >5FB3: 54 free bytes remaining
3421            * >5FC2 - >5FD3 is DSK1-3 parameters storage
3422            * >5FD4 is the CALL() status byte
3423            * >5FD6 - >5FE7 is buffer storage for APEDSK99 CALL's
3424            * >5FE8 is the Arduino Command Register (TI BASIC CALL support)
3425            * Word >5FEA maps to the read counter (R6, to generate interrupts when reading data) 
3426            * Bytes >5FEE maps to the CRU emulation write register
3427            * Bytes >5FF0 to >5FFE map to the FDC emulation registers
3428            *-----------------------------------------------------------------------------------                                    
3429            *
3430  5F60 0000         END
3430            


 Assembly Complete - Errors: 0,  Warnings: 0


 ------ Symbol Listing ------

 A9901  ABS:5CE8 A9901
 A9902  ABS:5CFA A9902
 A9903  ABS:5D24 A9903
 A9904  ABS:5D4A A9904
 A9905  ABS:5D68 A9905
 A9906  ABS:5DC8 A9906
 A9907  ABS:5DDE A9907
 A9908  ABS:5DE2 A9908
 A9909  ABS:5DF0 A9909
 A9910  ABS:5E2E A9910
 A9911  ABS:5E34 A9911
 A9912  ABS:5E40 A9912
 A9913  ABS:5E5A A9913
 A9914  ABS:5E6C A9914
 A9915  ABS:5E80 A9915
 A9916  ABS:5E84 A9916
 A9917  ABS:5E94 A9917
 A9918  ABS:5EDE A9918
 A9919  ABS:5EEE A9919
 ACFG   ABS:5C76 ACFG
 ACHR   ABS:5C64 ACHR
 ACHR2  ABS:5CEA ACHR2
 ACLBAS ABS:5DF4 ACLBAS
 ACLERR ABS:5CB4 ACLERR
 ACLPRP ABS:5C7A ACLPRP
 ACOMND ABS:5FE8 ACOMND
 ADDSEC ABS:46F0 ADDSEC
 ADSR   ABS:5C46 ADSR
 AFDRPT ABS:52B4 AFDRPT
 AFPGPF ABS:51CA AFPGPF
 AHLP   ABS:5C5E AHLP
 APSCTS ABS:464C APSCTS
 ARST   ABS:5C6A ARST
 ASUBCM ABS:5FE9 ASUBCM
 AVERSN ABS:4046 AVERSN
 CALLBF ABS:5FC8 CALLBF
 CALLST ABS:5FC6 CALLST
 CALSUB ABS:433C CALSUB
 CDIR   ABS:5C4C CDIR
 CFNFDR ABS:5B76 CFNFDR
 CFSVIB ABS:5752 CFSVIB
 CHKKEY ABS:5E64 CHKKEY
 CLOSE  ABS:4FBC CLOSE
 CLRFBT ABS:456E CLRFBT
 CLSDIR ABS:55FC CLSDIR
 CMPFN  ABS:4828 CMPFN
 CPCKFN ABS:4900 CPCKFN
 CRFIL1 ABS:447C CRFIL1
 CRFIL2 ABS:4482 CRFIL2
 CRFIL3 ABS:448E CRFIL3
 CRUWRI ABS:5FEE CRUWRI
 DECDCI ABS:4BA2 DECDCI
 DELETE ABS:475A DELETE
 DISSTS ABS:5E52 DISSTS
 DSDRVS ABS:433A DSDRVS
 DSKPRM ABS:5FB4 DSKPRM
 DSR01  ABS:40FC DSR01
 DSR02  ABS:4104 DSR02
 DSR03  ABS:410E DSR03
 DSR04  ABS:4118 DSR04
 ECUSTM ABS:437C ECUSTM
 EDSR01 ABS:4D38 EDSR01
 EDSR02 ABS:4D46 EDSR02
 EDSR03 ABS:4D4C EDSR03
 EDSR04 ABS:4D52 EDSR04
 EPWRUP ABS:4122 EPWRUP
 ERROR1 ABS:42D8 ERROR1
 ERROR3 ABS:420A ERROR3
 ERROR4 ABS:4276 ERROR4
 ERROR5 ABS:495E ERROR5
 ERROR6 ABS:4B14 ERROR6
 ERROR7 ABS:4904 ERROR7
 ERROR8 ABS:4DA4 ERROR8
 ERROR9 ABS:4DC0 ERROR9
 ERRR10 ABS:55D8 ERRR10
 ESUB01 ABS:5822 ESUB01
 ESUB02 ABS:5832 ESUB02
 ESUB03 ABS:583C ESUB03
 ESUB04 ABS:5896 ESUB04
 ESUB05 ABS:5962 ESUB05
 ESUB06 ABS:59D2 ESUB06
 ESUB07 ABS:5A98 ESUB07
 ESUB08 ABS:5A44 ESUB08
 FDR2B1 ABS:485C FDR2B1
 FDR2B2 ABS:4860 FDR2B2
 FDSKDR ABS:4876 FDSKDR
 FFDRDK ABS:4AF8 FFDRDK
 FFDRFN ABS:4B24 FFDRFN
 FFDROD ABS:4AF4 FFDROD
 FFDRVB ABS:4AB0 FFDRVB
 FFDRVP ABS:51BA FFDRVP
 FFFDR  ABS:5BBE FFFDR
 FFFDRV ABS:4A90 FFFDRV
 FFSBM  ABS:4CA8 FFSBM
 FFSBMP ABS:4BE2 FFSBMP
 FFSVIB ABS:45C6 FFSVIB
 FGET   ABS:5C3A FGET
 FMTDSK ABS:4210 FMTDSK
 FNDFDR ABS:4AEE FNDFDR
 FNDRV  ABS:578C FNDRV
 FPUT   ABS:5C40 FPUT
 FRSCB1 ABS:4CAE FRSCB1
 FSCTOF ABS:4736 FSCTOF
 GPLINT ABS:006A GPLINT
 GPLXML ABS:5EF6 GPLXML
 GXRTN  ABS:5F38 GXRTN
 H001   ABS:4148 H001
 H002   ABS:41AC H002
 H003   ABS:41CC H003
 H004   ABS:41DA H004
 H005   ABS:41DE H005
 H006   ABS:41F4 H006
 H007   ABS:422C H007
 H008   ABS:423C H008
 H009   ABS:424A H009
 H010   ABS:4264 H010
 H011   ABS:42A4 H011
 H012   ABS:42C6 H012
 H013   ABS:42EA H013
 H014   ABS:4314 H014
 H015   ABS:4328 H015
 H015A  ABS:4362 H015A
 H016   ABS:43A0 H016
 H017   ABS:43C4 H017
 H018   ABS:43CA H018
 H019   ABS:43EE H019
 H020   ABS:43F2 H020
 H021   ABS:4406 H021
 H022   ABS:44A4 H022
 H023   ABS:44FC H023
 H024   ABS:4518 H024
 H025   ABS:452E H025
 H026   ABS:4538 H026
 H027   ABS:454A H027
 H028   ABS:4558 H028
 H029   ABS:455E H029
 H030   ABS:4596 H030
 H031   ABS:45C2 H031
 H032   ABS:45E4 H032
 H033   ABS:45EE H033
 H034   ABS:4612 H034
 H035   ABS:4626 H035
 H036   ABS:4630 H036
 H037   ABS:465C H037
 H038   ABS:4670 H038
 H039   ABS:4682 H039
 H040   ABS:46B8 H040
 H041   ABS:46BC H041
 H042   ABS:46C4 H042
 H043   ABS:46C6 H043
 H044   ABS:46D4 H044
 H045   ABS:46E4 H045
 H046   ABS:46EC H046
 H047   ABS:4734 H047
 H048   ABS:4740 H048
 H049   ABS:474A H049
 H050   ABS:4756 H050
 H051   ABS:4772 H051
 H052   ABS:4788 H052
 H053   ABS:4794 H053
 H054   ABS:47D8 H054
 H055   ABS:4808 H055
 H056   ABS:4830 H056
 H057   ABS:4854 H057
 H058   ABS:488E H058
 H059   ABS:4898 H059
 H060   ABS:48A0 H060
 H061   ABS:48EE H061
 H062   ABS:48F6 H062
 H063   ABS:490A H063
 H064   ABS:4918 H064
 H065   ABS:4924 H065
 H066   ABS:4954 H066
 H067   ABS:4988 H067
 H068   ABS:49AA H068
 H069   ABS:49AE H069
 H070   ABS:49E6 H070
 H071   ABS:49FA H071
 H072   ABS:4A0A H072
 H073   ABS:4A14 H073
 H074   ABS:4A6A H074
 H075   ABS:4A7A H075
 H076   ABS:4A80 H076
 H077   ABS:4A88 H077
 H078   ABS:4AAC H078
 H079   ABS:4ACA H079
 H080   ABS:4AEA H080
 H081   ABS:4B00 H081
 H082   ABS:4B1A H082
 H083   ABS:4B30 H083
 H084   ABS:4B92 H084
 H085   ABS:4B96 H085
 H086   ABS:4B9C H086
 H087   ABS:4BF6 H087
 H088   ABS:4C08 H088
 H089   ABS:4C18 H089
 H090   ABS:4C24 H090
 H091   ABS:4C4A H091
 H092   ABS:4C54 H092
 H093   ABS:4C5C H093
 H094   ABS:4C82 H094
 H095   ABS:4C9E H095
 H096   ABS:4CDA H096
 H097   ABS:4CE8 H097
 H098   ABS:4CEA H098
 H099   ABS:4CEE H099
 H100   ABS:4CF0 H100
 H101   ABS:4D18 H101
 H102   ABS:4D20 H102
 H103   ABS:4D56 H103
 H104   ABS:4D5C H104
 H105   ABS:4D82 H105
 H106   ABS:4DC6 H106
 H107   ABS:4DDC H107
 H108   ABS:4DE8 H108
 H109   ABS:4E1A H109
 H110   ABS:4E32 H110
 H111   ABS:4E36 H111
 H112   ABS:4E8C H112
 H113   ABS:4E90 H113
 H114   ABS:4EB4 H114
 H115   ABS:4EB8 H115
 H116   ABS:4EDC H116
 H117   ABS:4F0A H117
 H118   ABS:4F62 H118
 H119   ABS:4F88 H119
 H120   ABS:4F8C H120
 H121   ABS:4FD2 H121
 H122   ABS:4FD6 H122
 H123   ABS:4FE2 H123
 H124   ABS:4FE8 H124
 H125   ABS:4FF0 H125
 H126   ABS:5012 H126
 H127   ABS:502C H127
 H128   ABS:5048 H128
 H129   ABS:5056 H129
 H130   ABS:507A H130
 H131   ABS:5082 H131
 H132   ABS:50A6 H132
 H133   ABS:50E4 H133
 H134   ABS:50EC H134
 H135   ABS:50F6 H135
 H136   ABS:510C H136
 H137   ABS:5122 H137
 H138   ABS:5192 H138
 H139   ABS:5206 H139
 H140   ABS:5226 H140
 H141   ABS:522C H141
 H142   ABS:5288 H142
 H143   ABS:5298 H143
 H144   ABS:5380 H144
 H145   ABS:53B4 H145
 H146   ABS:53C2 H146
 H147   ABS:53C8 H147
 H148   ABS:5406 H148
 H149   ABS:540A H149
 H150   ABS:5428 H150
 H151   ABS:5434 H151
 H152   ABS:5456 H152
 H153   ABS:5466 H153
 H154   ABS:54DC H154
 H155   ABS:5508 H155
 H156   ABS:5516 H156
 H157   ABS:5522 H157
 H158   ABS:552E H158
 H159   ABS:5544 H159
 H160   ABS:5556 H160
 H161   ABS:5570 H161
 H162   ABS:5574 H162
 H163   ABS:5584 H163
 H164   ABS:5588 H164
 H165   ABS:55AC H165
 H166   ABS:55B2 H166
 H167   ABS:55C2 H167
 H168   ABS:55DE H168
 H169   ABS:55E8 H169
 H170   ABS:5642 H170
 H171   ABS:56A4 H171
 H172   ABS:56AE H172
 H173   ABS:56B4 H173
 H174   ABS:56BC H174
 H175   ABS:56BE H175
 H176   ABS:56DC H176
 H177   ABS:56EC H177
 H178   ABS:570E H178
 H179   ABS:5716 H179
 H180   ABS:5762 H180
 H181   ABS:5778 H181
 H182   ABS:577C H182
 H183   ABS:5782 H183
 H184   ABS:5786 H184
 H185   ABS:57AE H185
 H186   ABS:57BE H186
 H187   ABS:57C8 H187
 H188   ABS:57F2 H188
 H189   ABS:57FA H189
 H190   ABS:57FC H190
 H191   ABS:5802 H191
 H192   ABS:5804 H192
 H193   ABS:5818 H193
 H194   ABS:58C6 H194
 H195   ABS:5958 H195
 H196   ABS:595E H196
 H197   ABS:597C H197
 H198   ABS:5982 H198
 H199   ABS:5988 H199
 H200   ABS:59A4 H200
 H201   ABS:59AA H201
 H202   ABS:59B0 H202
 H203   ABS:59C4 H203
 H204   ABS:59E8 H204
 H205   ABS:5A06 H205
 H206   ABS:5A40 H206
 H207   ABS:5A94 H207
 H208   ABS:5AE6 H208
 H209   ABS:5B10 H209
 H210   ABS:5B1A H210
 H211   ABS:5B32 H211
 H212   ABS:5B4E H212
 H213   ABS:5B52 H213
 H214   ABS:5B58 H214
 H215   ABS:5B5C H215
 H216   ABS:5B7A H216
 H217   ABS:5BDA H217
 H218   ABS:5BF8 H218
 H219   ABS:5C0C H219
 HONK   ABS:0036 HONK
 INSFDR ABS:47F6 INSFDR
 INT2FP ABS:57D0 INT2FP
 K001   ABS:4190 K001
 K002   ABS:4336 K002
 K004   ABS:4338 K004
 K005   ABS:4339 K005
 K007   ABS:4337 K007
 K013   ABS:42E8 K013
 K014   ABS:495C K014
 LASTRK ABS:42F6 LASTRK
 LDIR   ABS:5C58 LDIR
 LDSK   ABS:5C22 LDSK
 LDSK2  ABS:5D4C LDSK2
 LOAD   ABS:53B8 LOAD
 LSTDRV ABS:5FC7 LSTDRV
 MDSK   ABS:5C28 MDSK
 MNDSK2 ABS:5DA2 MNDSK2
 NDSK   ABS:5C2E NDSK
 NOCRU  ABS:418E NOCRU
 NOPARM ABS:5CB8 NOPARM
 NOPRM2 ABS:5CC4 NOPRM2
 NTPDT  ABS:5F58 NTPDT
 NTPFAT ABS:4026 NTPFAT
 NXTPRP ABS:5D88 NXTPRP
 NXTSCR ABS:5D54 NXTSCR
 OPCVEC ABS:4D8A OPCVEC
 OPEN   ABS:4DAA OPEN
 OPNDIR ABS:559E OPNDIR
 PABR2B ABS:4856 PABR2B
 PATTBL ABS:4044 PATTBL
 PDSK   ABS:5C16 PDSK
 PESB07 ABS:5A9E PESB07
 PRFDRS ABS:4F6A PRFDRS
 PRPFDO ABS:4410 PRPFDO
 PRPRTN ABS:4412 PRPRTN
 PUDSK2 ABS:5D46 PUDSK2
 PWRUP  ABS:40F6 PWRUP
 QNOPRM ABS:5CD4 QNOPRM
 QSTRNG ABS:5DA8 QSTRNG
 R0     ABS:0000 R0
 R1     ABS:0001 R1
 R10    ABS:000A R10
 R11    ABS:000B R11
 R12    ABS:000C R12
 R13    ABS:000D R13
 R14    ABS:000E R14
 R15    ABS:000F R15
 R2     ABS:0002 R2
 R3     ABS:0003 R3
 R4     ABS:0004 R4
 R5     ABS:0005 R5
 R6     ABS:0006 R6
 R7     ABS:0007 R7
 R8     ABS:0008 R8
 R9     ABS:0009 R9
 RBANB  ABS:54AA RBANB
 RCOFCB ABS:533A RCOFCB
 RDATA  ABS:5FF6 RDATA
 RDDIR  ABS:5612 RDDIR
 RDFDR1 ABS:4A36 RDFDR1
 RDFDR2 ABS:4A32 RDFDR2
 RDINT  ABS:5FEA RDINT
 RDOFSC ABS:4616 RDOFSC
 RDSEC1 ABS:4A20 RDSEC1
 RDSK   ABS:5C34 RDSK
 READ   ABS:4FC6 READ
 RETERR ABS:498A RETERR
 RFDRST ABS:51E6 RFDRST
 RFDRVB ABS:593E RFDRVB
 RFNPTR ABS:5B98 RFNPTR
 RMFPTR ABS:47C6 RMFPTR
 RNFISE ABS:5244 RNFISE
 RRFDR  ABS:5260 RRFDR
 RRNPAB ABS:51FA RRNPAB
 RRSEC  ABS:504C RRSEC
 RSTAT  ABS:5FF0 RSTAT
 RSTDRV ABS:42AA RSTDRV
 RTNBC  ABS:A018 RTNBC
 RTURN1 ABS:435A RTURN1
 RVRVDP ABS:43C8 RVRVDP
 RWIND1 ABS:5364 RWIND1
 RWIND2 ABS:5392 RWIND2
 RWSEC  ABS:4A3A RWSEC
 RWSECA ABS:4A3C RWSECA
 RWSECB ABS:4A3E RWSECB
 RWVIB  ABS:49BE RWVIB
 SAVE   ABS:545A SAVE
 SAVGRA ABS:5EF0 SAVGRA
 SAVMEX ABS:5EF4 SAVMEX
 SAVR11 ABS:5EF2 SAVR11
 SCROLL ABS:56CD SCROLL
 SECRW1 ABS:4192 SECRW1
 SELDRV ABS:427C SELDRV
 SMAP   ABS:5C52 SMAP
 SNDCMD ABS:42EE SNDCMD
 SP2VDP ABS:5C02 SP2VDP
 STATUS ABS:54DE STATUS
 SUB01  ABS:4010 SUB01
 SUB02  ABS:4016 SUB02
 SUB03  ABS:401C SUB03
 SUB04  ABS:4022 SUB04
 SUB05  ABS:4028 SUB05
 SUB06  ABS:402E SUB06
 SUB07  ABS:4034 SUB07
 SUB08  ABS:403A SUB08
 SUB09  ABS:404C SUB09
 SUB10  ABS:4056 SUB10
 SUB11  ABS:4060 SUB11
 SUB12  ABS:406A SUB12
 SUB13  ABS:4074 SUB13
 SUB14  ABS:407E SUB14
 SUB15  ABS:4088 SUB15
 SUB16  ABS:4092 SUB16
 SUB17  ABS:409C SUB17
 SUB18  ABS:40A6 SUB18
 SUB19  ABS:40B0 SUB19
 SUB20  ABS:40BA SUB20
 SUB21  ABS:40C4 SUB21
 SUB22  ABS:40CE SUB22
 SUB23  ABS:40D8 SUB23
 SUB24  ABS:40E2 SUB24
 SUB25  ABS:40EC SUB25
 SVDPRD ABS:43FE SVDPRD
 SVDPWR ABS:43F4 SVDPWR
 SVRVDP ABS:439C SVRVDP
 TIME   ABS:5C70 TIME
 TIME2  ABS:5E8E TIME2
 UCOFCB ABS:52D8 UCOFCB
 UDSK   ABS:5C1C UDSK
 UFNCB  ABS:5B60 UFNCB
 UPDBF  ABS:4582 UPDBF
 UPDCLI ABS:4BBE UPDCLI
 UPDFCB ABS:4F94 UPDFCB
 UPDFDR ABS:4562 UPDFDR
 URFFDR ABS:5304 URFFDR
 USTRNG ABS:5D0C USTRNG
 UWFLVB ABS:5876 UWFLVB
 VARINF ABS:5E8A VARINF
 VDP2SP ABS:5BF2 VDP2SP
 VDPR2B ABS:4862 VDPR2B
 VDPRD  ABS:4324 VDPRD
 VDPRPW ABS:4262 VDPRPW
 VDPWRI ABS:431A VDPWRI
 VECRTN ABS:4394 VECRTN
 WCOMND ABS:5FF8 WCOMND
 WDATA  ABS:5FFE WDATA
 WFDRPB ABS:5028 WFDRPB
 WRFDR  ABS:4A2C WRFDR
 WRITE  ABS:50B0 WRITE
 WROFSC ABS:4636 WROFSC
 WRSEC1 ABS:4A22 WRSEC1
 WSECTR ABS:5FFC WSECTR
 WTCPT1 ABS:426E WTCPT1
 XBASRT ABS:404A XBASRT
 XML14  ABS:164E XML14
 XML16  ABS:15D6 XML16
 XMLBC  ABS:4409 XMLBC
 XMLRTN ABS:2244 XMLRTN
